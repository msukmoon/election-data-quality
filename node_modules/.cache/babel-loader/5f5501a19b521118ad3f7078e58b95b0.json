{"ast":null,"code":"var _jsxFileName = \"/Users/jay/Documents/election-data-quality/front-end/src/components/MapView.js\";\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Map, ZoomControl, LayersControl, LayerGroup, TileLayer, FeatureGroup, Tooltip, Polygon } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Control from \"react-leaflet-control\";\nimport * as turf from \"@turf/turf\";\nimport { CubeGrid } from \"styled-spinkit\";\nimport NumberFormat from \"react-number-format\";\nimport { push as Menu } from \"react-burger-menu\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport styled from \"styled-components\";\nconst {\n  Overlay\n} = LayersControl;\nconst Styles = styled.div`\n  /* Style of bootstrap buttons */\n  .btn-light {\n    background-color: white;\n    border-color: black;\n    font-size: 1em;\n  }\n\n  /* Style of bootstrap dropdowns */\n  .dropdown-item {\n    color: black;\n    font-size: 1em;\n  }\n\n  /* Sizing of leaflet map */\n  .leaflet-container {\n    width: 100%;\n    height: 91.35vh;\n  }\n\n  /* Position and sizing of clickable cross button */\n  .bm-cross-button {\n    height: 32px; !important\n    width: 32px; !important\n  }\n\n  /* Color/shape of close button cross */\n  .bm-cross {\n    background: #37474f;\n  }\n\n  /* Sidebar wrapper styles */\n  .bm-menu-wrap {\n    position: fixed;\n    height: 100%;\n  }\n\n  /* General sidebar styles */\n  .bm-menu {\n    background: #eceff1;\n    padding: 0 1.5em;\n    font-size: 1em;\n  }\n\n  /* Wrapper for item list */\n  .bm-item-list {\n    padding: 0;\n  }\n\n  /* Individual item */\n  .bm-item {\n    display: inline-block;\n    outline: none;\n  }\n`;\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: 34,\n      longitude: -85,\n      zoom: 6,\n      displayMode: 1,\n      editMode: 1,\n      isLoading: false,\n      sidebarOpen: false,\n      currPrecinct: {\n        id: null,\n        selected: false,\n        precinctsIndex: null,\n        canonicalName: null,\n        ghost: null,\n        multipleBorder: null,\n        adjPrecIds: [],\n        enclPrecIds: [],\n        electionData: [{\n          election: \"2016 Presidential\",\n          demVotes: null,\n          repVotes: null\n        }, {\n          election: \"2016 Congressional\",\n          demVotes: null,\n          repVotes: null\n        }, {\n          election: \"2018 Congressional\",\n          demVotes: null,\n          repVotes: null\n        }],\n        ethnicityData: [{\n          ethnicity: \"White\",\n          population: null\n        }, {\n          ethnicity: \"Black or African American\",\n          population: null\n        }, {\n          ethnicity: \"Asian or Asian American\",\n          population: null\n        }, {\n          ethnicity: \"Native American\",\n          population: null\n        }, {\n          ethnicity: \"Pacific Islander\",\n          population: null\n        }, {\n          ethnicity: \"Others\",\n          population: null\n        }, {\n          ethnicity: \"Total\",\n          population: null\n        }],\n        logBag: [],\n        coordinates: [] // TODO: Add more properties\n\n      },\n      nextPrecinct: {\n        id: null\n      },\n      states: [],\n      counties: [],\n      precincts: [],\n      // NOTE: The two features below are not supported yet\n      nationalParks: [],\n      congDistricts: [],\n      // NOTE: The feature below is for testing boundary correction\n      testPolygons: [{\n        id: 1,\n        fillColor: \"#fff9c4\",\n        coordinates: [[[37, -85], [37.25, -84.75], [38, -85], [38, -84], [37, -84]]]\n      }, {\n        id: 2,\n        fillColor: \"#fff9c4\",\n        coordinates: [[[37, -84], [38, -84], [38.5, -83.5], [38, -83], [37, -83]]]\n      }]\n    };\n  }\n\n  handleStateChange(state) {\n    this.setState({\n      sidebarOpen: state.isOpen\n    }); // TODO: Delete this if not needed\n    // if (state.isOpen === false) {\n    //   this.setState({\n    //     sidebarOpen: state.isOpen,\n    //     currPrecinct: { ...this.state.currPrecinct, selected: false }\n    //   });\n    // } else {\n    //   this.setState({ sidebarOpen: state.isOpen });\n    // }\n  }\n\n  handleMouseOver(e) {\n    e.target.openTooltip();\n  }\n\n  handleMouseOut(e) {\n    e.target.closeTooltip();\n  }\n\n  handleZoomEnd(e) {\n    if (e.target._zoom < 7 && this.state.displayMode === 2) {\n      this.setState({\n        zoom: e.target._zoom,\n        displayMode: 1,\n        counties: []\n      });\n    } else if (e.target._zoom < 10 && this.state.displayMode === 3) {\n      this.setState({\n        zoom: e.target._zoom,\n        displayMode: 2,\n        precincts: []\n      });\n    } else {\n      this.setState({\n        zoom: e.target._zoom\n      });\n    }\n  }\n\n  handleViewNeighbors() {\n    if (this.state.editMode === 2) {\n      this.setState({\n        editMode: 1\n      });\n    } else {\n      this.setState({\n        editMode: 2\n      });\n    }\n  }\n\n  handleAddNeighbor() {\n    if (this.state.editMode === 3) {\n      this.setState({\n        editMode: 1\n      });\n    } else {\n      this.setState({\n        editMode: 3\n      });\n    }\n  }\n\n  handleDeleteNeighbor() {\n    if (this.state.editMode === 4) {\n      this.setState({\n        editMode: 1\n      });\n    } else {\n      this.setState({\n        editMode: 4\n      });\n    }\n  }\n\n  handleMergePrecincts() {\n    var poly1 = turf.polygon([[[-82.574787, 35.594087], [-82.574787, 35.615581], [-82.545261, 35.615581], [-82.545261, 35.594087], [-82.574787, 35.594087]]]);\n    var poly2 = turf.polygon([[[-82.560024, 35.585153], [-82.560024, 35.602602], [-82.52964, 35.602602], [-82.52964, 35.585153], [-82.560024, 35.585153]]]);\n    var union = turf.union(poly1, poly2);\n    console.log(union); // if (this.state.editMode === 5) {\n    //   this.setState({ editMode: 1 });\n    // } else {\n    //   this.setState({ editMode: 5 });\n    // }\n  }\n\n  handlePrecinctClick(e, id) {\n    if (this.state.editMode === 1) {\n      // Modify map view and change the fill color of a selected state\n      const precinctsCopy = [...this.state.precincts];\n\n      if (this.state.currPrecinct.precinctsIndex !== null) {\n        precinctsCopy[this.state.currPrecinct.precinctsIndex] = { ...precinctsCopy[this.state.currPrecinct.precinctsIndex],\n          fillColor: \"#fff9c4\"\n        };\n      }\n\n      const newPrecinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n      precinctsCopy[newPrecinctsIndex] = { ...precinctsCopy[newPrecinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      this.setState({\n        latitude: e.latlng.lat,\n        longitude: e.latlng.lng - 0.1,\n        zoom: 12,\n        isLoading: true,\n        sidebarOpen: false,\n        currPrecinct: { ...this.state.currPrecinct,\n          precinctsIndex: newPrecinctsIndex\n        },\n        precincts: precinctsCopy\n      }); // Fetch a detailed data about a selected precinct\n\n      const electionDataCopy = [...this.state.currPrecinct.electionData];\n      const ethnicityDataCopy = [...this.state.currPrecinct.ethnicityData];\n      fetch(\"api/precinct/\" + id).then(res => res.json()).then(data => {\n        console.log(data); // DEBUG: Remove this line later\n\n        electionDataCopy[0] = { ...electionDataCopy[0],\n          demVotes: data.electionData.PRESIDENTIAL_16_DEM,\n          repVotes: data.electionData.PRESIDENTIAL_16_REP\n        };\n        electionDataCopy[1] = { ...electionDataCopy[1],\n          demVotes: data.electionData.CONGRESSIONAL_16_DEM,\n          repVotes: data.electionData.CONGRESSIONAL_16_REP\n        };\n        electionDataCopy[2] = { ...electionDataCopy[2],\n          demVotes: data.electionData.CONGRESSIONAL_18_DEM,\n          repVotes: data.electionData.CONGRESSIONAL_18_REP\n        };\n        ethnicityDataCopy[0] = { ...ethnicityDataCopy[0],\n          population: data.white\n        };\n        ethnicityDataCopy[1] = { ...ethnicityDataCopy[1],\n          population: data.africanAmer\n        };\n        ethnicityDataCopy[2] = { ...ethnicityDataCopy[2],\n          population: data.asian\n        };\n        ethnicityDataCopy[3] = { ...ethnicityDataCopy[3],\n          population: data.nativeAmer\n        };\n        ethnicityDataCopy[4] = { ...ethnicityDataCopy[4],\n          population: data.pasifika\n        };\n        ethnicityDataCopy[5] = { ...ethnicityDataCopy[5],\n          population: data.others\n        };\n        ethnicityDataCopy[6] = { ...ethnicityDataCopy[6],\n          population: data.white + data.africanAmer + data.asian + data.nativeAmer + data.pasifika + data.others\n        };\n        this.setState({\n          isLoading: false,\n          sidebarOpen: true,\n          currPrecinct: { ...this.state.currPrecinct,\n            id: data.id,\n            canonicalName: data.canonicalName,\n            ghost: data.ghost,\n            multipleBorder: data.multipleBorder,\n            electionData: electionDataCopy,\n            ethnicityData: ethnicityDataCopy // TODO: add logBag\n            // logBag: [\n            //   ...this.state.currPrecinct.logBag,\n            //   {\n            //     id: null,\n            //     category: null,\n            //     comment: null\n            //   }\n            // ],\n            // TODO: Add more properties\n\n          }\n        });\n      });\n    } else if (this.state.editMode === 2) {\n      // Fetch a data of a selected precinct and then highlight its neighbors\n      const precinctsCopy = [...this.state.precincts];\n      precinctsCopy.forEach(precinct => {\n        precinct.fillColor = \"#fff9c4\";\n      });\n      const precinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n      precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      this.setState({\n        isLoading: true\n      });\n      fetch(\"api/precinct/\" + id).then(res => res.json()).then(data => {\n        console.log(data); // DEBUG: Remove this line later\n\n        data.adjPrecIds.forEach(adjPrecId => {\n          precinctsCopy.forEach(precinct => {\n            if (precinct.id === adjPrecId) {\n              precinct.fillColor = \"#ffeb3b\";\n            }\n          });\n        });\n        this.setState({\n          editMode: 1,\n          isLoading: false,\n          precincts: precinctsCopy\n        });\n      });\n    } else if (this.state.editMode === 3) {\n      // Highlight a selected precinct\n      const precinctsCopy = [...this.state.precincts];\n      const precinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n      precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n\n      if (this.state.currPrecinct.selected === false) {\n        this.setState({\n          currPrecinct: { ...this.state.currPrecinct,\n            id: id,\n            selected: true\n          },\n          precincts: precinctsCopy\n        });\n      } else {\n        this.setState({\n          editMode: 1,\n          currPrecinct: { ...this.state.currPrecinct,\n            selected: false\n          },\n          nextPrecinct: { ...this.state.nextPrecinct,\n            id: id\n          },\n          precincts: precinctsCopy\n        });\n      }\n    } else if (this.state.editMode === 4) {\n      // Highlight a selected precinct\n      const precinctsCopy = [...this.state.precincts];\n      const precinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n      precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n\n      if (this.state.currPrecinct.selected === false) {\n        this.setState({\n          currPrecinct: { ...this.state.currPrecinct,\n            id: id,\n            selected: true\n          },\n          precincts: precinctsCopy\n        });\n      } else {\n        this.setState({\n          editMode: 1,\n          currPrecinct: { ...this.state.currPrecinct,\n            selected: false\n          },\n          nextPrecinct: { ...this.state.nextPrecinct,\n            id: id\n          },\n          precincts: precinctsCopy\n        });\n      }\n    } else if (this.state.editMode === 5) {\n      // Highlight a selected precinct\n      const precinctsCopy = [...this.state.precincts];\n      const precinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n      precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n\n      if (this.state.currPrecinct.selected === false) {\n        this.setState({\n          currPrecinct: { ...this.state.currPrecinct,\n            id: id,\n            selected: true,\n            coordinates: precinctsCopy[precinctsIndex].coordinates\n          },\n          precincts: precinctsCopy\n        });\n      } else {\n        // union(\n        //   L.polygon(this.currPrecinct.coordinates),\n        //   L.polygon(precinctsCopy[precinctsIndex].coordinates)\n        // );\n        this.setState({\n          editMode: 1,\n          currPrecinct: { ...this.state.currPrecinct,\n            selected: false\n          },\n          nextPrecinct: { ...this.state.nextPrecinct,\n            id: id\n          },\n          precincts: precinctsCopy\n        });\n      }\n    }\n  }\n\n  handleCountyClick(e, id) {\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng,\n      zoom: 10,\n      isLoading: true\n    });\n    fetch(\"api/county/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.precincts.forEach(currData => {\n        this.setState({\n          precincts: [...this.state.precincts, {\n            id: currData.id,\n            fillColor: currData.hasError ? \"#ff8a50\" : \"#fff9c4\",\n            coordinates: JSON.parse(currData.coordinates)\n          }]\n        });\n      });\n      this.setState({\n        displayMode: 3,\n        isLoading: false\n      });\n    });\n  }\n\n  handleStateClick(e, id) {\n    // Get counties of a selected state\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng,\n      zoom: 7,\n      isLoading: true\n    });\n    fetch(\"api/state/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.counties.forEach(currData => {\n        this.setState({\n          counties: [...this.state.counties, {\n            id: currData.id,\n            fillColor: currData.hasError ? \"#ff8a50\" : \"#fff9c4\",\n            coordinates: JSON.parse(currData.coordinates)\n          }]\n        });\n      });\n      this.setState({\n        displayMode: 2,\n        isLoading: false\n      });\n    });\n  }\n\n  handleStateSelect(id) {\n    // Selected Kentucky\n    if (id === 21) {\n      this.setState({\n        latitude: 37.84,\n        longitude: -84.27,\n        zoom: 7\n      });\n    } // Selected Louisiana\n    else if (id === 22) {\n        this.setState({\n          latitude: 30.98,\n          longitude: -91.96,\n          zoom: 7\n        });\n      } // Selected South Carolina\n      else if (id === 45) {\n          this.setState({\n            latitude: 33.84,\n            longitude: -81.16,\n            zoom: 7\n          });\n        } // Get counties of a selected state\n\n\n    this.setState({\n      isLoading: true\n    });\n    fetch(\"api/state/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.counties.forEach(currData => {\n        this.setState({\n          counties: [...this.state.counties, {\n            id: currData.id,\n            fillColor: \"#fff9c4\",\n            coordinates: JSON.parse(currData.coordinates)\n          }]\n        });\n      });\n      this.setState({\n        displayMode: 2,\n        isLoading: false\n      });\n    });\n  }\n\n  handleTableChange(oldValue, newValue, row) {\n    // DEBUG: Remove these lines below later\n    console.log(oldValue);\n    console.log(newValue);\n    console.log(row); // TODO: Make a POST request to the server with \"api/precinct\"\n    // fetch(\"api/precinct\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\"\n    //   },\n    //   body: JSON.stringify()\n    // })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     console.log(\"Success:\", data);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error:\", error);\n    //   });\n  }\n\n  handlePolygonCreated(e) {\n    // TODO: Push new precinct object to the precincts array\n    // TODO: Make a POST request to the server to add new precinct\n    console.log(e);\n  }\n\n  handlePolygonEdited(e) {\n    // TODO: Update new coordinates in the state object\n    // TODO: Make a POST request to the server to update precinct coordinates\n    e.layers.eachLayer(layer => {\n      console.log(layer.options.id);\n      console.log(layer.getLatLngs());\n      console.log(layer.toGeoJSON().geometry.coordinates);\n    });\n  }\n\n  handlePolygonDeleted(e) {// TODO: Delete precinct object from the precincts array\n    // TODO: Do not open side bar when clicking a precinct to delete\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    fetch(\"api/state/all\").then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.forEach(currData => {\n        this.setState({\n          states: [...this.state.states, {\n            id: currData.id,\n            fillColor: \"#fff9c4\",\n            coordinates: JSON.parse(currData.coordinates)\n          }]\n        });\n      });\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  formatNumber(data) {\n    return React.createElement(NumberFormat, {\n      value: data,\n      displayType: \"text\",\n      thousandSeparator: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    });\n  }\n\n  validateNumber(data) {\n    if (isNaN(data)) {\n      return {\n        valid: false,\n        message: \"Input should be numeric\"\n      };\n    } else if (data < 0) {\n      return {\n        valid: false,\n        message: \"Input cannot be less than zero\"\n      };\n    } else if (data > 0 && data !== data.replace(/^0+/, \"\")) {\n      return {\n        valid: false,\n        message: \"Input cannot have a leading zero\"\n      };\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const position = [this.state.latitude, this.state.longitude];\n    const electionTableColumns = [{\n      dataField: \"election\",\n      text: \"Election\"\n    }, {\n      dataField: \"demVotes\",\n      text: \"Democratic Votes\",\n      formatter: this.formatNumber,\n      validator: this.validateNumber\n    }, {\n      dataField: \"repVotes\",\n      text: \"Republican Votes\",\n      formatter: this.formatNumber,\n      validator: this.validateNumber\n    }];\n    const ethnicityTableColumns = [{\n      dataField: \"ethnicity\",\n      text: \"Ethnicity\"\n    }, {\n      dataField: \"population\",\n      text: \"Population\",\n      formatter: this.formatNumber,\n      validator: this.validateNumber\n    }];\n    const logTableColumns = [{\n      dataField: \"id\",\n      text: \"Log ID\"\n    }, {\n      dataField: \"category\",\n      text: \"Error Category\"\n    }, {\n      dataField: \"comment\",\n      text: \"User Comment\"\n    }];\n    const dataSourceTableColumns = [{\n      dataField: \"name\",\n      text: \"Source Name\"\n    }, {\n      dataField: \"category\",\n      text: \"Data Category\"\n    }, {\n      dataField: \"url\",\n      text: \"Source URL\"\n    }];\n    return React.createElement(Styles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"outer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      size: \"sm\",\n      show: this.state.isLoading,\n      onHide: () => {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(CubeGrid, {\n      size: 24,\n      color: \"#37474f\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    })), React.createElement(Col, {\n      className: \"pt-4\",\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, \"Loading Data...\"))))), React.createElement(Menu, {\n      right: true,\n      noOverlay: true,\n      disableOverlayClick: true,\n      pageWrapId: \"page-wrap\",\n      outerContainerId: \"outer-container\",\n      menuClassName: \"menu-right\",\n      width: \"35%\",\n      customBurgerIcon: false,\n      isOpen: this.state.sidebarOpen,\n      onStateChange: state => this.handleStateChange(state),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      className: \"px-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"pt-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 776\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 777\n      },\n      __self: this\n    }, this.state.currPrecinct.id))), React.createElement(Row, {\n      className: \"py-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }, \"Election Data\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"election\",\n      data: this.state.currPrecinct.electionData,\n      columns: electionTableColumns,\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true,\n        afterSaveCell: this.handleTableChange\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, \"County Demographic Data\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"ethnicity\",\n      data: this.state.currPrecinct.ethnicityData,\n      columns: ethnicityTableColumns,\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825\n      },\n      __self: this\n    }, \"Corrections Log\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 829\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"id\",\n      data: [],\n      columns: logTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847\n      },\n      __self: this\n    }, \"Data Sources\"))), React.createElement(Row, {\n      className: \"pb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 851\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"name\",\n      data: [],\n      columns: dataSourceTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }))))), React.createElement(\"main\", {\n      id: \"page-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      className: \"px-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 872\n      },\n      __self: this\n    }, React.createElement(Map, {\n      center: position,\n      zoomControl: false,\n      zoom: this.state.zoom,\n      onZoomEnd: e => this.handleZoomEnd(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873\n      },\n      __self: this\n    }, React.createElement(ZoomControl, {\n      position: \"bottomleft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    }), React.createElement(LayersControl, {\n      position: \"bottomleft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      url: \"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://stadiamaps.com/\\\">Stadia Maps</a>,  \\xA9 <a href=\\\"https://openmaptiles.org/\\\">OpenMapTiles</a>  \\xA9 <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap</a> contributors\",\n      preferCanvas: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881\n      },\n      __self: this\n    }), React.createElement(Control, {\n      position: \"topleft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }, React.createElement(ButtonGroup, {\n      vertical: true,\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889\n      },\n      __self: this\n    }, React.createElement(DropdownButton, {\n      as: ButtonGroup,\n      id: \"select-state-dropdown\",\n      drop: \"right\",\n      variant: \"light\",\n      size: \"sm\",\n      title: \"Select State\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 890\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      onSelect: () => this.handleStateSelect(21),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898\n      },\n      __self: this\n    }, \"Kentucky\"), React.createElement(Dropdown.Item, {\n      onSelect: () => this.handleStateSelect(22),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903\n      },\n      __self: this\n    }, \"Louisiana\"), React.createElement(Dropdown.Item, {\n      onSelect: () => this.handleStateSelect(45),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908\n      },\n      __self: this\n    }, \"South Carolina\")), React.createElement(Button, {\n      variant: \"light\",\n      size: \"sm\",\n      active: this.state.editMode === 2 ? true : false,\n      onClick: () => this.handleViewNeighbors(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 914\n      },\n      __self: this\n    }, \"View Neighbors\"), React.createElement(Button, {\n      variant: \"light\",\n      size: \"sm\",\n      active: this.state.editMode === 3 ? true : false,\n      onClick: () => this.handleAddNeighbor(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922\n      },\n      __self: this\n    }, \"Add Neighbor\"), React.createElement(Button, {\n      variant: \"light\",\n      size: \"sm\",\n      active: this.state.editMode === 4 ? true : false,\n      onClick: () => this.handleDeleteNeighbor(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930\n      },\n      __self: this\n    }, \"Delete Neighbor\"), React.createElement(Button, {\n      variant: \"light\",\n      size: \"sm\",\n      active: this.state.editMode === 5 ? true : false,\n      onClick: () => this.handleMergePrecincts(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938\n      },\n      __self: this\n    }, \"Merge Precincts\"))), React.createElement(Overlay, {\n      name: \"State Boundaries\",\n      checked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 948\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 949\n      },\n      __self: this\n    }, this.state.states.map(state => {\n      if (this.state.displayMode === 1) {\n        return React.createElement(Polygon, {\n          id: state.id,\n          key: state.id,\n          positions: state.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: state.fillColor,\n          onClick: e => this.handleStateClick(e, state.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 953\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 968\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 969\n          },\n          __self: this\n        }, state.id)));\n      } else if (this.state.zoom < 7) {\n        return React.createElement(Polygon, {\n          id: state.id,\n          key: state.id,\n          positions: state.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: state.fillColor,\n          onClick: e => this.handleStateClick(e, state.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 975\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 990\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 991\n          },\n          __self: this\n        }, state.id)));\n      } else {\n        return null;\n      }\n    }))), React.createElement(Overlay, {\n      name: \"County Boundaries\",\n      checked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002\n      },\n      __self: this\n    }, this.state.counties.map(county => {\n      if (this.state.displayMode === 2) {\n        return React.createElement(Polygon, {\n          id: county.id,\n          key: county.id,\n          positions: county.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: county.fillColor,\n          onClick: e => this.handleCountyClick(e, county.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1006\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1021\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1022\n          },\n          __self: this\n        }, county.id)));\n      } else if (this.state.zoom < 9) {\n        return React.createElement(Polygon, {\n          id: county.id,\n          key: county.id,\n          positions: county.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: county.fillColor,\n          onClick: e => this.handleCountyClick(e, county.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1028\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1043\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1044\n          },\n          __self: this\n        }, county.id)));\n      } else {\n        return null;\n      }\n    }))), React.createElement(Overlay, {\n      name: \"Precinct Boundaries\",\n      checked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055\n      },\n      __self: this\n    }, this.state.precincts.map(precinct => {\n      if (this.state.displayMode === 3) {\n        return React.createElement(Polygon, {\n          id: precinct.id,\n          key: precinct.id,\n          positions: precinct.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: precinct.fillColor,\n          onClick: e => this.handlePrecinctClick(e, precinct.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1059\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1074\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1075\n          },\n          __self: this\n        }, precinct.id)));\n      } else {\n        return null;\n      }\n    }))), React.createElement(Overlay, {\n      name: \"National Park Boundaries\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1085\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1086\n      },\n      __self: this\n    }, this.state.nationalParks.map(park => {\n      return React.createElement(Polygon, {\n        id: park.id,\n        key: park.id,\n        positions: park.coordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1089\n        },\n        __self: this\n      });\n    }))), React.createElement(Overlay, {\n      name: \"Congressional District Boundaries\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099\n      },\n      __self: this\n    }, this.state.congDistricts.map(district => {\n      return React.createElement(Polygon, {\n        id: district.id,\n        key: district.id,\n        positions: district.coordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1102\n        },\n        __self: this\n      });\n    }))), React.createElement(Overlay, {\n      name: \"Sample Polygons\",\n      checked: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1111\n      },\n      __self: this\n    }, React.createElement(FeatureGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112\n      },\n      __self: this\n    }, React.createElement(EditControl, {\n      position: \"bottomleft\",\n      onCreated: this.handlePolygonCreated,\n      onEdited: this.handlePolygonEdited,\n      onDeleted: this.handlePolygonDeleted,\n      draw: {\n        polyline: false,\n        circle: false,\n        marker: false,\n        circlemarker: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113\n      },\n      __self: this\n    }), this.state.testPolygons.map(polygon => {\n      return React.createElement(Polygon, {\n        id: polygon.id,\n        key: polygon.id,\n        positions: polygon.coordinates,\n        smoothFactor: 1,\n        color: \"#102027\",\n        weight: 1,\n        fillOpacity: 0.5,\n        fillColor: polygon.fillColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1127\n        },\n        __self: this\n      });\n    })))))))))));\n  }\n\n}\n\nexport default MapView;","map":{"version":3,"sources":["/Users/jay/Documents/election-data-quality/front-end/src/components/MapView.js"],"names":["React","Container","Row","Col","ButtonGroup","Button","Dropdown","DropdownButton","Modal","Map","ZoomControl","LayersControl","LayerGroup","TileLayer","FeatureGroup","Tooltip","Polygon","EditControl","Control","turf","CubeGrid","NumberFormat","push","Menu","BootstrapTable","cellEditFactory","styled","Overlay","Styles","div","MapView","Component","constructor","props","state","latitude","longitude","zoom","displayMode","editMode","isLoading","sidebarOpen","currPrecinct","id","selected","precinctsIndex","canonicalName","ghost","multipleBorder","adjPrecIds","enclPrecIds","electionData","election","demVotes","repVotes","ethnicityData","ethnicity","population","logBag","coordinates","nextPrecinct","states","counties","precincts","nationalParks","congDistricts","testPolygons","fillColor","handleStateChange","setState","isOpen","handleMouseOver","e","target","openTooltip","handleMouseOut","closeTooltip","handleZoomEnd","_zoom","handleViewNeighbors","handleAddNeighbor","handleDeleteNeighbor","handleMergePrecincts","poly1","polygon","poly2","union","console","log","handlePrecinctClick","precinctsCopy","newPrecinctsIndex","findIndex","el","latlng","lat","lng","electionDataCopy","ethnicityDataCopy","fetch","then","res","json","data","PRESIDENTIAL_16_DEM","PRESIDENTIAL_16_REP","CONGRESSIONAL_16_DEM","CONGRESSIONAL_16_REP","CONGRESSIONAL_18_DEM","CONGRESSIONAL_18_REP","white","africanAmer","asian","nativeAmer","pasifika","others","forEach","precinct","adjPrecId","handleCountyClick","currData","hasError","JSON","parse","handleStateClick","handleStateSelect","handleTableChange","oldValue","newValue","row","handlePolygonCreated","handlePolygonEdited","layers","eachLayer","layer","options","getLatLngs","toGeoJSON","geometry","handlePolygonDeleted","componentDidMount","formatNumber","validateNumber","isNaN","valid","message","replace","render","position","electionTableColumns","dataField","text","formatter","validator","ethnicityTableColumns","logTableColumns","dataSourceTableColumns","mode","blurToSave","afterSaveCell","map","county","park","district","polyline","circle","marker","circlemarker"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Modal from \"react-bootstrap/Modal\";\nimport {\n  Map,\n  ZoomControl,\n  LayersControl,\n  LayerGroup,\n  TileLayer,\n  FeatureGroup,\n  Tooltip,\n  Polygon\n} from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Control from \"react-leaflet-control\";\nimport * as turf from \"@turf/turf\";\nimport { CubeGrid } from \"styled-spinkit\";\nimport NumberFormat from \"react-number-format\";\nimport { push as Menu } from \"react-burger-menu\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport styled from \"styled-components\";\n\nconst { Overlay } = LayersControl;\n\nconst Styles = styled.div`\n  /* Style of bootstrap buttons */\n  .btn-light {\n    background-color: white;\n    border-color: black;\n    font-size: 1em;\n  }\n\n  /* Style of bootstrap dropdowns */\n  .dropdown-item {\n    color: black;\n    font-size: 1em;\n  }\n\n  /* Sizing of leaflet map */\n  .leaflet-container {\n    width: 100%;\n    height: 91.35vh;\n  }\n\n  /* Position and sizing of clickable cross button */\n  .bm-cross-button {\n    height: 32px; !important\n    width: 32px; !important\n  }\n\n  /* Color/shape of close button cross */\n  .bm-cross {\n    background: #37474f;\n  }\n\n  /* Sidebar wrapper styles */\n  .bm-menu-wrap {\n    position: fixed;\n    height: 100%;\n  }\n\n  /* General sidebar styles */\n  .bm-menu {\n    background: #eceff1;\n    padding: 0 1.5em;\n    font-size: 1em;\n  }\n\n  /* Wrapper for item list */\n  .bm-item-list {\n    padding: 0;\n  }\n\n  /* Individual item */\n  .bm-item {\n    display: inline-block;\n    outline: none;\n  }\n`;\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: 34,\n      longitude: -85,\n      zoom: 6,\n      displayMode: 1,\n      editMode: 1,\n      isLoading: false,\n      sidebarOpen: false,\n      currPrecinct: {\n        id: null,\n        selected: false,\n        precinctsIndex: null,\n        canonicalName: null,\n        ghost: null,\n        multipleBorder: null,\n        adjPrecIds: [],\n        enclPrecIds: [],\n        electionData: [\n          {\n            election: \"2016 Presidential\",\n            demVotes: null,\n            repVotes: null\n          },\n          {\n            election: \"2016 Congressional\",\n            demVotes: null,\n            repVotes: null\n          },\n          {\n            election: \"2018 Congressional\",\n            demVotes: null,\n            repVotes: null\n          }\n        ],\n        ethnicityData: [\n          {\n            ethnicity: \"White\",\n            population: null\n          },\n          {\n            ethnicity: \"Black or African American\",\n            population: null\n          },\n          {\n            ethnicity: \"Asian or Asian American\",\n            population: null\n          },\n          {\n            ethnicity: \"Native American\",\n            population: null\n          },\n          {\n            ethnicity: \"Pacific Islander\",\n            population: null\n          },\n          {\n            ethnicity: \"Others\",\n            population: null\n          },\n          {\n            ethnicity: \"Total\",\n            population: null\n          }\n        ],\n        logBag: [],\n        coordinates: []\n        // TODO: Add more properties\n      },\n      nextPrecinct: {\n        id: null\n      },\n      states: [],\n      counties: [],\n      precincts: [],\n      // NOTE: The two features below are not supported yet\n      nationalParks: [],\n      congDistricts: [],\n      // NOTE: The feature below is for testing boundary correction\n      testPolygons: [\n        {\n          id: 1,\n          fillColor: \"#fff9c4\",\n          coordinates: [\n            [\n              [37, -85],\n              [37.25, -84.75],\n              [38, -85],\n              [38, -84],\n              [37, -84]\n            ]\n          ]\n        },\n        {\n          id: 2,\n          fillColor: \"#fff9c4\",\n          coordinates: [\n            [\n              [37, -84],\n              [38, -84],\n              [38.5, -83.5],\n              [38, -83],\n              [37, -83]\n            ]\n          ]\n        }\n      ]\n    };\n  }\n\n  handleStateChange(state) {\n    this.setState({ sidebarOpen: state.isOpen });\n\n    // TODO: Delete this if not needed\n    // if (state.isOpen === false) {\n    //   this.setState({\n    //     sidebarOpen: state.isOpen,\n    //     currPrecinct: { ...this.state.currPrecinct, selected: false }\n    //   });\n    // } else {\n    //   this.setState({ sidebarOpen: state.isOpen });\n    // }\n  }\n\n  handleMouseOver(e) {\n    e.target.openTooltip();\n  }\n\n  handleMouseOut(e) {\n    e.target.closeTooltip();\n  }\n\n  handleZoomEnd(e) {\n    if (e.target._zoom < 7 && this.state.displayMode === 2) {\n      this.setState({ zoom: e.target._zoom, displayMode: 1, counties: [] });\n    } else if (e.target._zoom < 10 && this.state.displayMode === 3) {\n      this.setState({ zoom: e.target._zoom, displayMode: 2, precincts: [] });\n    } else {\n      this.setState({ zoom: e.target._zoom });\n    }\n  }\n\n  handleViewNeighbors() {\n    if (this.state.editMode === 2) {\n      this.setState({ editMode: 1 });\n    } else {\n      this.setState({ editMode: 2 });\n    }\n  }\n\n  handleAddNeighbor() {\n    if (this.state.editMode === 3) {\n      this.setState({ editMode: 1 });\n    } else {\n      this.setState({ editMode: 3 });\n    }\n  }\n\n  handleDeleteNeighbor() {\n    if (this.state.editMode === 4) {\n      this.setState({ editMode: 1 });\n    } else {\n      this.setState({ editMode: 4 });\n    }\n  }\n\n  handleMergePrecincts() {\n    var poly1 = turf.polygon([\n      [\n        [-82.574787, 35.594087],\n        [-82.574787, 35.615581],\n        [-82.545261, 35.615581],\n        [-82.545261, 35.594087],\n        [-82.574787, 35.594087]\n      ]\n    ]);\n    var poly2 = turf.polygon([\n      [\n        [-82.560024, 35.585153],\n        [-82.560024, 35.602602],\n        [-82.52964, 35.602602],\n        [-82.52964, 35.585153],\n        [-82.560024, 35.585153]\n      ]\n    ]);\n\n    var union = turf.union(poly1, poly2);\n    console.log(union);\n\n    // if (this.state.editMode === 5) {\n    //   this.setState({ editMode: 1 });\n    // } else {\n    //   this.setState({ editMode: 5 });\n    // }\n  }\n\n  handlePrecinctClick(e, id) {\n    if (this.state.editMode === 1) {\n      // Modify map view and change the fill color of a selected state\n      const precinctsCopy = [...this.state.precincts];\n      if (this.state.currPrecinct.precinctsIndex !== null) {\n        precinctsCopy[this.state.currPrecinct.precinctsIndex] = {\n          ...precinctsCopy[this.state.currPrecinct.precinctsIndex],\n          fillColor: \"#fff9c4\"\n        };\n      }\n      const newPrecinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[newPrecinctsIndex] = {\n        ...precinctsCopy[newPrecinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      this.setState({\n        latitude: e.latlng.lat,\n        longitude: e.latlng.lng - 0.1,\n        zoom: 12,\n        isLoading: true,\n        sidebarOpen: false,\n        currPrecinct: {\n          ...this.state.currPrecinct,\n          precinctsIndex: newPrecinctsIndex\n        },\n        precincts: precinctsCopy\n      });\n\n      // Fetch a detailed data about a selected precinct\n      const electionDataCopy = [...this.state.currPrecinct.electionData];\n      const ethnicityDataCopy = [...this.state.currPrecinct.ethnicityData];\n      fetch(\"api/precinct/\" + id)\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(data); // DEBUG: Remove this line later\n          electionDataCopy[0] = {\n            ...electionDataCopy[0],\n            demVotes: data.electionData.PRESIDENTIAL_16_DEM,\n            repVotes: data.electionData.PRESIDENTIAL_16_REP\n          };\n          electionDataCopy[1] = {\n            ...electionDataCopy[1],\n            demVotes: data.electionData.CONGRESSIONAL_16_DEM,\n            repVotes: data.electionData.CONGRESSIONAL_16_REP\n          };\n          electionDataCopy[2] = {\n            ...electionDataCopy[2],\n            demVotes: data.electionData.CONGRESSIONAL_18_DEM,\n            repVotes: data.electionData.CONGRESSIONAL_18_REP\n          };\n          ethnicityDataCopy[0] = {\n            ...ethnicityDataCopy[0],\n            population: data.white\n          };\n          ethnicityDataCopy[1] = {\n            ...ethnicityDataCopy[1],\n            population: data.africanAmer\n          };\n          ethnicityDataCopy[2] = {\n            ...ethnicityDataCopy[2],\n            population: data.asian\n          };\n          ethnicityDataCopy[3] = {\n            ...ethnicityDataCopy[3],\n            population: data.nativeAmer\n          };\n          ethnicityDataCopy[4] = {\n            ...ethnicityDataCopy[4],\n            population: data.pasifika\n          };\n          ethnicityDataCopy[5] = {\n            ...ethnicityDataCopy[5],\n            population: data.others\n          };\n          ethnicityDataCopy[6] = {\n            ...ethnicityDataCopy[6],\n            population:\n              data.white +\n              data.africanAmer +\n              data.asian +\n              data.nativeAmer +\n              data.pasifika +\n              data.others\n          };\n          this.setState({\n            isLoading: false,\n            sidebarOpen: true,\n            currPrecinct: {\n              ...this.state.currPrecinct,\n              id: data.id,\n              canonicalName: data.canonicalName,\n              ghost: data.ghost,\n              multipleBorder: data.multipleBorder,\n              electionData: electionDataCopy,\n              ethnicityData: ethnicityDataCopy\n              // TODO: add logBag\n              // logBag: [\n              //   ...this.state.currPrecinct.logBag,\n              //   {\n              //     id: null,\n              //     category: null,\n              //     comment: null\n              //   }\n              // ],\n              // TODO: Add more properties\n            }\n          });\n        });\n    } else if (this.state.editMode === 2) {\n      // Fetch a data of a selected precinct and then highlight its neighbors\n      const precinctsCopy = [...this.state.precincts];\n      precinctsCopy.forEach((precinct) => {\n        precinct.fillColor = \"#fff9c4\";\n      });\n      const precinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[precinctsIndex] = {\n        ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      this.setState({ isLoading: true });\n      fetch(\"api/precinct/\" + id)\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(data); // DEBUG: Remove this line later\n          data.adjPrecIds.forEach((adjPrecId) => {\n            precinctsCopy.forEach((precinct) => {\n              if (precinct.id === adjPrecId) {\n                precinct.fillColor = \"#ffeb3b\";\n              }\n            });\n          });\n          this.setState({\n            editMode: 1,\n            isLoading: false,\n            precincts: precinctsCopy\n          });\n        });\n    } else if (this.state.editMode === 3) {\n      // Highlight a selected precinct\n      const precinctsCopy = [...this.state.precincts];\n      const precinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[precinctsIndex] = {\n        ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      if (this.state.currPrecinct.selected === false) {\n        this.setState({\n          currPrecinct: { ...this.state.currPrecinct, id: id, selected: true },\n          precincts: precinctsCopy\n        });\n      } else {\n        this.setState({\n          editMode: 1,\n          currPrecinct: { ...this.state.currPrecinct, selected: false },\n          nextPrecinct: { ...this.state.nextPrecinct, id: id },\n          precincts: precinctsCopy\n        });\n      }\n    } else if (this.state.editMode === 4) {\n      // Highlight a selected precinct\n      const precinctsCopy = [...this.state.precincts];\n      const precinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[precinctsIndex] = {\n        ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      if (this.state.currPrecinct.selected === false) {\n        this.setState({\n          currPrecinct: { ...this.state.currPrecinct, id: id, selected: true },\n          precincts: precinctsCopy\n        });\n      } else {\n        this.setState({\n          editMode: 1,\n          currPrecinct: { ...this.state.currPrecinct, selected: false },\n          nextPrecinct: { ...this.state.nextPrecinct, id: id },\n          precincts: precinctsCopy\n        });\n      }\n    } else if (this.state.editMode === 5) {\n      // Highlight a selected precinct\n      const precinctsCopy = [...this.state.precincts];\n      const precinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[precinctsIndex] = {\n        ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      if (this.state.currPrecinct.selected === false) {\n        this.setState({\n          currPrecinct: {\n            ...this.state.currPrecinct,\n            id: id,\n            selected: true,\n            coordinates: precinctsCopy[precinctsIndex].coordinates\n          },\n          precincts: precinctsCopy\n        });\n      } else {\n        // union(\n        //   L.polygon(this.currPrecinct.coordinates),\n        //   L.polygon(precinctsCopy[precinctsIndex].coordinates)\n        // );\n        this.setState({\n          editMode: 1,\n          currPrecinct: { ...this.state.currPrecinct, selected: false },\n          nextPrecinct: { ...this.state.nextPrecinct, id: id },\n          precincts: precinctsCopy\n        });\n      }\n    }\n  }\n\n  handleCountyClick(e, id) {\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng,\n      zoom: 10,\n      isLoading: true\n    });\n    fetch(\"api/county/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.precincts.forEach((currData) => {\n          this.setState({\n            precincts: [\n              ...this.state.precincts,\n              {\n                id: currData.id,\n                fillColor: currData.hasError ? \"#ff8a50\" : \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          });\n        });\n        this.setState({ displayMode: 3, isLoading: false });\n      });\n  }\n\n  handleStateClick(e, id) {\n    // Get counties of a selected state\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng,\n      zoom: 7,\n      isLoading: true\n    });\n    fetch(\"api/state/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.counties.forEach((currData) => {\n          this.setState({\n            counties: [\n              ...this.state.counties,\n              {\n                id: currData.id,\n                fillColor: currData.hasError ? \"#ff8a50\" : \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          });\n        });\n        this.setState({ displayMode: 2, isLoading: false });\n      });\n  }\n\n  handleStateSelect(id) {\n    // Selected Kentucky\n    if (id === 21) {\n      this.setState({ latitude: 37.84, longitude: -84.27, zoom: 7 });\n    }\n    // Selected Louisiana\n    else if (id === 22) {\n      this.setState({ latitude: 30.98, longitude: -91.96, zoom: 7 });\n    }\n    // Selected South Carolina\n    else if (id === 45) {\n      this.setState({ latitude: 33.84, longitude: -81.16, zoom: 7 });\n    }\n    // Get counties of a selected state\n    this.setState({ isLoading: true });\n    fetch(\"api/state/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.counties.forEach((currData) => {\n          this.setState({\n            counties: [\n              ...this.state.counties,\n              {\n                id: currData.id,\n                fillColor: \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          });\n        });\n        this.setState({ displayMode: 2, isLoading: false });\n      });\n  }\n\n  handleTableChange(oldValue, newValue, row) {\n    // DEBUG: Remove these lines below later\n    console.log(oldValue);\n    console.log(newValue);\n    console.log(row);\n\n    // TODO: Make a POST request to the server with \"api/precinct\"\n    // fetch(\"api/precinct\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\"\n    //   },\n    //   body: JSON.stringify()\n    // })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     console.log(\"Success:\", data);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error:\", error);\n    //   });\n  }\n\n  handlePolygonCreated(e) {\n    // TODO: Push new precinct object to the precincts array\n    // TODO: Make a POST request to the server to add new precinct\n    console.log(e);\n  }\n\n  handlePolygonEdited(e) {\n    // TODO: Update new coordinates in the state object\n    // TODO: Make a POST request to the server to update precinct coordinates\n    e.layers.eachLayer((layer) => {\n      console.log(layer.options.id);\n      console.log(layer.getLatLngs());\n      console.log(layer.toGeoJSON().geometry.coordinates);\n    });\n  }\n\n  handlePolygonDeleted(e) {\n    // TODO: Delete precinct object from the precincts array\n    // TODO: Do not open side bar when clicking a precinct to delete\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    fetch(\"api/state/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.forEach((currData) => {\n          this.setState({\n            states: [\n              ...this.state.states,\n              {\n                id: currData.id,\n                fillColor: \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          });\n        });\n        this.setState({ isLoading: false });\n      });\n  }\n\n  formatNumber(data) {\n    return (\n      <NumberFormat\n        value={data}\n        displayType={\"text\"}\n        thousandSeparator={true}\n      />\n    );\n  }\n\n  validateNumber(data) {\n    if (isNaN(data)) {\n      return {\n        valid: false,\n        message: \"Input should be numeric\"\n      };\n    } else if (data < 0) {\n      return {\n        valid: false,\n        message: \"Input cannot be less than zero\"\n      };\n    } else if (data > 0 && data !== data.replace(/^0+/, \"\")) {\n      return {\n        valid: false,\n        message: \"Input cannot have a leading zero\"\n      };\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const position = [this.state.latitude, this.state.longitude];\n    const electionTableColumns = [\n      {\n        dataField: \"election\",\n        text: \"Election\"\n      },\n      {\n        dataField: \"demVotes\",\n        text: \"Democratic Votes\",\n        formatter: this.formatNumber,\n        validator: this.validateNumber\n      },\n      {\n        dataField: \"repVotes\",\n        text: \"Republican Votes\",\n        formatter: this.formatNumber,\n        validator: this.validateNumber\n      }\n    ];\n    const ethnicityTableColumns = [\n      {\n        dataField: \"ethnicity\",\n        text: \"Ethnicity\"\n      },\n      {\n        dataField: \"population\",\n        text: \"Population\",\n        formatter: this.formatNumber,\n        validator: this.validateNumber\n      }\n    ];\n    const logTableColumns = [\n      {\n        dataField: \"id\",\n        text: \"Log ID\"\n      },\n      {\n        dataField: \"category\",\n        text: \"Error Category\"\n      },\n      {\n        dataField: \"comment\",\n        text: \"User Comment\"\n      }\n    ];\n    const dataSourceTableColumns = [\n      {\n        dataField: \"name\",\n        text: \"Source Name\"\n      },\n      {\n        dataField: \"category\",\n        text: \"Data Category\"\n      },\n      {\n        dataField: \"url\",\n        text: \"Source URL\"\n      }\n    ];\n    return (\n      <Styles>\n        <div id=\"outer-container\">\n          <Modal size=\"sm\" show={this.state.isLoading} onHide={() => {}}>\n            <Container>\n              <Row>\n                <Col>\n                  <CubeGrid size={24} color=\"#37474f\" />\n                </Col>\n                <Col className=\"pt-4\" xs={8}>\n                  <h5>Loading Data...</h5>\n                </Col>\n              </Row>\n            </Container>\n          </Modal>\n          <Menu\n            right\n            noOverlay\n            disableOverlayClick\n            pageWrapId={\"page-wrap\"}\n            outerContainerId={\"outer-container\"}\n            menuClassName={\"menu-right\"}\n            width={\"35%\"}\n            customBurgerIcon={false}\n            isOpen={this.state.sidebarOpen}\n            onStateChange={(state) => this.handleStateChange(state)}\n          >\n            <Container fluid className=\"px-0\">\n              <Row className=\"pt-4\">\n                <Col>\n                  <h4>{this.state.currPrecinct.id}</h4>\n                </Col>\n              </Row>\n              <Row className=\"py-1\">\n                <Col>\n                  <h5>Election Data</h5>\n                </Col>\n              </Row>\n              <Row className=\"pb-2\">\n                <Col>\n                  <BootstrapTable\n                    striped\n                    hover\n                    condensed\n                    keyField=\"election\"\n                    data={this.state.currPrecinct.electionData}\n                    columns={electionTableColumns}\n                    cellEdit={cellEditFactory({\n                      mode: \"click\",\n                      blurToSave: true,\n                      afterSaveCell: this.handleTableChange\n                    })}\n                  />\n                </Col>\n              </Row>\n              <Row className=\"pb-1\">\n                <Col>\n                  <h5>County Demographic Data</h5>\n                </Col>\n              </Row>\n              <Row className=\"pb-2\">\n                <Col>\n                  <BootstrapTable\n                    striped\n                    hover\n                    condensed\n                    keyField=\"ethnicity\"\n                    data={this.state.currPrecinct.ethnicityData}\n                    columns={ethnicityTableColumns}\n                    cellEdit={cellEditFactory({\n                      mode: \"click\",\n                      blurToSave: true\n                    })}\n                  />\n                </Col>\n              </Row>\n              <Row className=\"pb-1\">\n                <Col>\n                  <h5>Corrections Log</h5>\n                </Col>\n              </Row>\n              <Row className=\"pb-2\">\n                <Col>\n                  <BootstrapTable\n                    striped\n                    hover\n                    condensed\n                    keyField=\"id\"\n                    data={[]}\n                    columns={logTableColumns}\n                    noDataIndication=\"Data Not Available for Now\"\n                    cellEdit={cellEditFactory({\n                      mode: \"click\",\n                      blurToSave: true\n                    })}\n                  />\n                </Col>\n              </Row>\n              <Row className=\"pb-1\">\n                <Col>\n                  <h5>Data Sources</h5>\n                </Col>\n              </Row>\n              <Row className=\"pb-5\">\n                <Col>\n                  <BootstrapTable\n                    striped\n                    hover\n                    condensed\n                    keyField=\"name\"\n                    data={[]}\n                    columns={dataSourceTableColumns}\n                    noDataIndication=\"Data Not Available for Now\"\n                    cellEdit={cellEditFactory({\n                      mode: \"click\",\n                      blurToSave: true\n                    })}\n                  />\n                </Col>\n              </Row>\n            </Container>\n          </Menu>\n          <main id=\"page-wrap\">\n            <Container fluid className=\"px-0\">\n              <Row>\n                <Col>\n                  <Map\n                    center={position}\n                    zoomControl={false}\n                    zoom={this.state.zoom}\n                    onZoomEnd={(e) => this.handleZoomEnd(e)}\n                  >\n                    <ZoomControl position=\"bottomleft\" />\n                    <LayersControl position=\"bottomleft\">\n                      <TileLayer\n                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\"\n                        attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, \n                    &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> \n                    &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n                        preferCanvas={true}\n                      />\n                      <Control position=\"topleft\">\n                        <ButtonGroup vertical className=\"pb-2\">\n                          <DropdownButton\n                            as={ButtonGroup}\n                            id=\"select-state-dropdown\"\n                            drop=\"right\"\n                            variant=\"light\"\n                            size=\"sm\"\n                            title=\"Select State\"\n                          >\n                            <Dropdown.Item\n                              onSelect={() => this.handleStateSelect(21)}\n                            >\n                              Kentucky\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                              onSelect={() => this.handleStateSelect(22)}\n                            >\n                              Louisiana\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                              onSelect={() => this.handleStateSelect(45)}\n                            >\n                              South Carolina\n                            </Dropdown.Item>\n                          </DropdownButton>\n                          <Button\n                            variant=\"light\"\n                            size=\"sm\"\n                            active={this.state.editMode === 2 ? true : false}\n                            onClick={() => this.handleViewNeighbors()}\n                          >\n                            View Neighbors\n                          </Button>\n                          <Button\n                            variant=\"light\"\n                            size=\"sm\"\n                            active={this.state.editMode === 3 ? true : false}\n                            onClick={() => this.handleAddNeighbor()}\n                          >\n                            Add Neighbor\n                          </Button>\n                          <Button\n                            variant=\"light\"\n                            size=\"sm\"\n                            active={this.state.editMode === 4 ? true : false}\n                            onClick={() => this.handleDeleteNeighbor()}\n                          >\n                            Delete Neighbor\n                          </Button>\n                          <Button\n                            variant=\"light\"\n                            size=\"sm\"\n                            active={this.state.editMode === 5 ? true : false}\n                            onClick={() => this.handleMergePrecincts()}\n                          >\n                            Merge Precincts\n                          </Button>\n                        </ButtonGroup>\n                      </Control>\n                      <Overlay name=\"State Boundaries\" checked={true}>\n                        <LayerGroup>\n                          {this.state.states.map((state) => {\n                            if (this.state.displayMode === 1) {\n                              return (\n                                <Polygon\n                                  id={state.id}\n                                  key={state.id}\n                                  positions={state.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={state.fillColor}\n                                  onClick={(e) =>\n                                    this.handleStateClick(e, state.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{state.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else if (this.state.zoom < 7) {\n                              return (\n                                <Polygon\n                                  id={state.id}\n                                  key={state.id}\n                                  positions={state.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={state.fillColor}\n                                  onClick={(e) =>\n                                    this.handleStateClick(e, state.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{state.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else {\n                              return null;\n                            }\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"County Boundaries\" checked={true}>\n                        <LayerGroup>\n                          {this.state.counties.map((county) => {\n                            if (this.state.displayMode === 2) {\n                              return (\n                                <Polygon\n                                  id={county.id}\n                                  key={county.id}\n                                  positions={county.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={county.fillColor}\n                                  onClick={(e) =>\n                                    this.handleCountyClick(e, county.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{county.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else if (this.state.zoom < 9) {\n                              return (\n                                <Polygon\n                                  id={county.id}\n                                  key={county.id}\n                                  positions={county.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={county.fillColor}\n                                  onClick={(e) =>\n                                    this.handleCountyClick(e, county.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{county.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else {\n                              return null;\n                            }\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"Precinct Boundaries\" checked={true}>\n                        <LayerGroup>\n                          {this.state.precincts.map((precinct) => {\n                            if (this.state.displayMode === 3) {\n                              return (\n                                <Polygon\n                                  id={precinct.id}\n                                  key={precinct.id}\n                                  positions={precinct.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={precinct.fillColor}\n                                  onClick={(e) =>\n                                    this.handlePrecinctClick(e, precinct.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{precinct.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else {\n                              return null;\n                            }\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"National Park Boundaries\">\n                        <LayerGroup>\n                          {this.state.nationalParks.map((park) => {\n                            return (\n                              <Polygon\n                                id={park.id}\n                                key={park.id}\n                                positions={park.coordinates}\n                              />\n                            );\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"Congressional District Boundaries\">\n                        <LayerGroup>\n                          {this.state.congDistricts.map((district) => {\n                            return (\n                              <Polygon\n                                id={district.id}\n                                key={district.id}\n                                positions={district.coordinates}\n                              />\n                            );\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"Sample Polygons\" checked={false}>\n                        <FeatureGroup>\n                          <EditControl\n                            position=\"bottomleft\"\n                            onCreated={this.handlePolygonCreated}\n                            onEdited={this.handlePolygonEdited}\n                            onDeleted={this.handlePolygonDeleted}\n                            draw={{\n                              polyline: false,\n                              circle: false,\n                              marker: false,\n                              circlemarker: false\n                            }}\n                          />\n                          {this.state.testPolygons.map((polygon) => {\n                            return (\n                              <Polygon\n                                id={polygon.id}\n                                key={polygon.id}\n                                positions={polygon.coordinates}\n                                smoothFactor={1}\n                                color={\"#102027\"}\n                                weight={1}\n                                fillOpacity={0.5}\n                                fillColor={polygon.fillColor}\n                              />\n                            );\n                          })}\n                        </FeatureGroup>\n                      </Overlay>\n                    </LayersControl>\n                  </Map>\n                </Col>\n              </Row>\n            </Container>\n          </main>\n        </div>\n      </Styles>\n    );\n  }\n}\n\nexport default MapView;\n"]},"metadata":{},"sourceType":"module"}