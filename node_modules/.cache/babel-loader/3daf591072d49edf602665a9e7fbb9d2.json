{"ast":null,"code":"var _jsxFileName = \"/Users/jay/Documents/election-data-quality/front-end/src/components/MapView.js\";\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport { Map, TileLayer, FeatureGroup, Tooltip, Polygon } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Control from \"react-leaflet-control\";\nimport { slide as Menu } from \"react-burger-menu\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport styled from \"styled-components\";\nconst Styles = styled.div`\n  .btn-light {\n    border-color: black;\n    font-size: 12px;\n  }\n\n  .dropdown-item {\n    color: black;\n    font-size: 12px;\n  }\n\n  .form-check {\n    font-size: 12px;\n  }\n\n  .leaflet-container {\n    width: 100%;\n    height: 90vh;\n  }\n\n  // NOTE: helper classes below are from react-burger-menu library\n  /* Position and sizing of clickable cross button */\n  .bm-cross-button {\n    height: 24px;\n    width: 24px;\n  }\n\n  /* Color/shape of close button cross */\n  .bm-cross {\n    background: black;\n  }\n\n  /* Sidebar wrapper styles  */\n  .bm-menu-wrap {\n    position: fixed;\n    height: 100%;\n  }\n\n  /* General sidebar styles */\n  .bm-menu {\n    background: #cfd8dc;\n    padding: 2.5em 1.5em 0;\n    font-size: 1.15em;\n  }\n\n  /* Wrapper for item list */\n  .bm-item-list {\n    color: black;\n    padding: 0;\n  }\n\n  /* Individual item */\n  .bm-item {\n    display: inline-block;\n  }\n\n  /* Styling of overlay */\n  .bm-overlay {\n    background: rgba(0, 0, 0, 0.3);\n  }\n`;\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.polygons = [// DEBUG\n    {\n      precinctId: 1,\n      fillColor: \"#fff9c4\",\n      coordinates: [[[38.8, -84.5], [38.9, -84.5], [38.9, -84.4], [38.8, -84.4]], [[38.825, -84.475], [38.875, -84.475], [38.875, -84.425], [38.825, -84.425]]]\n    }, {\n      id: 2,\n      fillColor: \"#fff9c4\",\n      coordinates: [[[38.8, -84.4], [38.9, -84.4], [39.0, -84.3], [38.9, -84.2], [38.8, -84.2]]]\n    }];\n    this.state = {\n      latitude: 38.85,\n      longitude: -84.35,\n      zoom: 10,\n      sidebarOpen: false,\n      currPrecinct: {\n        precinctId: null,\n        countyId: null,\n        stateId: null,\n        canonicalName: null,\n        ghost: null,\n        multipleBorder: null,\n        adjacentPrecinctIds: [],\n        enclosingPrecinctIds: [],\n        demographicData: [{\n          population: null\n        }],\n        electionData: [{\n          election: \"2016 Presidential\",\n          demVotes: null,\n          repVotes: null\n        }, {\n          election: \"2016 Congressional\",\n          demVotes: null,\n          repVotes: null\n        }, {\n          election: \"2018 Congressional\",\n          demVotes: null,\n          repVotes: null\n        }],\n        logBag: [],\n        county: {\n          id: null,\n          canonicalName: null,\n          ethnicityData: [{\n            ethnicity: \"White\",\n            population: null\n          }, {\n            ethnicity: \"Black or African American\",\n            population: null\n          }, {\n            ethnicity: \"Asian or Asian American\",\n            population: null\n          }, {\n            ethnicity: \"American Indian\",\n            population: null\n          }, {\n            ethnicity: \"Pacific Islander\",\n            population: null\n          }, {\n            ethnicity: \"Others\",\n            population: null\n          }],\n          state: {\n            id: null,\n            canonicalName: null\n          }\n        },\n        coordinates: [] // TODO: Add more properties\n\n      }\n    };\n  }\n\n  handleMouseOver(e) {\n    e.target.openTooltip();\n  }\n\n  handleMouseOut(e) {\n    e.target.closeTooltip();\n  }\n\n  handleClick(e, id) {\n    // TODO: Change fill color of the selected state\n    const precinctsCopy = [...this.state.precincts];\n    const precinctsIndex = precinctsCopy.findIndex(el => el.precinctId === id);\n    precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n      fillColor: \"#102027\"\n    };\n    this.setState({\n      precincts: precinctsCopy\n    }); // this.setState(prevState => ({\n    //   precincts: {\n    //     ...prevState.precincts,\n    //     fillColor: \"#102027\"\n    //   }\n    // }));\n    // e.target.setStyle({ fillColor: \"#102027\" });\n    // Modify map state\n\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng\n    }); // TODO: Update zoom\n\n    const demographicDataCopy = [...this.state.currPrecinct.demographicData];\n    const electionDataCopy = [...this.state.currPrecinct.electionData];\n    const ethnicityDataCopy = [...this.state.currPrecinct.county.ethnicityData];\n    fetch(\"api/precinct/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      demographicDataCopy[0] = {\n        population: data.population\n      };\n      electionDataCopy[0] = { ...electionDataCopy[0],\n        demVotes: data.electionData.PRESIDENTIAL_16_DEM,\n        repVotes: data.electionData.PRESIDENTIAL_16_REP\n      };\n      electionDataCopy[1] = { ...electionDataCopy[1],\n        demVotes: data.electionData.CONGRESSIONAL_16_DEM,\n        repVotes: data.electionData.CONGRESSIONAL_16_REP\n      };\n      electionDataCopy[2] = { ...electionDataCopy[2],\n        demVotes: data.electionData.CONGRESSIONAL_18_DEM,\n        repVotes: data.electionData.CONGRESSIONAL_18_REP\n      };\n      ethnicityDataCopy[0] = { ...ethnicityDataCopy[0],\n        population: data.county.white\n      };\n      ethnicityDataCopy[1] = { ...ethnicityDataCopy[1],\n        population: data.county.africanAmer\n      };\n      ethnicityDataCopy[2] = { ...ethnicityDataCopy[2],\n        population: data.county.asian\n      };\n      ethnicityDataCopy[3] = { ...ethnicityDataCopy[3],\n        population: data.county.nativeAmer\n      };\n      ethnicityDataCopy[4] = { ...ethnicityDataCopy[4],\n        population: data.county.pasifika\n      };\n      ethnicityDataCopy[5] = { ...ethnicityDataCopy[5],\n        population: data.county.others\n      };\n      this.setState({\n        currPrecinct: { ...this.state.currPrecinct,\n          // TODO: Remove this line later\n          precinctId: data.precinctId,\n          countyId: data.countyId,\n          stateId: data.stateId,\n          canonicalName: data.canonicalName,\n          ghost: data.ghost,\n          multipleBorder: data.multipleBorder,\n          demographicData: demographicDataCopy,\n          electionData: electionDataCopy,\n          // TODO: add logBag\n          // logBag: [\n          //   ...this.state.currPrecinct.logBag,\n          //   {\n          //     id: null,\n          //     category: null,\n          //     comment: null\n          //   }\n          // ],\n          county: {\n            ethnicityData: ethnicityDataCopy\n          } // TODO: Add more properties\n\n        }\n      });\n    });\n    this.setState(() => ({\n      sidebarOpen: true\n    }));\n  }\n\n  handleStateChange(state) {\n    this.setState({\n      sidebarOpen: state.isOpen\n    });\n  }\n\n  handleStateSelect(id) {\n    // Selected Kentucky\n    if (id === 1) {\n      this.setState({\n        latitude: 37.84,\n        longitude: -84.27,\n        zoom: 8\n      });\n    } // Selected Louisiana\n    else if (id === 2) {\n        this.setState({\n          latitude: 30.98,\n          longitude: -91.96,\n          zoom: 8\n        });\n      } // Selected South Carolina\n      else if (id === 3) {\n          this.setState({\n            latitude: 33.84,\n            longitude: -81.16,\n            zoom: 8\n          });\n        }\n  }\n\n  handleTableChange(oldValue, newValue, row) {\n    // DEBUG: Remove these lines below later\n    console.log(oldValue);\n    console.log(newValue);\n    console.log(row); // TODO: Make a POST request to the server with \"api/precinct\"\n    // fetch(\"api/precinct\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\"\n    //   },\n    //   body: JSON.stringify()\n    // })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     console.log(\"Success:\", data);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error:\", error);\n    //   });\n  }\n\n  handlePolygonCreated(e) {\n    console.log(e);\n  }\n\n  handlePolygonEdited(e) {\n    e.layers.eachLayer(layer => {\n      console.log(layer.options.id);\n      console.log(layer.getLatLngs());\n      console.log(layer.toGeoJSON().geometry.coordinates);\n    });\n  }\n\n  componentDidMount() {// DEBUG\n    // fetch(\"api/precinct/all\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     data.map((currData) =>\n    //       this.setState({\n    //         precincts: [\n    //           ...this.state.precincts,\n    //           {\n    //             precinctId: currData.precinctId,\n    //             fillColor: \"#fff9c4\",\n    //             coordinates: JSON.parse(currData.coordinates)\n    //           }\n    //         ]\n    //       })\n    //     );\n    //   });\n    // fetch(\"api/precinct/21-117-B123\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     // data.map((currData) =>\n    //     //   this.setState({\n    //     //     precincts: [\n    //     //       ...this.state.precincts,\n    //     //       {\n    //     //         precinctId: currData.precinctId,\n    //     //         fillColor: \"#fff9c4\",\n    //     //         coordinates: JSON.parse(currData.coordinates)\n    //     //       }\n    //     //     ]\n    //     //   })\n    //     // );\n    //   });\n    // fetch(\"api/county/21-117\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     // data.map((currData) =>\n    //     //   this.setState({\n    //     //     precincts: [\n    //     //       ...this.state.precincts,\n    //     //       {\n    //     //         precinctId: currData.precinctId,\n    //     //         fillColor: \"#fff9c4\",\n    //     //         coordinates: JSON.parse(currData.coordinates)\n    //     //       }\n    //     //     ]\n    //     //   })\n    //     // );\n    //   });\n    // fetch(\"api/state/21\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     // data.map((currData) =>\n    //     //   this.setState({\n    //     //     precincts: [\n    //     //       ...this.state.precincts,\n    //     //       {\n    //     //         precinctId: currData.precinctId,\n    //     //         fillColor: \"#fff9c4\",\n    //     //         coordinates: JSON.parse(currData.coordinates)\n    //     //       }\n    //     //     ]\n    //     //   })\n    //     // );\n    //   });\n    // fetch(\"api/state/all\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     data.map((currData) =>\n    //       this.setState({\n    //         precincts: [\n    //           ...this.state.precincts,\n    //           {\n    //             precinctId: currData.precinctId,\n    //             fillColor: \"#fff9c4\",\n    //             coordinates: JSON.parse(currData.coordinates)\n    //           }\n    //         ]\n    //       })\n    //     );\n    //   });\n  }\n\n  render() {\n    const position = [this.state.latitude, this.state.longitude];\n    const electionTableColumns = [{\n      dataField: \"election\",\n      text: \"Election\"\n    }, {\n      dataField: \"demVotes\",\n      text: \"Democratic Votes\"\n    }, {\n      dataField: \"repVotes\",\n      text: \"Republican Votes\"\n    }];\n    const demographicTableColumns = [{\n      dataField: \"population\",\n      text: \"Population (Precinct Level)\"\n    }];\n    const ethnicityTableColumns = [{\n      dataField: \"ethnicity\",\n      text: \"Ethnicity\"\n    }, {\n      dataField: \"population\",\n      text: \"Population (County Level)\"\n    }];\n    const logTableColumns = [{\n      dataField: \"id\",\n      text: \"Log ID\"\n    }, {\n      dataField: \"category\",\n      text: \"Error Category\"\n    }, {\n      dataField: \"comment\",\n      text: \"User Comment\"\n    }];\n    const dataSourceTableColumns = [{\n      dataField: \"name\",\n      text: \"Source Name\"\n    }, {\n      dataField: \"category\",\n      text: \"Data Category\"\n    }, {\n      dataField: \"url\",\n      text: \"Source URL\"\n    }];\n    return React.createElement(Styles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      right: true,\n      width: \"60%\",\n      menuClassName: \"menu-right\",\n      customBurgerIcon: false,\n      isOpen: this.state.sidebarOpen,\n      onStateChange: state => this.handleStateChange(state),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      className: \"px-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, \"21-117-B121\"))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }, \"Election Data\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"election\",\n      data: this.state.currPrecinct.electionData,\n      columns: electionTableColumns,\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true,\n        afterSaveCell: this.handleTableChange\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, \"Demographic Data\"))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"population\",\n      data: [],\n      columns: demographicTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"ethnicity\",\n      data: this.state.currPrecinct.county.ethnicityData,\n      columns: ethnicityTableColumns,\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"Corrections Log\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"id\",\n      data: [],\n      columns: logTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, \"Data Sources\"))), React.createElement(Row, {\n      className: \"pb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"name\",\n      data: [],\n      columns: dataSourceTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      fluid: true,\n      className: \"px-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, React.createElement(Map, {\n      center: position,\n      zoom: this.state.zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      url: \"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://stadiamaps.com/\\\">Stadia Maps</a>,  \\xA9 <a href=\\\"https://openmaptiles.org/\\\">OpenMapTiles</a>  \\xA9 <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap</a> contributors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }), React.createElement(Control, {\n      position: \"bottomleft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, React.createElement(ButtonGroup, {\n      vertical: true,\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, React.createElement(DropdownButton, {\n      as: ButtonGroup,\n      id: \"bg-vertical-dropdown-1\",\n      drop: \"right\",\n      variant: \"light\",\n      title: \"Select State\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      eventKey: \"1\",\n      onClick: () => this.handleStateSelect(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, \"Kentucky\"), React.createElement(Dropdown.Item, {\n      eventKey: \"2\",\n      onClick: () => this.handleStateSelect(2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, \"Louisiana\"), React.createElement(Dropdown.Item, {\n      eventKey: \"3\",\n      onClick: () => this.handleStateSelect(3),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"South Carolina\")), React.createElement(DropdownButton, {\n      as: ButtonGroup,\n      id: \"bg-vertical-dropdown-2\",\n      drop: \"right\",\n      variant: \"light\",\n      title: \"Select Election\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      eventKey: \"1\"\n      /* onClick={} */\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }, \"2016 Presidential\"), React.createElement(Dropdown.Item, {\n      eventKey: \"2\"\n      /* onClick={} */\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, \"2016 Congressional\"), React.createElement(Dropdown.Item, {\n      eventKey: \"3\"\n      /* onClick={} */\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, \"2018 Congressional\")), React.createElement(Button, {\n      variant: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }, \"Add Neighbor\"), React.createElement(Button, {\n      variant: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682\n      },\n      __self: this\n    }, \"Delete Neighbor\"), React.createElement(Button, {\n      variant: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \"Merge Precincts\")), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      type: \"switch\",\n      id: \"1\",\n      label: \"View National Park Boundaries\",\n      bsCustomPrefix: \"form-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    })), React.createElement(Form.Check, {\n      className: \"pb-1\",\n      type: \"switch\",\n      id: \"2\",\n      label: \"View Congressional District Boundaries\",\n      bsCustomPrefix: \"form-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    })))), React.createElement(FeatureGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, React.createElement(EditControl, {\n      position: \"topleft\" // TODO: Update new coordinates in the state object\n      ,\n      onEdited: this.handlePolygonEdited // TODO: Push new precinct object to the precincts array\n      ,\n      onCreated: this.handlePolygonCreated // TODO: Delete precinct object from the precincts array\n      // TODO: Do not open side bar when clicking a precinct to delete\n      // onDeleted={this._onDeleted}\n      ,\n      draw: {\n        polyline: false,\n        circle: false,\n        marker: false,\n        circlemarker: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }), this.coordinates.map(precinct => {\n      return React.createElement(Polygon, {\n        id: precinct.precinctId,\n        positions: precinct.coordinates,\n        smoothFactor: 5,\n        color: \"#102027\",\n        weight: 1,\n        fillOpacity: 0.5,\n        fillColor: precinct.fillColor,\n        onClick: e => this.handleClick(e, precinct.precinctId),\n        onMouseOver: this.handleMouseOver,\n        onMouseOut: this.handleMouseOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 724\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739\n        },\n        __self: this\n      }, precinct.precinctId)));\n    })))))));\n  }\n\n}\n\nexport default MapView;","map":{"version":3,"sources":["/Users/jay/Documents/election-data-quality/front-end/src/components/MapView.js"],"names":["React","Container","Row","Col","ButtonGroup","Button","Dropdown","DropdownButton","Form","Card","Map","TileLayer","FeatureGroup","Tooltip","Polygon","EditControl","Control","slide","Menu","BootstrapTable","cellEditFactory","styled","Styles","div","MapView","Component","constructor","props","polygons","precinctId","fillColor","coordinates","id","state","latitude","longitude","zoom","sidebarOpen","currPrecinct","countyId","stateId","canonicalName","ghost","multipleBorder","adjacentPrecinctIds","enclosingPrecinctIds","demographicData","population","electionData","election","demVotes","repVotes","logBag","county","ethnicityData","ethnicity","handleMouseOver","e","target","openTooltip","handleMouseOut","closeTooltip","handleClick","precinctsCopy","precincts","precinctsIndex","findIndex","el","setState","latlng","lat","lng","demographicDataCopy","electionDataCopy","ethnicityDataCopy","fetch","then","res","json","data","console","log","PRESIDENTIAL_16_DEM","PRESIDENTIAL_16_REP","CONGRESSIONAL_16_DEM","CONGRESSIONAL_16_REP","CONGRESSIONAL_18_DEM","CONGRESSIONAL_18_REP","white","africanAmer","asian","nativeAmer","pasifika","others","handleStateChange","isOpen","handleStateSelect","handleTableChange","oldValue","newValue","row","handlePolygonCreated","handlePolygonEdited","layers","eachLayer","layer","options","getLatLngs","toGeoJSON","geometry","componentDidMount","render","position","electionTableColumns","dataField","text","demographicTableColumns","ethnicityTableColumns","logTableColumns","dataSourceTableColumns","mode","blurToSave","afterSaveCell","polyline","circle","marker","circlemarker","map","precinct"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport { Map, TileLayer, FeatureGroup, Tooltip, Polygon } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Control from \"react-leaflet-control\";\nimport { slide as Menu } from \"react-burger-menu\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport styled from \"styled-components\";\n\nconst Styles = styled.div`\n  .btn-light {\n    border-color: black;\n    font-size: 12px;\n  }\n\n  .dropdown-item {\n    color: black;\n    font-size: 12px;\n  }\n\n  .form-check {\n    font-size: 12px;\n  }\n\n  .leaflet-container {\n    width: 100%;\n    height: 90vh;\n  }\n\n  // NOTE: helper classes below are from react-burger-menu library\n  /* Position and sizing of clickable cross button */\n  .bm-cross-button {\n    height: 24px;\n    width: 24px;\n  }\n\n  /* Color/shape of close button cross */\n  .bm-cross {\n    background: black;\n  }\n\n  /* Sidebar wrapper styles  */\n  .bm-menu-wrap {\n    position: fixed;\n    height: 100%;\n  }\n\n  /* General sidebar styles */\n  .bm-menu {\n    background: #cfd8dc;\n    padding: 2.5em 1.5em 0;\n    font-size: 1.15em;\n  }\n\n  /* Wrapper for item list */\n  .bm-item-list {\n    color: black;\n    padding: 0;\n  }\n\n  /* Individual item */\n  .bm-item {\n    display: inline-block;\n  }\n\n  /* Styling of overlay */\n  .bm-overlay {\n    background: rgba(0, 0, 0, 0.3);\n  }\n`;\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: 38.85,\n      longitude: -84.35,\n      zoom: 10,\n      sidebarOpen: false,\n      currPrecinct: {\n        precinctId: null,\n        countyId: null,\n        stateId: null,\n        canonicalName: null,\n        ghost: null,\n        multipleBorder: null,\n        adjacentPrecinctIds: [],\n        enclosingPrecinctIds: [],\n        demographicData: [{ population: null }],\n        electionData: [\n          {\n            election: \"2016 Presidential\",\n            demVotes: null,\n            repVotes: null\n          },\n          {\n            election: \"2016 Congressional\",\n            demVotes: null,\n            repVotes: null\n          },\n          {\n            election: \"2018 Congressional\",\n            demVotes: null,\n            repVotes: null\n          }\n        ],\n        logBag: [],\n        county: {\n          id: null,\n          canonicalName: null,\n          ethnicityData: [\n            {\n              ethnicity: \"White\",\n              population: null\n            },\n            {\n              ethnicity: \"Black or African American\",\n              population: null\n            },\n            {\n              ethnicity: \"Asian or Asian American\",\n              population: null\n            },\n            {\n              ethnicity: \"American Indian\",\n              population: null\n            },\n            {\n              ethnicity: \"Pacific Islander\",\n              population: null\n            },\n            {\n              ethnicity: \"Others\",\n              population: null\n            }\n          ],\n          state: {\n            id: null,\n            canonicalName: null\n          }\n        },\n        coordinates: []\n        // TODO: Add more properties\n      },\n    };\n  }\n\n  polygons = [\n    // DEBUG\n    {\n          precinctId: 1,\n          fillColor: \"#fff9c4\",\n          coordinates: [\n            [\n              [38.8, -84.5],\n              [38.9, -84.5],\n              [38.9, -84.4],\n              [38.8, -84.4]\n            ],\n            [\n              [38.825, -84.475],\n              [38.875, -84.475],\n              [38.875, -84.425],\n              [38.825, -84.425]\n            ]\n          ]\n        },\n        {\n      id: 2,\n      fillColor: \"#fff9c4\",\n      coordinates: [\n        [\n          [38.8, -84.4],\n          [38.9, -84.4],\n          [39.0, -84.3],\n          [38.9, -84.2],\n          [38.8, -84.2]\n        ]\n      ]\n    }\n  ];\n\n  handleMouseOver(e) {\n    e.target.openTooltip();\n  }\n\n  handleMouseOut(e) {\n    e.target.closeTooltip();\n  }\n\n  handleClick(e, id) {\n    // TODO: Change fill color of the selected state\n    const precinctsCopy = [...this.state.precincts];\n    const precinctsIndex = precinctsCopy.findIndex(\n      (el) => el.precinctId === id\n    );\n    precinctsCopy[precinctsIndex] = {\n      ...precinctsCopy[precinctsIndex],\n      fillColor: \"#102027\"\n    };\n    this.setState({ precincts: precinctsCopy });\n    // this.setState(prevState => ({\n    //   precincts: {\n    //     ...prevState.precincts,\n    //     fillColor: \"#102027\"\n    //   }\n    // }));\n    // e.target.setStyle({ fillColor: \"#102027\" });\n\n    // Modify map state\n    this.setState({ latitude: e.latlng.lat, longitude: e.latlng.lng }); // TODO: Update zoom\n\n    const demographicDataCopy = [...this.state.currPrecinct.demographicData];\n    const electionDataCopy = [...this.state.currPrecinct.electionData];\n    const ethnicityDataCopy = [...this.state.currPrecinct.county.ethnicityData];\n    fetch(\"api/precinct/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        demographicDataCopy[0] = { population: data.population };\n        electionDataCopy[0] = {\n          ...electionDataCopy[0],\n          demVotes: data.electionData.PRESIDENTIAL_16_DEM,\n          repVotes: data.electionData.PRESIDENTIAL_16_REP\n        };\n        electionDataCopy[1] = {\n          ...electionDataCopy[1],\n          demVotes: data.electionData.CONGRESSIONAL_16_DEM,\n          repVotes: data.electionData.CONGRESSIONAL_16_REP\n        };\n        electionDataCopy[2] = {\n          ...electionDataCopy[2],\n          demVotes: data.electionData.CONGRESSIONAL_18_DEM,\n          repVotes: data.electionData.CONGRESSIONAL_18_REP\n        };\n        ethnicityDataCopy[0] = {\n          ...ethnicityDataCopy[0],\n          population: data.county.white\n        };\n        ethnicityDataCopy[1] = {\n          ...ethnicityDataCopy[1],\n          population: data.county.africanAmer\n        };\n        ethnicityDataCopy[2] = {\n          ...ethnicityDataCopy[2],\n          population: data.county.asian\n        };\n        ethnicityDataCopy[3] = {\n          ...ethnicityDataCopy[3],\n          population: data.county.nativeAmer\n        };\n        ethnicityDataCopy[4] = {\n          ...ethnicityDataCopy[4],\n          population: data.county.pasifika\n        };\n        ethnicityDataCopy[5] = {\n          ...ethnicityDataCopy[5],\n          population: data.county.others\n        };\n        this.setState({\n          currPrecinct: {\n            ...this.state.currPrecinct, // TODO: Remove this line later\n            precinctId: data.precinctId,\n            countyId: data.countyId,\n            stateId: data.stateId,\n            canonicalName: data.canonicalName,\n            ghost: data.ghost,\n            multipleBorder: data.multipleBorder,\n            demographicData: demographicDataCopy,\n            electionData: electionDataCopy,\n            // TODO: add logBag\n            // logBag: [\n            //   ...this.state.currPrecinct.logBag,\n            //   {\n            //     id: null,\n            //     category: null,\n            //     comment: null\n            //   }\n            // ],\n            county: {\n              ethnicityData: ethnicityDataCopy\n            }\n            // TODO: Add more properties\n          }\n        });\n      });\n    this.setState(() => ({ sidebarOpen: true }));\n  }\n\n  handleStateChange(state) {\n    this.setState({ sidebarOpen: state.isOpen });\n  }\n\n  handleStateSelect(id) {\n    // Selected Kentucky\n    if (id === 1) {\n      this.setState({ latitude: 37.84, longitude: -84.27, zoom: 8 });\n    }\n    // Selected Louisiana\n    else if (id === 2) {\n      this.setState({ latitude: 30.98, longitude: -91.96, zoom: 8 });\n    }\n    // Selected South Carolina\n    else if (id === 3) {\n      this.setState({ latitude: 33.84, longitude: -81.16, zoom: 8 });\n    }\n  }\n\n  handleTableChange(oldValue, newValue, row) {\n    // DEBUG: Remove these lines below later\n    console.log(oldValue);\n    console.log(newValue);\n    console.log(row);\n\n    // TODO: Make a POST request to the server with \"api/precinct\"\n    // fetch(\"api/precinct\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\"\n    //   },\n    //   body: JSON.stringify()\n    // })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     console.log(\"Success:\", data);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error:\", error);\n    //   });\n  }\n\n  handlePolygonCreated(e) {\n    console.log(e);\n  }\n\n  handlePolygonEdited(e) {\n    e.layers.eachLayer((layer) => {\n      console.log(layer.options.id);\n      console.log(layer.getLatLngs());\n      console.log(layer.toGeoJSON().geometry.coordinates);\n    });\n  }\n\n  componentDidMount() {\n    // DEBUG\n    // fetch(\"api/precinct/all\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     data.map((currData) =>\n    //       this.setState({\n    //         precincts: [\n    //           ...this.state.precincts,\n    //           {\n    //             precinctId: currData.precinctId,\n    //             fillColor: \"#fff9c4\",\n    //             coordinates: JSON.parse(currData.coordinates)\n    //           }\n    //         ]\n    //       })\n    //     );\n    //   });\n    // fetch(\"api/precinct/21-117-B123\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     // data.map((currData) =>\n    //     //   this.setState({\n    //     //     precincts: [\n    //     //       ...this.state.precincts,\n    //     //       {\n    //     //         precinctId: currData.precinctId,\n    //     //         fillColor: \"#fff9c4\",\n    //     //         coordinates: JSON.parse(currData.coordinates)\n    //     //       }\n    //     //     ]\n    //     //   })\n    //     // );\n    //   });\n    // fetch(\"api/county/21-117\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     // data.map((currData) =>\n    //     //   this.setState({\n    //     //     precincts: [\n    //     //       ...this.state.precincts,\n    //     //       {\n    //     //         precinctId: currData.precinctId,\n    //     //         fillColor: \"#fff9c4\",\n    //     //         coordinates: JSON.parse(currData.coordinates)\n    //     //       }\n    //     //     ]\n    //     //   })\n    //     // );\n    //   });\n    // fetch(\"api/state/21\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     // data.map((currData) =>\n    //     //   this.setState({\n    //     //     precincts: [\n    //     //       ...this.state.precincts,\n    //     //       {\n    //     //         precinctId: currData.precinctId,\n    //     //         fillColor: \"#fff9c4\",\n    //     //         coordinates: JSON.parse(currData.coordinates)\n    //     //       }\n    //     //     ]\n    //     //   })\n    //     // );\n    //   });\n    // fetch(\"api/state/all\")\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(data); // DEBUG: Remove this line later\n    //     data.map((currData) =>\n    //       this.setState({\n    //         precincts: [\n    //           ...this.state.precincts,\n    //           {\n    //             precinctId: currData.precinctId,\n    //             fillColor: \"#fff9c4\",\n    //             coordinates: JSON.parse(currData.coordinates)\n    //           }\n    //         ]\n    //       })\n    //     );\n    //   });\n  }\n\n  render() {\n    const position = [this.state.latitude, this.state.longitude];\n    const electionTableColumns = [\n      {\n        dataField: \"election\",\n        text: \"Election\"\n      },\n      {\n        dataField: \"demVotes\",\n        text: \"Democratic Votes\"\n      },\n      {\n        dataField: \"repVotes\",\n        text: \"Republican Votes\"\n      }\n    ];\n    const demographicTableColumns = [\n      {\n        dataField: \"population\",\n        text: \"Population (Precinct Level)\"\n      }\n    ];\n    const ethnicityTableColumns = [\n      {\n        dataField: \"ethnicity\",\n        text: \"Ethnicity\"\n      },\n      {\n        dataField: \"population\",\n        text: \"Population (County Level)\"\n      }\n    ];\n    const logTableColumns = [\n      {\n        dataField: \"id\",\n        text: \"Log ID\"\n      },\n      {\n        dataField: \"category\",\n        text: \"Error Category\"\n      },\n      {\n        dataField: \"comment\",\n        text: \"User Comment\"\n      }\n    ];\n    const dataSourceTableColumns = [\n      {\n        dataField: \"name\",\n        text: \"Source Name\"\n      },\n      {\n        dataField: \"category\",\n        text: \"Data Category\"\n      },\n      {\n        dataField: \"url\",\n        text: \"Source URL\"\n      }\n    ];\n    return (\n      <Styles>\n        <Menu\n          right\n          width={\"60%\"}\n          menuClassName={\"menu-right\"}\n          customBurgerIcon={false}\n          isOpen={this.state.sidebarOpen}\n          onStateChange={(state) => this.handleStateChange(state)}\n        >\n          <Container fluid className=\"px-0\">\n            <Row className=\"pb-2\">\n              <Col>\n                <h2>21-117-B121</h2>\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <h4>Election Data</h4>\n              </Col>\n            </Row>\n            <Row className=\"pb-2\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"election\"\n                  data={this.state.currPrecinct.electionData}\n                  columns={electionTableColumns}\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true,\n                    afterSaveCell: this.handleTableChange\n                  })}\n                />\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <h4>Demographic Data</h4>\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"population\"\n                  data={[]}\n                  columns={demographicTableColumns}\n                  noDataIndication=\"Data Not Available for Now\"\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true\n                  })}\n                />\n              </Col>\n            </Row>\n            <Row className=\"pb-2\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"ethnicity\"\n                  data={this.state.currPrecinct.county.ethnicityData}\n                  columns={ethnicityTableColumns}\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true\n                  })}\n                />\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <h4>Corrections Log</h4>\n              </Col>\n            </Row>\n            <Row className=\"pb-2\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"id\"\n                  data={[]}\n                  columns={logTableColumns}\n                  noDataIndication=\"Data Not Available for Now\"\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true\n                  })}\n                />\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <h4>Data Sources</h4>\n              </Col>\n            </Row>\n            <Row className=\"pb-5\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"name\"\n                  data={[]}\n                  columns={dataSourceTableColumns}\n                  noDataIndication=\"Data Not Available for Now\"\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true\n                  })}\n                />\n              </Col>\n            </Row>\n          </Container>\n        </Menu>\n        <Container fluid className=\"px-0\">\n          <Row>\n            <Col>\n              <Map center={position} zoom={this.state.zoom}>\n                <TileLayer\n                  url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\"\n                  attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, \n                    &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> \n                    &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n                />\n                <Control position=\"bottomleft\">\n                  <ButtonGroup vertical className=\"pb-2\">\n                    <DropdownButton\n                      as={ButtonGroup}\n                      id=\"bg-vertical-dropdown-1\"\n                      drop=\"right\"\n                      variant=\"light\"\n                      title=\"Select State\"\n                    >\n                      <Dropdown.Item\n                        eventKey=\"1\"\n                        onClick={() => this.handleStateSelect(1)}\n                      >\n                        Kentucky\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        eventKey=\"2\"\n                        onClick={() => this.handleStateSelect(2)}\n                      >\n                        Louisiana\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        eventKey=\"3\"\n                        onClick={() => this.handleStateSelect(3)}\n                      >\n                        South Carolina\n                      </Dropdown.Item>\n                    </DropdownButton>\n                    <DropdownButton\n                      as={ButtonGroup}\n                      id=\"bg-vertical-dropdown-2\"\n                      drop=\"right\"\n                      variant=\"light\"\n                      title=\"Select Election\"\n                    >\n                      <Dropdown.Item eventKey=\"1\" /* onClick={} */>\n                        2016 Presidential\n                      </Dropdown.Item>\n                      <Dropdown.Item eventKey=\"2\" /* onClick={} */>\n                        2016 Congressional\n                      </Dropdown.Item>\n                      <Dropdown.Item eventKey=\"3\" /* onClick={} */>\n                        2018 Congressional\n                      </Dropdown.Item>\n                    </DropdownButton>\n                    <Button variant=\"light\">Add Neighbor</Button>\n                    <Button variant=\"light\">Delete Neighbor</Button>\n                    <Button variant=\"light\">Merge Precincts</Button>\n                  </ButtonGroup>\n                  <Card>\n                    <Card.Body>\n                      <Form>\n                        <Form.Check\n                          type=\"switch\"\n                          id=\"1\"\n                          label=\"View National Park Boundaries\"\n                          bsCustomPrefix=\"form-check\"\n                        />\n                      </Form>\n                      <Form.Check\n                        className=\"pb-1\"\n                        type=\"switch\"\n                        id=\"2\"\n                        label=\"View Congressional District Boundaries\"\n                        bsCustomPrefix=\"form-check\"\n                      />\n                    </Card.Body>\n                  </Card>\n                </Control>\n                <FeatureGroup>\n                  <EditControl\n                    position=\"topleft\"\n                    // TODO: Update new coordinates in the state object\n                    onEdited={this.handlePolygonEdited}\n                    // TODO: Push new precinct object to the precincts array\n                    onCreated={this.handlePolygonCreated}\n                    // TODO: Delete precinct object from the precincts array\n                    // TODO: Do not open side bar when clicking a precinct to delete\n                    // onDeleted={this._onDeleted}\n                    draw={{\n                      polyline: false,\n                      circle: false,\n                      marker: false,\n                      circlemarker: false\n                    }}\n                  />\n                  {this.coordinates.map((precinct) => {\n                    return (\n                      <Polygon\n                        id={precinct.precinctId}\n                        positions={precinct.coordinates}\n                        smoothFactor={5}\n                        color={\"#102027\"}\n                        weight={1}\n                        fillOpacity={0.5}\n                        fillColor={precinct.fillColor}\n                        onClick={(e) =>\n                          this.handleClick(e, precinct.precinctId)\n                        }\n                        onMouseOver={this.handleMouseOver}\n                        onMouseOut={this.handleMouseOut}\n                      >\n                        <Tooltip>\n                          <b>{precinct.precinctId}</b>\n                        </Tooltip>\n                      </Polygon>\n                    );\n                  })}\n                </FeatureGroup>\n              </Map>\n            </Col>\n          </Row>\n        </Container>\n      </Styles>\n    );\n  }\n}\n\nexport default MapView;\n"]},"metadata":{},"sourceType":"module"}