{"ast":null,"code":"var _jsxFileName = \"/Users/jay/Documents/election-data-quality/front-end/src/components/MapView.js\";\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Map, ZoomControl, LayersControl, LayerGroup, TileLayer, FeatureGroup, Tooltip, Polygon } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Control from \"react-leaflet-control\";\nimport { polygon, multiPolygon, union } from \"@turf/turf\";\nimport { CubeGrid } from \"styled-spinkit\";\nimport NumberFormat from \"react-number-format\";\nimport { push as Menu } from \"react-burger-menu\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport styled from \"styled-components\";\nconst {\n  Overlay\n} = LayersControl;\nconst Styles = styled.div`\n  /* Style of bootstrap buttons */\n  .btn-light {\n    background-color: white;\n    border-color: black;\n    font-size: 1em;\n  }\n\n  /* Style of bootstrap dropdowns */\n  .dropdown-item {\n    color: black;\n    font-size: 1em;\n  }\n\n  /* Sizing of leaflet map */\n  .leaflet-container {\n    width: 100%;\n    height: 91.35vh;\n  }\n\n  /* Position and sizing of clickable cross button */\n  .bm-cross-button {\n    height: 32px; !important\n    width: 32px; !important\n  }\n\n  /* Color/shape of close button cross */\n  .bm-cross {\n    background: #37474f;\n  }\n\n  /* Sidebar wrapper styles */\n  .bm-menu-wrap {\n    position: fixed;\n    height: 100%;\n  }\n\n  /* General sidebar styles */\n  .bm-menu {\n    background: #eceff1;\n    padding: 0 1.5em;\n    font-size: 1em;\n  }\n\n  /* Wrapper for item list */\n  .bm-item-list {\n    padding: 0;\n  }\n\n  /* Individual item */\n  .bm-item {\n    display: inline-block;\n    outline: none;\n  }\n`;\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: 34,\n      longitude: -85,\n      zoom: 6,\n      displayMode: 1,\n      editMode: 1,\n      isLoading: false,\n      sidebarOpen: false,\n      currPrecinct: {\n        id: null,\n        selected: false,\n        precinctsIndex: null,\n        canonicalName: null,\n        ghost: null,\n        multipleBorder: null,\n        demoModified: null,\n        adjPrecIds: [],\n        enclPrecIds: [],\n        interPrecIds: [],\n        electionData: [{\n          election: \"2016 Presidential\",\n          demVotes: null,\n          repVotes: null\n        }, {\n          election: \"2016 Congressional\",\n          demVotes: null,\n          repVotes: null\n        }, {\n          election: \"2018 Congressional\",\n          demVotes: null,\n          repVotes: null\n        }],\n        ethnicityData: [{\n          ethnicity: \"White\",\n          population: null\n        }, {\n          ethnicity: \"Black or African American\",\n          population: null\n        }, {\n          ethnicity: \"Asian or Asian American\",\n          population: null\n        }, {\n          ethnicity: \"Native American\",\n          population: null\n        }, {\n          ethnicity: \"Pacific Islander\",\n          population: null\n        }, {\n          ethnicity: \"Others\",\n          population: null\n        }, {\n          ethnicity: \"Total\",\n          population: null\n        }],\n        logBag: [],\n        coordinates: [] // TODO: Add more properties\n\n      },\n      states: [],\n      counties: [],\n      precincts: [],\n      // NOTE: The two features below are not supported yet\n      nationalParks: [],\n      congDistricts: [],\n      // NOTE: The feature below is for testing boundary correction\n      testPolygons: [{\n        id: 1,\n        fillColor: \"#fff9c4\",\n        coordinates: [[[37, -85], [37.25, -84.75], [38, -85], [38, -84], [37, -84]]]\n      }, {\n        id: 2,\n        fillColor: \"#fff9c4\",\n        coordinates: [[[37, -84], [38, -84], [38.5, -83.5], [38, -83], [37, -83]]]\n      }]\n    };\n  }\n\n  handleStateChange(state) {\n    this.setState({\n      sidebarOpen: state.isOpen\n    }); // TODO: Delete this if not needed\n    // if (state.isOpen === false) {\n    //   this.setState({\n    //     sidebarOpen: state.isOpen,\n    //     currPrecinct: { ...this.state.currPrecinct, selected: false }\n    //   });\n    // } else {\n    //   this.setState({ sidebarOpen: state.isOpen });\n    // }\n  }\n\n  handleMouseOver(e) {\n    e.target.openTooltip();\n  }\n\n  handleMouseOut(e) {\n    e.target.closeTooltip();\n  }\n\n  handleZoomEnd(e) {\n    if (e.target._zoom < 7 && this.state.displayMode === 2) {\n      this.setState({\n        zoom: e.target._zoom,\n        displayMode: 1,\n        counties: []\n      });\n    } else if (e.target._zoom < 10 && this.state.displayMode === 3) {\n      this.setState({\n        zoom: e.target._zoom,\n        displayMode: 2,\n        precincts: []\n      });\n    } else {\n      this.setState({\n        zoom: e.target._zoom\n      });\n    }\n  }\n\n  handleViewNeighbors() {\n    if (this.state.editMode === 2) {\n      this.setState({\n        editMode: 1\n      });\n    } else {\n      this.setState({\n        editMode: 2\n      });\n    }\n  }\n\n  handleAddNeighbor() {\n    if (this.state.editMode === 3) {\n      this.setState({\n        editMode: 1\n      });\n    } else {\n      this.setState({\n        editMode: 3\n      });\n    }\n  }\n\n  handleDeleteNeighbor() {\n    if (this.state.editMode === 4) {\n      this.setState({\n        editMode: 1\n      });\n    } else {\n      this.setState({\n        editMode: 4\n      });\n    }\n  }\n\n  handleMergePrecincts() {\n    if (this.state.editMode === 5) {\n      this.setState({\n        editMode: 1\n      });\n    } else {\n      this.setState({\n        editMode: 5\n      });\n    }\n  }\n\n  handlePrecinctClick(e, id) {\n    // Display precinct data mode\n    if (this.state.editMode === 1) {\n      // Modify map view and change the fill color of a selected state\n      const precinctsCopy = [...this.state.precincts];\n\n      if (this.state.currPrecinct.precinctsIndex !== null) {\n        precinctsCopy[this.state.currPrecinct.precinctsIndex] = { ...precinctsCopy[this.state.currPrecinct.precinctsIndex],\n          fillColor: \"#fff9c4\"\n        };\n      }\n\n      const newPrecinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n      precinctsCopy[newPrecinctsIndex] = { ...precinctsCopy[newPrecinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      this.setState({\n        latitude: e.latlng.lat,\n        longitude: e.latlng.lng - 0.1,\n        zoom: 12,\n        isLoading: true,\n        sidebarOpen: false,\n        currPrecinct: { ...this.state.currPrecinct,\n          precinctsIndex: newPrecinctsIndex\n        },\n        precincts: precinctsCopy\n      }); // Fetch a detailed data about a selected precinct\n\n      const electionDataCopy = [...this.state.currPrecinct.electionData];\n      const ethnicityDataCopy = [...this.state.currPrecinct.ethnicityData];\n      fetch(\"api/precinct/\" + id).then(res => res.json()).then(data => {\n        console.log(data); // DEBUG: Remove this line later\n\n        electionDataCopy[0] = { ...electionDataCopy[0],\n          demVotes: data.electionData.PRESIDENTIAL_16_DEM,\n          repVotes: data.electionData.PRESIDENTIAL_16_REP\n        };\n        electionDataCopy[1] = { ...electionDataCopy[1],\n          demVotes: data.electionData.CONGRESSIONAL_16_DEM,\n          repVotes: data.electionData.CONGRESSIONAL_16_REP\n        };\n        electionDataCopy[2] = { ...electionDataCopy[2],\n          demVotes: data.electionData.CONGRESSIONAL_18_DEM,\n          repVotes: data.electionData.CONGRESSIONAL_18_REP\n        };\n        ethnicityDataCopy[0] = { ...ethnicityDataCopy[0],\n          population: data.white\n        };\n        ethnicityDataCopy[1] = { ...ethnicityDataCopy[1],\n          population: data.africanAmer\n        };\n        ethnicityDataCopy[2] = { ...ethnicityDataCopy[2],\n          population: data.asian\n        };\n        ethnicityDataCopy[3] = { ...ethnicityDataCopy[3],\n          population: data.nativeAmer\n        };\n        ethnicityDataCopy[4] = { ...ethnicityDataCopy[4],\n          population: data.pasifika\n        };\n        ethnicityDataCopy[5] = { ...ethnicityDataCopy[5],\n          population: data.others\n        };\n        ethnicityDataCopy[6] = { ...ethnicityDataCopy[6],\n          population: data.white + data.africanAmer + data.asian + data.nativeAmer + data.pasifika + data.others\n        };\n        this.setState({\n          isLoading: false,\n          sidebarOpen: true,\n          currPrecinct: { ...this.state.currPrecinct,\n            id: data.id,\n            canonicalName: data.canonicalName,\n            ghost: data.ghost,\n            multipleBorder: data.multipleBorder,\n            demoModified: data.demoModified,\n            adjPrecIds: data.adjPrecIds,\n            enclPrecIds: data.enclPrecIds,\n            interPrecIds: data.interPrecIds,\n            electionData: electionDataCopy,\n            ethnicityData: ethnicityDataCopy,\n            // TODO: add logBag\n            logBag: data.logBag // TODO: Add more properties\n\n          }\n        });\n      });\n    } // View neighbors mode\n    else if (this.state.editMode === 2) {\n        // Fetch a data of a selected precinct and then highlight its neighbors\n        const precinctsCopy = [...this.state.precincts];\n        precinctsCopy.forEach(precinct => {\n          precinct.fillColor = \"#fff9c4\";\n        });\n        const precinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n        precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n          fillColor: \"#c8b900\"\n        };\n        this.setState({\n          isLoading: true\n        });\n        fetch(\"api/precinct/\" + id).then(res => res.json()).then(data => {\n          console.log(data); // DEBUG: Remove this line later\n\n          data.adjPrecIds.forEach(adjPrecId => {\n            precinctsCopy.forEach(precinct => {\n              if (precinct.id === adjPrecId) {\n                precinct.fillColor = \"#ffeb3b\";\n              }\n            });\n          });\n          this.setState({\n            editMode: 1,\n            isLoading: false,\n            precincts: precinctsCopy\n          });\n        });\n      } // Add neighbor mode\n      else if (this.state.editMode === 3) {\n          // Highlight a selected precinct\n          const precinctsCopy = [...this.state.precincts];\n          const precinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n          precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n            fillColor: \"#c8b900\"\n          };\n\n          if (this.state.currPrecinct.selected === false) {\n            this.setState({\n              currPrecinct: { ...this.state.currPrecinct,\n                id: id,\n                selected: true\n              },\n              precincts: precinctsCopy\n            });\n          } else {\n            this.setState({\n              editMode: 1,\n              isLoading: true,\n              currPrecinct: { ...this.state.currPrecinct,\n                // adjPrecIds: [...this.state.currPrecinct.adjPrecIds, id],\n                selected: false\n              },\n              precincts: precinctsCopy\n            });\n            Promise.all([fetch(\"api/precinct/\" + this.state.currPrecinct.id), fetch(\"api/precinct/\" + id)]).then(async ([res1, res2]) => {\n              const currPrecinctData = await res1.json();\n              const nextPrecinctData = await res2.json();\n              return [currPrecinctData, nextPrecinctData];\n            }).then(data => {\n              console.log(data); // DEBUG: Remove this line later\n              // const newData = {};\n              // Object.assign(newData, data[0], {\n              //   adjPrecIds: newPolygon.geometry.coordinates\n              // });\n              // data[0].adjPrecId =\n              // data[0] = newData;\n              // console.log(data);\n\n              console.log(data[0].id);\n              console.log(data[1].id); // console.log([...data[0].adjPrecIds, data[1].id]);\n              // console.log([...data[1].adjPrecIds, data[0].id]);\n\n              data[0].adjPrecIds.push(data[1].id);\n              data[1].adjPrecIds.push(data[0].id);\n              console.log(data[0].adjPrecIds);\n              console.log(data[1].adjPrecIds); // Make a PUT request to the server with \"api/precinct\"\n\n              fetch(\"api/precinct\", {\n                method: \"PUT\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  \"id\": data[0].id,\n                  \"countyId\": \"21-195\",\n                  \"stateId\": \"21\",\n                  \"ghost\": data[0].ghost,\n                  \"multipleBorder\": data[0].multipleBorder,\n                  \"electionData\": {\n                    \"CONGRESSIONAL_16_DEM\": data[0].CONGRESSIONAL_16_DEM,\n                    \"PRESIDENTIAL_16_REP\": data[0].PRESIDENTIAL_16_REP,\n                    \"CONGRESSIONAL_18_DEM\": data[0].CONGRESSIONAL_18_DEM,\n                    \"CONGRESSIONAL_16_REP\": data[0].CONGRESSIONAL_16_REP,\n                    \"CONGRESSIONAL_18_REP\": data[0].CONGRESSIONAL_18_REP,\n                    \"PRESIDENTIAL_16_DEM\": data[0].PRESIDENTIAL_16_DEM\n                  },\n                  \"adjPrecIds\": [...data[0].adjPrecIds, data[1].id],\n                  \"enclPrecIds\": data[0].enclPrecIds,\n                  \"interPrecIds\": data[0].interPrecIds,\n                  \"logBag\": data[0].logBag,\n                  \"canonicalName\": data[0].canonicalName,\n                  \"demoModified\": data[0].demoModified,\n                  \"white\": data[0].white,\n                  \"africanAmer\": data[0].africanAmer,\n                  \"asian\": data[0].asian,\n                  \"nativeAmer\": data[0].nativeAmer,\n                  \"others\": data[0].others,\n                  \"pasifika\": data[0].pasifika\n                })\n              }).then(res => res.json()).then(data => {\n                console.log(\"Success:\", data);\n              }).catch(error => {\n                console.error(\"Error:\", error);\n              }); // Make a PUT request to the server with \"api/precinct\"\n\n              fetch(\"api/precinct\", {\n                method: \"PUT\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  \"id\": data[1].id,\n                  \"countyId\": \"21-195\",\n                  \"stateId\": \"21\",\n                  \"ghost\": data[1].ghost,\n                  \"multipleBorder\": data[1].multipleBorder,\n                  \"electionData\": {\n                    \"CONGRESSIONAL_16_DEM\": data[1].CONGRESSIONAL_16_DEM,\n                    \"PRESIDENTIAL_16_REP\": data[1].PRESIDENTIAL_16_REP,\n                    \"CONGRESSIONAL_18_DEM\": data[1].CONGRESSIONAL_18_DEM,\n                    \"CONGRESSIONAL_16_REP\": data[1].CONGRESSIONAL_16_REP,\n                    \"CONGRESSIONAL_18_REP\": data[1].CONGRESSIONAL_18_REP,\n                    \"PRESIDENTIAL_16_DEM\": data[1].PRESIDENTIAL_16_DEM\n                  },\n                  \"adjPrecIds\": [...data[1].adjPrecIds, data[0].id],\n                  \"enclPrecIds\": data[1].enclPrecIds,\n                  \"interPrecIds\": data[1].interPrecIds,\n                  \"logBag\": data[1].logBag,\n                  \"canonicalName\": data[1].canonicalName,\n                  \"demoModified\": data[1].demoModified,\n                  \"white\": data[1].white,\n                  \"africanAmer\": data[1].africanAmer,\n                  \"asian\": data[1].asian,\n                  \"nativeAmer\": data[1].nativeAmer,\n                  \"others\": data[1].others,\n                  \"pasifika\": data[1].pasifika\n                })\n              }).then(res => res.json()).then(data => {\n                console.log(\"Success:\", data);\n              }).catch(error => {\n                console.error(\"Error:\", error);\n              });\n            }).then(() => {\n              this.setState({\n                displayMode: 3,\n                isLoading: false\n              });\n            }).catch(error => {\n              console.log(error);\n            });\n          }\n        } // Delete neighbor mode\n        else if (this.state.editMode === 4) {\n            // Highlight a selected precinct\n            const precinctsCopy = [...this.state.precincts];\n            const precinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n            precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n              fillColor: \"#c8b900\"\n            };\n\n            if (this.state.currPrecinct.selected === false) {\n              this.setState({\n                currPrecinct: { ...this.state.currPrecinct,\n                  id: id,\n                  selected: true\n                },\n                precincts: precinctsCopy\n              });\n            } else {\n              this.setState({\n                editMode: 1,\n                currPrecinct: { ...this.state.currPrecinct,\n                  selected: false\n                },\n                precincts: precinctsCopy\n              });\n            }\n          } // Merge precincts mode\n          else if (this.state.editMode === 5) {\n              // Highlight a selected precinct\n              const precinctsCopy = [...this.state.precincts];\n              const precinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n              precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n                fillColor: \"#c8b900\"\n              };\n\n              if (this.state.currPrecinct.selected === false) {\n                this.setState({\n                  currPrecinct: { ...this.state.currPrecinct,\n                    id: id,\n                    precinctsIndex: precinctsIndex,\n                    selected: true,\n                    coordinates: precinctsCopy[precinctsIndex].coordinates\n                  },\n                  precincts: precinctsCopy\n                });\n              } else {\n                // Merge polygons and get its new coordinates\n                let currPolygon;\n                let nextPolygon;\n\n                if (this.state.currPrecinct.coordinates[0][0][0][0] === undefined) {\n                  currPolygon = polygon(this.state.currPrecinct.coordinates);\n                } else {\n                  currPolygon = multiPolygon(this.state.currPrecinct.coordinates);\n                }\n\n                if (precinctsCopy[precinctsIndex].coordinates[0][0][0][0] === undefined) {\n                  nextPolygon = polygon(precinctsCopy[precinctsIndex].coordinates);\n                } else {\n                  nextPolygon = multiPolygon(precinctsCopy[precinctsIndex].coordinates);\n                }\n\n                const newPolygon = union(currPolygon, nextPolygon); // Remove old polygons from the precincts array\n                // DEBUG\n                // const nextPrecinctId = precinctsCopy[precinctsIndex].id;\n\n                let precinctsIndexs;\n\n                if (this.state.currPrecinct.precinctsIndex > precinctsIndex) {\n                  precinctsIndexs = [precinctsIndex, this.state.currPrecinct.precinctsIndex];\n                } else {\n                  precinctsIndexs = [this.state.currPrecinct.precinctsIndex, precinctsIndex];\n                }\n\n                while (precinctsIndexs.length) {\n                  precinctsCopy.splice(precinctsIndexs.pop(), 1);\n                }\n\n                this.setState({\n                  editMode: 1,\n                  currPrecinct: { ...this.state.currPrecinct,\n                    selected: false\n                  },\n                  precincts: [...precinctsCopy, {\n                    id: this.state.currPrecinct.id,\n                    fillColor: \"#c8b900\",\n                    coordinates: newPolygon.geometry.coordinates\n                  }]\n                });\n                this.setState({\n                  isLoading: true\n                });\n                fetch(\"api/precinct/\" + this.state.currPrecinct.id).then(res => res.json()).then(data => {\n                  console.log(data); // DEBUG: Remove this line later\n                  // TODO: Make a DELETE request to the server with \"api/precinct/merge\"\n\n                  fetch(\"api/precinct/merge\", {\n                    method: \"DELETE\",\n                    headers: {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                      \"id\": data.id,\n                      \"countyId\": \"21-083\",\n                      \"stateId\": \"21\",\n                      \"ghost\": data.ghost,\n                      \"multipleBorder\": data.multipleBorder,\n                      \"electionData\": {\n                        \"CONGRESSIONAL_16_DEM\": data.CONGRESSIONAL_16_DEM,\n                        \"PRESIDENTIAL_16_REP\": data.PRESIDENTIAL_16_REP,\n                        \"CONGRESSIONAL_18_DEM\": data.CONGRESSIONAL_18_DEM,\n                        \"CONGRESSIONAL_16_REP\": data.CONGRESSIONAL_16_REP,\n                        \"CONGRESSIONAL_18_REP\": data.CONGRESSIONAL_18_REP,\n                        \"PRESIDENTIAL_16_DEM\": data.PRESIDENTIAL_16_DEM\n                      },\n                      \"adjPrecIds\": data.adjPrecIds,\n                      \"enclPrecIds\": data.enclPrecIds,\n                      \"interPrecIds\": data.interPrecIds,\n                      \"logBag\": data.logBag,\n                      \"canonicalName\": data.canonicalName,\n                      \"demoModified\": data.demoModified,\n                      \"white\": data.white,\n                      \"africanAmer\": data.africanAmer,\n                      \"asian\": data.asian,\n                      \"nativeAmer\": data.nativeAmer,\n                      \"others\": data.others,\n                      \"pasifika\": data.pasifika,\n                      \"mergeHolder\": id,\n                      \"coordinates\": JSON.stringify(newPolygon.geometry.coordinates)\n                    })\n                  }).then(res => res.json()).then(data => {\n                    console.log(\"Success:\", data);\n                  }).catch(error => {\n                    console.error(\"Error:\", error);\n                  });\n                  this.setState({\n                    editMode: 1,\n                    isLoading: false\n                  });\n                });\n              }\n            }\n  }\n\n  handleCountyClick(e, id) {\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng,\n      zoom: 10,\n      isLoading: true\n    });\n    fetch(\"api/county/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.precincts.forEach(currData => {\n        this.setState({\n          precincts: [...this.state.precincts, {\n            id: currData.id,\n            fillColor: currData.hasError ? \"#ff8a50\" : \"#fff9c4\",\n            coordinates: JSON.parse(currData.coordinates)\n          }]\n        });\n      });\n      this.setState({\n        displayMode: 3,\n        isLoading: false\n      });\n    });\n  }\n\n  handleStateClick(e, id) {\n    // Get counties of a selected state\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng,\n      zoom: 7,\n      isLoading: true\n    });\n    fetch(\"api/state/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.counties.forEach(currData => {\n        this.setState({\n          counties: [...this.state.counties, {\n            id: currData.id,\n            fillColor: currData.hasError ? \"#ff8a50\" : \"#fff9c4\",\n            coordinates: JSON.parse(currData.coordinates)\n          }]\n        });\n      });\n      this.setState({\n        displayMode: 2,\n        isLoading: false\n      });\n    });\n  }\n\n  handleStateSelect(id) {\n    // Selected Kentucky\n    if (id === 21) {\n      this.setState({\n        latitude: 37.84,\n        longitude: -84.27,\n        zoom: 7\n      });\n    } // Selected Louisiana\n    else if (id === 22) {\n        this.setState({\n          latitude: 30.98,\n          longitude: -91.96,\n          zoom: 7\n        });\n      } // Selected South Carolina\n      else if (id === 45) {\n          this.setState({\n            latitude: 33.84,\n            longitude: -81.16,\n            zoom: 7\n          });\n        } // Get counties of a selected state\n\n\n    this.setState({\n      isLoading: true\n    });\n    fetch(\"api/state/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.counties.forEach(currData => {\n        this.setState({\n          counties: [...this.state.counties, {\n            id: currData.id,\n            fillColor: \"#fff9c4\",\n            coordinates: JSON.parse(currData.coordinates)\n          }]\n        });\n      });\n      this.setState({\n        displayMode: 2,\n        isLoading: false\n      });\n    });\n  }\n\n  handleTableChange() {\n    // Get county and state ids\n    const countyStateIds = this.state.currPrecinct.id.split(\"-\", 2); // DEBUG\n\n    console.log(countyStateIds[0]);\n    console.log(countyStateIds[0] + \"-\" + countyStateIds[1]); // Make a PUT request to the server with \"api/precinct\"\n\n    fetch(\"api/precinct\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"id\": this.state.currPrecinct.id,\n        \"countyId\": countyStateIds[0] + \"-\" + countyStateIds[1],\n        \"stateId\": countyStateIds[0],\n        \"ghost\": this.state.currPrecinct.ghost,\n        \"multipleBorder\": this.state.currPrecinct.multipleBorder,\n        \"electionData\": {\n          \"CONGRESSIONAL_16_DEM\": this.state.currPrecinct.electionData[1].demVotes,\n          \"PRESIDENTIAL_16_REP\": this.state.currPrecinct.electionData[0].repVotes,\n          \"CONGRESSIONAL_18_DEM\": this.state.currPrecinct.electionData[2].demVotes,\n          \"CONGRESSIONAL_16_REP\": this.state.currPrecinct.electionData[1].repVotes,\n          \"CONGRESSIONAL_18_REP\": this.state.currPrecinct.electionData[2].repVotes,\n          \"PRESIDENTIAL_16_DEM\": this.state.currPrecinct.electionData[0].demVotes\n        },\n        \"adjPrecIds\": this.state.currPrecinct.adjPrecIds,\n        \"enclPrecIds\": this.state.currPrecinct.enclPrecIds,\n        \"interPrecIds\": this.state.currPrecinct.interPrecIds,\n        \"logBag\": this.state.currPrecinct.logBag,\n        \"canonicalName\": this.state.currPrecinct.canonicalName,\n        \"demoModified\": this.state.currPrecinct.demoModified,\n        \"white\": this.state.currPrecinct.ethnicityData[0].population,\n        \"africanAmer\": this.state.currPrecinct.ethnicityData[1].population,\n        \"asian\": this.state.currPrecinct.ethnicityData[2].population,\n        \"nativeAmer\": this.state.currPrecinct.ethnicityData[3].population,\n        \"others\": this.state.currPrecinct.ethnicityData[5].population,\n        \"pasifika\": this.state.currPrecinct.ethnicityData[4].population\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(\"Success:\", data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }\n\n  handlePolygonCreated(e) {\n    // TODO: Push new precinct object to the precincts array\n    // TODO: Make a POST request to the server to add new precinct\n    console.log(e);\n  }\n\n  handlePolygonEdited(e) {\n    // TODO: Update new coordinates in the state object\n    // TODO: Make a POST request to the server to update precinct coordinates\n    e.layers.eachLayer(layer => {\n      console.log(layer.options.id);\n      console.log(layer.getLatLngs());\n      console.log(layer.toGeoJSON().geometry.coordinates);\n    });\n  }\n\n  handlePolygonDeleted(e) {// TODO: Delete precinct object from the precincts array\n    // TODO: Do not open side bar when clicking a precinct to delete\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    fetch(\"api/state/all\").then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.forEach(currData => {\n        this.setState({\n          states: [...this.state.states, {\n            id: currData.id,\n            fillColor: \"#fff9c4\",\n            coordinates: JSON.parse(currData.coordinates)\n          }]\n        });\n      });\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  formatNumber(data) {\n    return React.createElement(NumberFormat, {\n      value: data,\n      displayType: \"text\",\n      thousandSeparator: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887\n      },\n      __self: this\n    });\n  }\n\n  validateNumber(data) {\n    if (isNaN(data)) {\n      return {\n        valid: false,\n        message: \"Input should be numeric\"\n      };\n    } else if (data < 0) {\n      return {\n        valid: false,\n        message: \"Input cannot be less than zero\"\n      };\n    } else if (data > 0 && data !== data.replace(/^0+/, \"\")) {\n      return {\n        valid: false,\n        message: \"Input cannot have a leading zero\"\n      };\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const position = [this.state.latitude, this.state.longitude];\n    const electionTableColumns = [{\n      dataField: \"election\",\n      text: \"Election\"\n    }, {\n      dataField: \"demVotes\",\n      text: \"Democratic Votes\",\n      formatter: this.formatNumber,\n      validator: this.validateNumber\n    }, {\n      dataField: \"repVotes\",\n      text: \"Republican Votes\",\n      formatter: this.formatNumber,\n      validator: this.validateNumber\n    }];\n    const ethnicityTableColumns = [{\n      dataField: \"ethnicity\",\n      text: \"Ethnicity\"\n    }, {\n      dataField: \"population\",\n      text: \"Population\",\n      formatter: this.formatNumber,\n      validator: this.validateNumber\n    }];\n    const logTableColumns = [{\n      dataField: \"id\",\n      text: \"Log ID\"\n    }, {\n      dataField: \"category\",\n      text: \"Error Category\"\n    }, {\n      dataField: \"comment\",\n      text: \"User Comment\"\n    }];\n    const dataSourceTableColumns = [{\n      dataField: \"name\",\n      text: \"Source Name\"\n    }, {\n      dataField: \"category\",\n      text: \"Data Category\"\n    }, {\n      dataField: \"url\",\n      text: \"Source URL\"\n    }];\n    return React.createElement(Styles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"outer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      size: \"sm\",\n      show: this.state.isLoading,\n      onHide: () => {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 979\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982\n      },\n      __self: this\n    }, React.createElement(CubeGrid, {\n      size: 24,\n      color: \"#37474f\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983\n      },\n      __self: this\n    })), React.createElement(Col, {\n      className: \"pt-4\",\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 985\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 986\n      },\n      __self: this\n    }, \"Loading Data...\"))))), React.createElement(Menu, {\n      right: true,\n      noOverlay: true,\n      disableOverlayClick: true,\n      pageWrapId: \"page-wrap\",\n      outerContainerId: \"outer-container\",\n      menuClassName: \"menu-right\",\n      width: \"35%\",\n      customBurgerIcon: false,\n      isOpen: this.state.sidebarOpen,\n      onStateChange: state => this.handleStateChange(state),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      className: \"px-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"pt-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1004\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006\n      },\n      __self: this\n    }, this.state.currPrecinct.id))), React.createElement(Row, {\n      className: \"py-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1011\n      },\n      __self: this\n    }, \"Election Data\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"election\",\n      data: this.state.currPrecinct.electionData,\n      columns: electionTableColumns,\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true,\n        afterSaveCell: () => this.handleTableChange()\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033\n      },\n      __self: this\n    }, \"County Demographic Data\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1037\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"ethnicity\",\n      data: this.state.currPrecinct.ethnicityData,\n      columns: ethnicityTableColumns,\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true,\n        afterSaveCell: () => this.handleTableChange()\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1038\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055\n      },\n      __self: this\n    }, \"Corrections Log\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"id\",\n      data: [],\n      columns: logTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1077\n      },\n      __self: this\n    }, \"Data Sources\"))), React.createElement(Row, {\n      className: \"pb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"name\",\n      data: [],\n      columns: dataSourceTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082\n      },\n      __self: this\n    }))))), React.createElement(\"main\", {\n      id: \"page-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      className: \"px-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1102\n      },\n      __self: this\n    }, React.createElement(Map, {\n      center: position,\n      zoomControl: false,\n      zoom: this.state.zoom,\n      onZoomEnd: e => this.handleZoomEnd(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103\n      },\n      __self: this\n    }, React.createElement(ZoomControl, {\n      position: \"bottomleft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1109\n      },\n      __self: this\n    }), React.createElement(LayersControl, {\n      position: \"bottomleft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      url: \"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://stadiamaps.com/\\\">Stadia Maps</a>,  \\xA9 <a href=\\\"https://openmaptiles.org/\\\">OpenMapTiles</a>  \\xA9 <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap</a> contributors\",\n      preferCanvas: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1111\n      },\n      __self: this\n    }), React.createElement(Control, {\n      position: \"topleft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118\n      },\n      __self: this\n    }, React.createElement(ButtonGroup, {\n      vertical: true,\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119\n      },\n      __self: this\n    }, React.createElement(DropdownButton, {\n      as: ButtonGroup,\n      id: \"select-state-dropdown\",\n      drop: \"right\",\n      variant: \"light\",\n      size: \"sm\",\n      title: \"Select State\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      onSelect: () => this.handleStateSelect(21),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128\n      },\n      __self: this\n    }, \"Kentucky\"), React.createElement(Dropdown.Item, {\n      onSelect: () => this.handleStateSelect(22),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133\n      },\n      __self: this\n    }, \"Louisiana\"), React.createElement(Dropdown.Item, {\n      onSelect: () => this.handleStateSelect(45),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138\n      },\n      __self: this\n    }, \"South Carolina\")), React.createElement(Button, {\n      variant: \"light\",\n      size: \"sm\",\n      active: this.state.editMode === 2 ? true : false,\n      onClick: () => this.handleViewNeighbors(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144\n      },\n      __self: this\n    }, \"View Neighbors\"), React.createElement(Button, {\n      variant: \"light\",\n      size: \"sm\",\n      active: this.state.editMode === 3 ? true : false,\n      onClick: () => this.handleAddNeighbor(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152\n      },\n      __self: this\n    }, \"Add Neighbor\"), React.createElement(Button, {\n      variant: \"light\",\n      size: \"sm\",\n      active: this.state.editMode === 4 ? true : false,\n      onClick: () => this.handleDeleteNeighbor(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1160\n      },\n      __self: this\n    }, \"Delete Neighbor\"), React.createElement(Button, {\n      variant: \"light\",\n      size: \"sm\",\n      active: this.state.editMode === 5 ? true : false,\n      onClick: () => this.handleMergePrecincts(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168\n      },\n      __self: this\n    }, \"Merge Precincts\"))), React.createElement(Overlay, {\n      name: \"State Boundaries\",\n      checked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1178\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179\n      },\n      __self: this\n    }, this.state.states.map(state => {\n      if (this.state.displayMode === 1) {\n        return React.createElement(Polygon, {\n          id: state.id,\n          key: state.id,\n          positions: state.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: state.fillColor,\n          onClick: e => this.handleStateClick(e, state.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1183\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1198\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1199\n          },\n          __self: this\n        }, state.id)));\n      } else if (this.state.zoom < 7) {\n        return React.createElement(Polygon, {\n          id: state.id,\n          key: state.id,\n          positions: state.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: state.fillColor,\n          onClick: e => this.handleStateClick(e, state.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1205\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1220\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1221\n          },\n          __self: this\n        }, state.id)));\n      } else {\n        return null;\n      }\n    }))), React.createElement(Overlay, {\n      name: \"County Boundaries\",\n      checked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1231\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1232\n      },\n      __self: this\n    }, this.state.counties.map(county => {\n      if (this.state.displayMode === 2) {\n        return React.createElement(Polygon, {\n          id: county.id,\n          key: county.id,\n          positions: county.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: county.fillColor,\n          onClick: e => this.handleCountyClick(e, county.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1236\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1251\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1252\n          },\n          __self: this\n        }, county.id)));\n      } else if (this.state.zoom < 9) {\n        return React.createElement(Polygon, {\n          id: county.id,\n          key: county.id,\n          positions: county.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: county.fillColor,\n          onClick: e => this.handleCountyClick(e, county.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1258\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1273\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1274\n          },\n          __self: this\n        }, county.id)));\n      } else {\n        return null;\n      }\n    }))), React.createElement(Overlay, {\n      name: \"Precinct Boundaries\",\n      checked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1284\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285\n      },\n      __self: this\n    }, this.state.precincts.map(precinct => {\n      if (this.state.displayMode === 3) {\n        return React.createElement(Polygon, {\n          id: precinct.id,\n          key: precinct.id,\n          positions: precinct.coordinates,\n          smoothFactor: 1,\n          color: \"#102027\",\n          weight: 1,\n          fillOpacity: 0.5,\n          fillColor: precinct.fillColor,\n          onClick: e => this.handlePrecinctClick(e, precinct.id),\n          onMouseOver: this.handleMouseOver,\n          onMouseOut: this.handleMouseOut,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1289\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1304\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1305\n          },\n          __self: this\n        }, precinct.id)));\n      } else {\n        return null;\n      }\n    }))), React.createElement(Overlay, {\n      name: \"National Park Boundaries\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1315\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1316\n      },\n      __self: this\n    }, this.state.nationalParks.map(park => {\n      return React.createElement(Polygon, {\n        id: park.id,\n        key: park.id,\n        positions: park.coordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1319\n        },\n        __self: this\n      });\n    }))), React.createElement(Overlay, {\n      name: \"Congressional District Boundaries\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1328\n      },\n      __self: this\n    }, React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329\n      },\n      __self: this\n    }, this.state.congDistricts.map(district => {\n      return React.createElement(Polygon, {\n        id: district.id,\n        key: district.id,\n        positions: district.coordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1332\n        },\n        __self: this\n      });\n    }))), React.createElement(Overlay, {\n      name: \"Sample Polygons\",\n      checked: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1341\n      },\n      __self: this\n    }, React.createElement(FeatureGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1342\n      },\n      __self: this\n    }, React.createElement(EditControl, {\n      position: \"bottomleft\",\n      onCreated: this.handlePolygonCreated,\n      onEdited: this.handlePolygonEdited,\n      onDeleted: this.handlePolygonDeleted,\n      draw: {\n        polyline: false,\n        circle: false,\n        marker: false,\n        circlemarker: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1343\n      },\n      __self: this\n    }), this.state.testPolygons.map(polygon => {\n      return React.createElement(Polygon, {\n        id: polygon.id,\n        key: polygon.id,\n        positions: polygon.coordinates,\n        smoothFactor: 1,\n        color: \"#102027\",\n        weight: 1,\n        fillOpacity: 0.5,\n        fillColor: polygon.fillColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1357\n        },\n        __self: this\n      });\n    })))))))))));\n  }\n\n}\n\nexport default MapView;","map":{"version":3,"sources":["/Users/jay/Documents/election-data-quality/front-end/src/components/MapView.js"],"names":["React","Container","Row","Col","ButtonGroup","Button","Dropdown","DropdownButton","Modal","Map","ZoomControl","LayersControl","LayerGroup","TileLayer","FeatureGroup","Tooltip","Polygon","EditControl","Control","polygon","multiPolygon","union","CubeGrid","NumberFormat","push","Menu","BootstrapTable","cellEditFactory","styled","Overlay","Styles","div","MapView","Component","constructor","props","state","latitude","longitude","zoom","displayMode","editMode","isLoading","sidebarOpen","currPrecinct","id","selected","precinctsIndex","canonicalName","ghost","multipleBorder","demoModified","adjPrecIds","enclPrecIds","interPrecIds","electionData","election","demVotes","repVotes","ethnicityData","ethnicity","population","logBag","coordinates","states","counties","precincts","nationalParks","congDistricts","testPolygons","fillColor","handleStateChange","setState","isOpen","handleMouseOver","e","target","openTooltip","handleMouseOut","closeTooltip","handleZoomEnd","_zoom","handleViewNeighbors","handleAddNeighbor","handleDeleteNeighbor","handleMergePrecincts","handlePrecinctClick","precinctsCopy","newPrecinctsIndex","findIndex","el","latlng","lat","lng","electionDataCopy","ethnicityDataCopy","fetch","then","res","json","data","console","log","PRESIDENTIAL_16_DEM","PRESIDENTIAL_16_REP","CONGRESSIONAL_16_DEM","CONGRESSIONAL_16_REP","CONGRESSIONAL_18_DEM","CONGRESSIONAL_18_REP","white","africanAmer","asian","nativeAmer","pasifika","others","forEach","precinct","adjPrecId","Promise","all","res1","res2","currPrecinctData","nextPrecinctData","method","headers","body","JSON","stringify","catch","error","currPolygon","nextPolygon","undefined","newPolygon","precinctsIndexs","length","splice","pop","geometry","handleCountyClick","currData","hasError","parse","handleStateClick","handleStateSelect","handleTableChange","countyStateIds","split","handlePolygonCreated","handlePolygonEdited","layers","eachLayer","layer","options","getLatLngs","toGeoJSON","handlePolygonDeleted","componentDidMount","formatNumber","validateNumber","isNaN","valid","message","replace","render","position","electionTableColumns","dataField","text","formatter","validator","ethnicityTableColumns","logTableColumns","dataSourceTableColumns","mode","blurToSave","afterSaveCell","map","county","park","district","polyline","circle","marker","circlemarker"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Modal from \"react-bootstrap/Modal\";\nimport {\n  Map,\n  ZoomControl,\n  LayersControl,\n  LayerGroup,\n  TileLayer,\n  FeatureGroup,\n  Tooltip,\n  Polygon\n} from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Control from \"react-leaflet-control\";\nimport { polygon, multiPolygon, union } from \"@turf/turf\";\nimport { CubeGrid } from \"styled-spinkit\";\nimport NumberFormat from \"react-number-format\";\nimport { push as Menu } from \"react-burger-menu\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport styled from \"styled-components\";\n\nconst { Overlay } = LayersControl;\n\nconst Styles = styled.div`\n  /* Style of bootstrap buttons */\n  .btn-light {\n    background-color: white;\n    border-color: black;\n    font-size: 1em;\n  }\n\n  /* Style of bootstrap dropdowns */\n  .dropdown-item {\n    color: black;\n    font-size: 1em;\n  }\n\n  /* Sizing of leaflet map */\n  .leaflet-container {\n    width: 100%;\n    height: 91.35vh;\n  }\n\n  /* Position and sizing of clickable cross button */\n  .bm-cross-button {\n    height: 32px; !important\n    width: 32px; !important\n  }\n\n  /* Color/shape of close button cross */\n  .bm-cross {\n    background: #37474f;\n  }\n\n  /* Sidebar wrapper styles */\n  .bm-menu-wrap {\n    position: fixed;\n    height: 100%;\n  }\n\n  /* General sidebar styles */\n  .bm-menu {\n    background: #eceff1;\n    padding: 0 1.5em;\n    font-size: 1em;\n  }\n\n  /* Wrapper for item list */\n  .bm-item-list {\n    padding: 0;\n  }\n\n  /* Individual item */\n  .bm-item {\n    display: inline-block;\n    outline: none;\n  }\n`;\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: 34,\n      longitude: -85,\n      zoom: 6,\n      displayMode: 1,\n      editMode: 1,\n      isLoading: false,\n      sidebarOpen: false,\n      currPrecinct: {\n        id: null,\n        selected: false,\n        precinctsIndex: null,\n        canonicalName: null,\n        ghost: null,\n        multipleBorder: null,\n        demoModified: null,\n        adjPrecIds: [],\n        enclPrecIds: [],\n        interPrecIds: [],\n        electionData: [\n          {\n            election: \"2016 Presidential\",\n            demVotes: null,\n            repVotes: null\n          },\n          {\n            election: \"2016 Congressional\",\n            demVotes: null,\n            repVotes: null\n          },\n          {\n            election: \"2018 Congressional\",\n            demVotes: null,\n            repVotes: null\n          }\n        ],\n        ethnicityData: [\n          {\n            ethnicity: \"White\",\n            population: null\n          },\n          {\n            ethnicity: \"Black or African American\",\n            population: null\n          },\n          {\n            ethnicity: \"Asian or Asian American\",\n            population: null\n          },\n          {\n            ethnicity: \"Native American\",\n            population: null\n          },\n          {\n            ethnicity: \"Pacific Islander\",\n            population: null\n          },\n          {\n            ethnicity: \"Others\",\n            population: null\n          },\n          {\n            ethnicity: \"Total\",\n            population: null\n          }\n        ],\n        logBag: [],\n        coordinates: []\n        // TODO: Add more properties\n      },\n      states: [],\n      counties: [],\n      precincts: [],\n      // NOTE: The two features below are not supported yet\n      nationalParks: [],\n      congDistricts: [],\n      // NOTE: The feature below is for testing boundary correction\n      testPolygons: [\n        {\n          id: 1,\n          fillColor: \"#fff9c4\",\n          coordinates: [\n            [\n              [37, -85],\n              [37.25, -84.75],\n              [38, -85],\n              [38, -84],\n              [37, -84]\n            ]\n          ]\n        },\n        {\n          id: 2,\n          fillColor: \"#fff9c4\",\n          coordinates: [\n            [\n              [37, -84],\n              [38, -84],\n              [38.5, -83.5],\n              [38, -83],\n              [37, -83]\n            ]\n          ]\n        }\n      ]\n    };\n  }\n\n  handleStateChange(state) {\n    this.setState({ sidebarOpen: state.isOpen });\n\n    // TODO: Delete this if not needed\n    // if (state.isOpen === false) {\n    //   this.setState({\n    //     sidebarOpen: state.isOpen,\n    //     currPrecinct: { ...this.state.currPrecinct, selected: false }\n    //   });\n    // } else {\n    //   this.setState({ sidebarOpen: state.isOpen });\n    // }\n  }\n\n  handleMouseOver(e) {\n    e.target.openTooltip();\n  }\n\n  handleMouseOut(e) {\n    e.target.closeTooltip();\n  }\n\n  handleZoomEnd(e) {\n    if (e.target._zoom < 7 && this.state.displayMode === 2) {\n      this.setState({ zoom: e.target._zoom, displayMode: 1, counties: [] });\n    } else if (e.target._zoom < 10 && this.state.displayMode === 3) {\n      this.setState({ zoom: e.target._zoom, displayMode: 2, precincts: [] });\n    } else {\n      this.setState({ zoom: e.target._zoom });\n    }\n  }\n\n  handleViewNeighbors() {\n    if (this.state.editMode === 2) {\n      this.setState({ editMode: 1 });\n    } else {\n      this.setState({ editMode: 2 });\n    }\n  }\n\n  handleAddNeighbor() {\n    if (this.state.editMode === 3) {\n      this.setState({ editMode: 1 });\n    } else {\n      this.setState({ editMode: 3 });\n    }\n  }\n\n  handleDeleteNeighbor() {\n    if (this.state.editMode === 4) {\n      this.setState({ editMode: 1 });\n    } else {\n      this.setState({ editMode: 4 });\n    }\n  }\n\n  handleMergePrecincts() {\n    if (this.state.editMode === 5) {\n      this.setState({ editMode: 1 });\n    } else {\n      this.setState({ editMode: 5 });\n    }\n  }\n\n  handlePrecinctClick(e, id) {\n    // Display precinct data mode\n    if (this.state.editMode === 1) {\n      // Modify map view and change the fill color of a selected state\n      const precinctsCopy = [...this.state.precincts];\n      if (this.state.currPrecinct.precinctsIndex !== null) {\n        precinctsCopy[this.state.currPrecinct.precinctsIndex] = {\n          ...precinctsCopy[this.state.currPrecinct.precinctsIndex],\n          fillColor: \"#fff9c4\"\n        };\n      }\n      const newPrecinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[newPrecinctsIndex] = {\n        ...precinctsCopy[newPrecinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      this.setState({\n        latitude: e.latlng.lat,\n        longitude: e.latlng.lng - 0.1,\n        zoom: 12,\n        isLoading: true,\n        sidebarOpen: false,\n        currPrecinct: {\n          ...this.state.currPrecinct,\n          precinctsIndex: newPrecinctsIndex\n        },\n        precincts: precinctsCopy\n      });\n\n      // Fetch a detailed data about a selected precinct\n      const electionDataCopy = [...this.state.currPrecinct.electionData];\n      const ethnicityDataCopy = [...this.state.currPrecinct.ethnicityData];\n      fetch(\"api/precinct/\" + id)\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(data); // DEBUG: Remove this line later\n          electionDataCopy[0] = {\n            ...electionDataCopy[0],\n            demVotes: data.electionData.PRESIDENTIAL_16_DEM,\n            repVotes: data.electionData.PRESIDENTIAL_16_REP\n          };\n          electionDataCopy[1] = {\n            ...electionDataCopy[1],\n            demVotes: data.electionData.CONGRESSIONAL_16_DEM,\n            repVotes: data.electionData.CONGRESSIONAL_16_REP\n          };\n          electionDataCopy[2] = {\n            ...electionDataCopy[2],\n            demVotes: data.electionData.CONGRESSIONAL_18_DEM,\n            repVotes: data.electionData.CONGRESSIONAL_18_REP\n          };\n          ethnicityDataCopy[0] = {\n            ...ethnicityDataCopy[0],\n            population: data.white\n          };\n          ethnicityDataCopy[1] = {\n            ...ethnicityDataCopy[1],\n            population: data.africanAmer\n          };\n          ethnicityDataCopy[2] = {\n            ...ethnicityDataCopy[2],\n            population: data.asian\n          };\n          ethnicityDataCopy[3] = {\n            ...ethnicityDataCopy[3],\n            population: data.nativeAmer\n          };\n          ethnicityDataCopy[4] = {\n            ...ethnicityDataCopy[4],\n            population: data.pasifika\n          };\n          ethnicityDataCopy[5] = {\n            ...ethnicityDataCopy[5],\n            population: data.others\n          };\n          ethnicityDataCopy[6] = {\n            ...ethnicityDataCopy[6],\n            population:\n              data.white +\n              data.africanAmer +\n              data.asian +\n              data.nativeAmer +\n              data.pasifika +\n              data.others\n          };\n          this.setState({\n            isLoading: false,\n            sidebarOpen: true,\n            currPrecinct: {\n              ...this.state.currPrecinct,\n              id: data.id,\n              canonicalName: data.canonicalName,\n              ghost: data.ghost,\n              multipleBorder: data.multipleBorder,\n              demoModified: data.demoModified,\n              adjPrecIds: data.adjPrecIds,\n              enclPrecIds: data.enclPrecIds,\n              interPrecIds: data.interPrecIds,\n              electionData: electionDataCopy,\n              ethnicityData: ethnicityDataCopy,\n              // TODO: add logBag\n              logBag: data.logBag\n              // TODO: Add more properties\n            }\n          });\n        });\n    }\n    // View neighbors mode\n    else if (this.state.editMode === 2) {\n      // Fetch a data of a selected precinct and then highlight its neighbors\n      const precinctsCopy = [...this.state.precincts];\n      precinctsCopy.forEach((precinct) => {\n        precinct.fillColor = \"#fff9c4\";\n      });\n      const precinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[precinctsIndex] = {\n        ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      this.setState({ isLoading: true });\n      fetch(\"api/precinct/\" + id)\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(data); // DEBUG: Remove this line later\n          data.adjPrecIds.forEach((adjPrecId) => {\n            precinctsCopy.forEach((precinct) => {\n              if (precinct.id === adjPrecId) {\n                precinct.fillColor = \"#ffeb3b\";\n              }\n            });\n          });\n          this.setState({\n            editMode: 1,\n            isLoading: false,\n            precincts: precinctsCopy\n          });\n        });\n    }\n    // Add neighbor mode\n    else if (this.state.editMode === 3) {\n      // Highlight a selected precinct\n      const precinctsCopy = [...this.state.precincts];\n      const precinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[precinctsIndex] = {\n        ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      if (this.state.currPrecinct.selected === false) {\n        this.setState({\n          currPrecinct: { ...this.state.currPrecinct, id: id, selected: true },\n          precincts: precinctsCopy\n        });\n      } else {\n        this.setState({\n          editMode: 1,\n          isLoading: true,\n          currPrecinct: {\n            ...this.state.currPrecinct,\n            // adjPrecIds: [...this.state.currPrecinct.adjPrecIds, id],\n            selected: false\n          },\n          precincts: precinctsCopy\n        });\n\n        Promise.all([\n          fetch(\"api/precinct/\" + this.state.currPrecinct.id),\n          fetch(\"api/precinct/\" + id)\n        ])\n          .then(async ([res1, res2]) => {\n            const currPrecinctData = await res1.json();\n            const nextPrecinctData = await res2.json();\n            return [currPrecinctData, nextPrecinctData];\n          })\n          .then((data) => {\n            console.log(data); // DEBUG: Remove this line later\n            // const newData = {};\n            // Object.assign(newData, data[0], {\n            //   adjPrecIds: newPolygon.geometry.coordinates\n            // });\n            // data[0].adjPrecId =\n            // data[0] = newData;\n            // console.log(data);\n            console.log(data[0].id);\n            console.log(data[1].id);\n            // console.log([...data[0].adjPrecIds, data[1].id]);\n            // console.log([...data[1].adjPrecIds, data[0].id]);\n            data[0].adjPrecIds.push(data[1].id);\n            data[1].adjPrecIds.push(data[0].id);\n            console.log(data[0].adjPrecIds);\n            console.log(data[1].adjPrecIds);\n\n            // Make a PUT request to the server with \"api/precinct\"\n            fetch(\"api/precinct\", {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                \"id\": data[0].id,\n                \"countyId\": \"21-195\",\n                \"stateId\": \"21\",\n                \"ghost\": data[0].ghost,\n                \"multipleBorder\": data[0].multipleBorder,\n                \"electionData\": {\n                  \"CONGRESSIONAL_16_DEM\": data[0].CONGRESSIONAL_16_DEM,\n                  \"PRESIDENTIAL_16_REP\": data[0].PRESIDENTIAL_16_REP,\n                  \"CONGRESSIONAL_18_DEM\": data[0].CONGRESSIONAL_18_DEM,\n                  \"CONGRESSIONAL_16_REP\": data[0].CONGRESSIONAL_16_REP,\n                  \"CONGRESSIONAL_18_REP\": data[0].CONGRESSIONAL_18_REP,\n                  \"PRESIDENTIAL_16_DEM\": data[0].PRESIDENTIAL_16_DEM\n                },\n                \"adjPrecIds\": [...data[0].adjPrecIds, data[1].id],\n                \"enclPrecIds\": data[0].enclPrecIds,\n                \"interPrecIds\": data[0].interPrecIds,\n                \"logBag\": data[0].logBag,\n                \"canonicalName\": data[0].canonicalName,\n                \"demoModified\": data[0].demoModified,\n                \"white\": data[0].white,\n                \"africanAmer\": data[0].africanAmer,\n                \"asian\": data[0].asian,\n                \"nativeAmer\": data[0].nativeAmer,\n                \"others\": data[0].others,\n                \"pasifika\": data[0].pasifika\n              })\n            })\n              .then((res) => res.json())\n              .then((data) => {\n                console.log(\"Success:\", data);\n              })\n              .catch((error) => {\n                console.error(\"Error:\", error);\n              });\n            // Make a PUT request to the server with \"api/precinct\"\n            fetch(\"api/precinct\", {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                \"id\": data[1].id,\n                \"countyId\": \"21-195\",\n                \"stateId\": \"21\",\n                \"ghost\": data[1].ghost,\n                \"multipleBorder\": data[1].multipleBorder,\n                \"electionData\": {\n                  \"CONGRESSIONAL_16_DEM\": data[1].CONGRESSIONAL_16_DEM,\n                  \"PRESIDENTIAL_16_REP\": data[1].PRESIDENTIAL_16_REP,\n                  \"CONGRESSIONAL_18_DEM\": data[1].CONGRESSIONAL_18_DEM,\n                  \"CONGRESSIONAL_16_REP\": data[1].CONGRESSIONAL_16_REP,\n                  \"CONGRESSIONAL_18_REP\": data[1].CONGRESSIONAL_18_REP,\n                  \"PRESIDENTIAL_16_DEM\": data[1].PRESIDENTIAL_16_DEM\n                },\n                \"adjPrecIds\": [...data[1].adjPrecIds, data[0].id],\n                \"enclPrecIds\": data[1].enclPrecIds,\n                \"interPrecIds\": data[1].interPrecIds,\n                \"logBag\": data[1].logBag,\n                \"canonicalName\": data[1].canonicalName,\n                \"demoModified\": data[1].demoModified,\n                \"white\": data[1].white,\n                \"africanAmer\": data[1].africanAmer,\n                \"asian\": data[1].asian,\n                \"nativeAmer\": data[1].nativeAmer,\n                \"others\": data[1].others,\n                \"pasifika\": data[1].pasifika\n              })\n            })\n              .then((res) => res.json())\n              .then((data) => {\n                console.log(\"Success:\", data);\n              })\n              .catch((error) => {\n                console.error(\"Error:\", error);\n              });\n          })\n          .then(() => {\n            this.setState({ displayMode: 3, isLoading: false });\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      }\n    }\n    // Delete neighbor mode\n    else if (this.state.editMode === 4) {\n      // Highlight a selected precinct\n      const precinctsCopy = [...this.state.precincts];\n      const precinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[precinctsIndex] = {\n        ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      if (this.state.currPrecinct.selected === false) {\n        this.setState({\n          currPrecinct: { ...this.state.currPrecinct, id: id, selected: true },\n          precincts: precinctsCopy\n        });\n      } else {\n        this.setState({\n          editMode: 1,\n          currPrecinct: { ...this.state.currPrecinct, selected: false },\n          precincts: precinctsCopy\n        });\n      }\n    }\n    // Merge precincts mode\n    else if (this.state.editMode === 5) {\n      // Highlight a selected precinct\n      const precinctsCopy = [...this.state.precincts];\n      const precinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n      precinctsCopy[precinctsIndex] = {\n        ...precinctsCopy[precinctsIndex],\n        fillColor: \"#c8b900\"\n      };\n      if (this.state.currPrecinct.selected === false) {\n        this.setState({\n          currPrecinct: {\n            ...this.state.currPrecinct,\n            id: id,\n            precinctsIndex: precinctsIndex,\n            selected: true,\n            coordinates: precinctsCopy[precinctsIndex].coordinates\n          },\n          precincts: precinctsCopy\n        });\n      } else {\n        // Merge polygons and get its new coordinates\n        let currPolygon;\n        let nextPolygon;\n        if (this.state.currPrecinct.coordinates[0][0][0][0] === undefined) {\n          currPolygon = polygon(this.state.currPrecinct.coordinates);\n        } else {\n          currPolygon = multiPolygon(this.state.currPrecinct.coordinates);\n        }\n        if (\n          precinctsCopy[precinctsIndex].coordinates[0][0][0][0] === undefined\n        ) {\n          nextPolygon = polygon(precinctsCopy[precinctsIndex].coordinates);\n        } else {\n          nextPolygon = multiPolygon(precinctsCopy[precinctsIndex].coordinates);\n        }\n        const newPolygon = union(currPolygon, nextPolygon);\n\n        // Remove old polygons from the precincts array\n        // DEBUG\n        // const nextPrecinctId = precinctsCopy[precinctsIndex].id;\n        let precinctsIndexs;\n        if (this.state.currPrecinct.precinctsIndex > precinctsIndex) {\n          precinctsIndexs = [\n            precinctsIndex,\n            this.state.currPrecinct.precinctsIndex\n          ];\n        } else {\n          precinctsIndexs = [\n            this.state.currPrecinct.precinctsIndex,\n            precinctsIndex\n          ];\n        }\n        while (precinctsIndexs.length) {\n          precinctsCopy.splice(precinctsIndexs.pop(), 1);\n        }\n\n        this.setState({\n          editMode: 1,\n          currPrecinct: { ...this.state.currPrecinct, selected: false },\n          precincts: [\n            ...precinctsCopy,\n            {\n              id: this.state.currPrecinct.id,\n              fillColor: \"#c8b900\",\n              coordinates: newPolygon.geometry.coordinates\n            }\n          ]\n        });\n\n        this.setState({ isLoading: true });\n        fetch(\"api/precinct/\" + this.state.currPrecinct.id)\n          .then((res) => res.json())\n          .then((data) => {\n            console.log(data); // DEBUG: Remove this line later\n            // TODO: Make a DELETE request to the server with \"api/precinct/merge\"\n            fetch(\"api/precinct/merge\", {\n              method: \"DELETE\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                \"id\": data.id,\n                \"countyId\": \"21-083\",\n                \"stateId\": \"21\",\n                \"ghost\": data.ghost,\n                \"multipleBorder\": data.multipleBorder,\n                \"electionData\": {\n                  \"CONGRESSIONAL_16_DEM\": data.CONGRESSIONAL_16_DEM,\n                  \"PRESIDENTIAL_16_REP\": data.PRESIDENTIAL_16_REP,\n                  \"CONGRESSIONAL_18_DEM\": data.CONGRESSIONAL_18_DEM,\n                  \"CONGRESSIONAL_16_REP\": data.CONGRESSIONAL_16_REP,\n                  \"CONGRESSIONAL_18_REP\": data.CONGRESSIONAL_18_REP,\n                  \"PRESIDENTIAL_16_DEM\": data.PRESIDENTIAL_16_DEM\n                },\n                \"adjPrecIds\": data.adjPrecIds,\n                \"enclPrecIds\": data.enclPrecIds,\n                \"interPrecIds\": data.interPrecIds,\n                \"logBag\": data.logBag,\n                \"canonicalName\": data.canonicalName,\n                \"demoModified\": data.demoModified,\n                \"white\": data.white,\n                \"africanAmer\": data.africanAmer,\n                \"asian\": data.asian,\n                \"nativeAmer\": data.nativeAmer,\n                \"others\": data.others,\n                \"pasifika\": data.pasifika,\n                \"mergeHolder\": id,\n                \"coordinates\": JSON.stringify(newPolygon.geometry.coordinates)\n              })\n            })\n              .then((res) => res.json())\n              .then((data) => {\n                console.log(\"Success:\", data);\n              })\n              .catch((error) => {\n                console.error(\"Error:\", error);\n              });\n            this.setState({\n              editMode: 1,\n              isLoading: false\n            });\n          });\n      }\n    }\n  }\n\n  handleCountyClick(e, id) {\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng,\n      zoom: 10,\n      isLoading: true\n    });\n    fetch(\"api/county/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.precincts.forEach((currData) => {\n          this.setState({\n            precincts: [\n              ...this.state.precincts,\n              {\n                id: currData.id,\n                fillColor: currData.hasError ? \"#ff8a50\" : \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          });\n        });\n        this.setState({ displayMode: 3, isLoading: false });\n      });\n  }\n\n  handleStateClick(e, id) {\n    // Get counties of a selected state\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng,\n      zoom: 7,\n      isLoading: true\n    });\n    fetch(\"api/state/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.counties.forEach((currData) => {\n          this.setState({\n            counties: [\n              ...this.state.counties,\n              {\n                id: currData.id,\n                fillColor: currData.hasError ? \"#ff8a50\" : \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          });\n        });\n        this.setState({ displayMode: 2, isLoading: false });\n      });\n  }\n\n  handleStateSelect(id) {\n    // Selected Kentucky\n    if (id === 21) {\n      this.setState({ latitude: 37.84, longitude: -84.27, zoom: 7 });\n    }\n    // Selected Louisiana\n    else if (id === 22) {\n      this.setState({ latitude: 30.98, longitude: -91.96, zoom: 7 });\n    }\n    // Selected South Carolina\n    else if (id === 45) {\n      this.setState({ latitude: 33.84, longitude: -81.16, zoom: 7 });\n    }\n    // Get counties of a selected state\n    this.setState({ isLoading: true });\n    fetch(\"api/state/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.counties.forEach((currData) => {\n          this.setState({\n            counties: [\n              ...this.state.counties,\n              {\n                id: currData.id,\n                fillColor: \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          });\n        });\n        this.setState({ displayMode: 2, isLoading: false });\n      });\n  }\n\n  handleTableChange() {\n    // Get county and state ids\n    const countyStateIds = this.state.currPrecinct.id.split(\"-\", 2);\n    // DEBUG\n    console.log(countyStateIds[0]);\n    console.log(countyStateIds[0] + \"-\" + countyStateIds[1]);\n\n    // Make a PUT request to the server with \"api/precinct\"\n    fetch(\"api/precinct\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"id\": this.state.currPrecinct.id,\n        \"countyId\": countyStateIds[0] + \"-\" + countyStateIds[1],\n        \"stateId\": countyStateIds[0],\n        \"ghost\": this.state.currPrecinct.ghost,\n        \"multipleBorder\": this.state.currPrecinct.multipleBorder,\n        \"electionData\": {\n          \"CONGRESSIONAL_16_DEM\": this.state.currPrecinct.electionData[1]\n            .demVotes,\n          \"PRESIDENTIAL_16_REP\": this.state.currPrecinct.electionData[0]\n            .repVotes,\n          \"CONGRESSIONAL_18_DEM\": this.state.currPrecinct.electionData[2]\n            .demVotes,\n          \"CONGRESSIONAL_16_REP\": this.state.currPrecinct.electionData[1]\n            .repVotes,\n          \"CONGRESSIONAL_18_REP\": this.state.currPrecinct.electionData[2]\n            .repVotes,\n          \"PRESIDENTIAL_16_DEM\": this.state.currPrecinct.electionData[0]\n            .demVotes\n        },\n        \"adjPrecIds\": this.state.currPrecinct.adjPrecIds,\n        \"enclPrecIds\": this.state.currPrecinct.enclPrecIds,\n        \"interPrecIds\": this.state.currPrecinct.interPrecIds,\n        \"logBag\": this.state.currPrecinct.logBag,\n        \"canonicalName\": this.state.currPrecinct.canonicalName,\n        \"demoModified\": this.state.currPrecinct.demoModified,\n        \"white\": this.state.currPrecinct.ethnicityData[0].population,\n        \"africanAmer\": this.state.currPrecinct.ethnicityData[1].population,\n        \"asian\": this.state.currPrecinct.ethnicityData[2].population,\n        \"nativeAmer\": this.state.currPrecinct.ethnicityData[3].population,\n        \"others\": this.state.currPrecinct.ethnicityData[5].population,\n        \"pasifika\": this.state.currPrecinct.ethnicityData[4].population\n      })\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Success:\", data);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  }\n\n  handlePolygonCreated(e) {\n    // TODO: Push new precinct object to the precincts array\n    // TODO: Make a POST request to the server to add new precinct\n    console.log(e);\n  }\n\n  handlePolygonEdited(e) {\n    // TODO: Update new coordinates in the state object\n    // TODO: Make a POST request to the server to update precinct coordinates\n    e.layers.eachLayer((layer) => {\n      console.log(layer.options.id);\n      console.log(layer.getLatLngs());\n      console.log(layer.toGeoJSON().geometry.coordinates);\n    });\n  }\n\n  handlePolygonDeleted(e) {\n    // TODO: Delete precinct object from the precincts array\n    // TODO: Do not open side bar when clicking a precinct to delete\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    fetch(\"api/state/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.forEach((currData) => {\n          this.setState({\n            states: [\n              ...this.state.states,\n              {\n                id: currData.id,\n                fillColor: \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          });\n        });\n        this.setState({ isLoading: false });\n      });\n  }\n\n  formatNumber(data) {\n    return (\n      <NumberFormat\n        value={data}\n        displayType={\"text\"}\n        thousandSeparator={true}\n      />\n    );\n  }\n\n  validateNumber(data) {\n    if (isNaN(data)) {\n      return {\n        valid: false,\n        message: \"Input should be numeric\"\n      };\n    } else if (data < 0) {\n      return {\n        valid: false,\n        message: \"Input cannot be less than zero\"\n      };\n    } else if (data > 0 && data !== data.replace(/^0+/, \"\")) {\n      return {\n        valid: false,\n        message: \"Input cannot have a leading zero\"\n      };\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const position = [this.state.latitude, this.state.longitude];\n    const electionTableColumns = [\n      {\n        dataField: \"election\",\n        text: \"Election\"\n      },\n      {\n        dataField: \"demVotes\",\n        text: \"Democratic Votes\",\n        formatter: this.formatNumber,\n        validator: this.validateNumber\n      },\n      {\n        dataField: \"repVotes\",\n        text: \"Republican Votes\",\n        formatter: this.formatNumber,\n        validator: this.validateNumber\n      }\n    ];\n    const ethnicityTableColumns = [\n      {\n        dataField: \"ethnicity\",\n        text: \"Ethnicity\"\n      },\n      {\n        dataField: \"population\",\n        text: \"Population\",\n        formatter: this.formatNumber,\n        validator: this.validateNumber\n      }\n    ];\n    const logTableColumns = [\n      {\n        dataField: \"id\",\n        text: \"Log ID\"\n      },\n      {\n        dataField: \"category\",\n        text: \"Error Category\"\n      },\n      {\n        dataField: \"comment\",\n        text: \"User Comment\"\n      }\n    ];\n    const dataSourceTableColumns = [\n      {\n        dataField: \"name\",\n        text: \"Source Name\"\n      },\n      {\n        dataField: \"category\",\n        text: \"Data Category\"\n      },\n      {\n        dataField: \"url\",\n        text: \"Source URL\"\n      }\n    ];\n    return (\n      <Styles>\n        <div id=\"outer-container\">\n          <Modal size=\"sm\" show={this.state.isLoading} onHide={() => {}}>\n            <Container>\n              <Row>\n                <Col>\n                  <CubeGrid size={24} color=\"#37474f\" />\n                </Col>\n                <Col className=\"pt-4\" xs={8}>\n                  <h5>Loading Data...</h5>\n                </Col>\n              </Row>\n            </Container>\n          </Modal>\n          <Menu\n            right\n            noOverlay\n            disableOverlayClick\n            pageWrapId={\"page-wrap\"}\n            outerContainerId={\"outer-container\"}\n            menuClassName={\"menu-right\"}\n            width={\"35%\"}\n            customBurgerIcon={false}\n            isOpen={this.state.sidebarOpen}\n            onStateChange={(state) => this.handleStateChange(state)}\n          >\n            <Container fluid className=\"px-0\">\n              <Row className=\"pt-4\">\n                <Col>\n                  <h4>{this.state.currPrecinct.id}</h4>\n                </Col>\n              </Row>\n              <Row className=\"py-1\">\n                <Col>\n                  <h5>Election Data</h5>\n                </Col>\n              </Row>\n              <Row className=\"pb-2\">\n                <Col>\n                  <BootstrapTable\n                    striped\n                    hover\n                    condensed\n                    keyField=\"election\"\n                    data={this.state.currPrecinct.electionData}\n                    columns={electionTableColumns}\n                    cellEdit={cellEditFactory({\n                      mode: \"click\",\n                      blurToSave: true,\n                      afterSaveCell: () => this.handleTableChange()\n                    })}\n                  />\n                </Col>\n              </Row>\n              <Row className=\"pb-1\">\n                <Col>\n                  <h5>County Demographic Data</h5>\n                </Col>\n              </Row>\n              <Row className=\"pb-2\">\n                <Col>\n                  <BootstrapTable\n                    striped\n                    hover\n                    condensed\n                    keyField=\"ethnicity\"\n                    data={this.state.currPrecinct.ethnicityData}\n                    columns={ethnicityTableColumns}\n                    cellEdit={cellEditFactory({\n                      mode: \"click\",\n                      blurToSave: true,\n                      afterSaveCell: () => this.handleTableChange()\n                    })}\n                  />\n                </Col>\n              </Row>\n              <Row className=\"pb-1\">\n                <Col>\n                  <h5>Corrections Log</h5>\n                </Col>\n              </Row>\n              <Row className=\"pb-2\">\n                <Col>\n                  <BootstrapTable\n                    striped\n                    hover\n                    condensed\n                    keyField=\"id\"\n                    data={[]}\n                    columns={logTableColumns}\n                    noDataIndication=\"Data Not Available for Now\"\n                    cellEdit={cellEditFactory({\n                      mode: \"click\",\n                      blurToSave: true\n                    })}\n                  />\n                </Col>\n              </Row>\n              <Row className=\"pb-1\">\n                <Col>\n                  <h5>Data Sources</h5>\n                </Col>\n              </Row>\n              <Row className=\"pb-5\">\n                <Col>\n                  <BootstrapTable\n                    striped\n                    hover\n                    condensed\n                    keyField=\"name\"\n                    data={[]}\n                    columns={dataSourceTableColumns}\n                    noDataIndication=\"Data Not Available for Now\"\n                    cellEdit={cellEditFactory({\n                      mode: \"click\",\n                      blurToSave: true\n                    })}\n                  />\n                </Col>\n              </Row>\n            </Container>\n          </Menu>\n          <main id=\"page-wrap\">\n            <Container fluid className=\"px-0\">\n              <Row>\n                <Col>\n                  <Map\n                    center={position}\n                    zoomControl={false}\n                    zoom={this.state.zoom}\n                    onZoomEnd={(e) => this.handleZoomEnd(e)}\n                  >\n                    <ZoomControl position=\"bottomleft\" />\n                    <LayersControl position=\"bottomleft\">\n                      <TileLayer\n                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\"\n                        attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, \n                    &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> \n                    &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n                        preferCanvas={true}\n                      />\n                      <Control position=\"topleft\">\n                        <ButtonGroup vertical className=\"pb-2\">\n                          <DropdownButton\n                            as={ButtonGroup}\n                            id=\"select-state-dropdown\"\n                            drop=\"right\"\n                            variant=\"light\"\n                            size=\"sm\"\n                            title=\"Select State\"\n                          >\n                            <Dropdown.Item\n                              onSelect={() => this.handleStateSelect(21)}\n                            >\n                              Kentucky\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                              onSelect={() => this.handleStateSelect(22)}\n                            >\n                              Louisiana\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                              onSelect={() => this.handleStateSelect(45)}\n                            >\n                              South Carolina\n                            </Dropdown.Item>\n                          </DropdownButton>\n                          <Button\n                            variant=\"light\"\n                            size=\"sm\"\n                            active={this.state.editMode === 2 ? true : false}\n                            onClick={() => this.handleViewNeighbors()}\n                          >\n                            View Neighbors\n                          </Button>\n                          <Button\n                            variant=\"light\"\n                            size=\"sm\"\n                            active={this.state.editMode === 3 ? true : false}\n                            onClick={() => this.handleAddNeighbor()}\n                          >\n                            Add Neighbor\n                          </Button>\n                          <Button\n                            variant=\"light\"\n                            size=\"sm\"\n                            active={this.state.editMode === 4 ? true : false}\n                            onClick={() => this.handleDeleteNeighbor()}\n                          >\n                            Delete Neighbor\n                          </Button>\n                          <Button\n                            variant=\"light\"\n                            size=\"sm\"\n                            active={this.state.editMode === 5 ? true : false}\n                            onClick={() => this.handleMergePrecincts()}\n                          >\n                            Merge Precincts\n                          </Button>\n                        </ButtonGroup>\n                      </Control>\n                      <Overlay name=\"State Boundaries\" checked={true}>\n                        <LayerGroup>\n                          {this.state.states.map((state) => {\n                            if (this.state.displayMode === 1) {\n                              return (\n                                <Polygon\n                                  id={state.id}\n                                  key={state.id}\n                                  positions={state.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={state.fillColor}\n                                  onClick={(e) =>\n                                    this.handleStateClick(e, state.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{state.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else if (this.state.zoom < 7) {\n                              return (\n                                <Polygon\n                                  id={state.id}\n                                  key={state.id}\n                                  positions={state.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={state.fillColor}\n                                  onClick={(e) =>\n                                    this.handleStateClick(e, state.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{state.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else {\n                              return null;\n                            }\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"County Boundaries\" checked={true}>\n                        <LayerGroup>\n                          {this.state.counties.map((county) => {\n                            if (this.state.displayMode === 2) {\n                              return (\n                                <Polygon\n                                  id={county.id}\n                                  key={county.id}\n                                  positions={county.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={county.fillColor}\n                                  onClick={(e) =>\n                                    this.handleCountyClick(e, county.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{county.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else if (this.state.zoom < 9) {\n                              return (\n                                <Polygon\n                                  id={county.id}\n                                  key={county.id}\n                                  positions={county.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={county.fillColor}\n                                  onClick={(e) =>\n                                    this.handleCountyClick(e, county.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{county.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else {\n                              return null;\n                            }\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"Precinct Boundaries\" checked={true}>\n                        <LayerGroup>\n                          {this.state.precincts.map((precinct) => {\n                            if (this.state.displayMode === 3) {\n                              return (\n                                <Polygon\n                                  id={precinct.id}\n                                  key={precinct.id}\n                                  positions={precinct.coordinates}\n                                  smoothFactor={1}\n                                  color={\"#102027\"}\n                                  weight={1}\n                                  fillOpacity={0.5}\n                                  fillColor={precinct.fillColor}\n                                  onClick={(e) =>\n                                    this.handlePrecinctClick(e, precinct.id)\n                                  }\n                                  onMouseOver={this.handleMouseOver}\n                                  onMouseOut={this.handleMouseOut}\n                                >\n                                  <Tooltip>\n                                    <b>{precinct.id}</b>\n                                  </Tooltip>\n                                </Polygon>\n                              );\n                            } else {\n                              return null;\n                            }\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"National Park Boundaries\">\n                        <LayerGroup>\n                          {this.state.nationalParks.map((park) => {\n                            return (\n                              <Polygon\n                                id={park.id}\n                                key={park.id}\n                                positions={park.coordinates}\n                              />\n                            );\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"Congressional District Boundaries\">\n                        <LayerGroup>\n                          {this.state.congDistricts.map((district) => {\n                            return (\n                              <Polygon\n                                id={district.id}\n                                key={district.id}\n                                positions={district.coordinates}\n                              />\n                            );\n                          })}\n                        </LayerGroup>\n                      </Overlay>\n                      <Overlay name=\"Sample Polygons\" checked={false}>\n                        <FeatureGroup>\n                          <EditControl\n                            position=\"bottomleft\"\n                            onCreated={this.handlePolygonCreated}\n                            onEdited={this.handlePolygonEdited}\n                            onDeleted={this.handlePolygonDeleted}\n                            draw={{\n                              polyline: false,\n                              circle: false,\n                              marker: false,\n                              circlemarker: false\n                            }}\n                          />\n                          {this.state.testPolygons.map((polygon) => {\n                            return (\n                              <Polygon\n                                id={polygon.id}\n                                key={polygon.id}\n                                positions={polygon.coordinates}\n                                smoothFactor={1}\n                                color={\"#102027\"}\n                                weight={1}\n                                fillOpacity={0.5}\n                                fillColor={polygon.fillColor}\n                              />\n                            );\n                          })}\n                        </FeatureGroup>\n                      </Overlay>\n                    </LayersControl>\n                  </Map>\n                </Col>\n              </Row>\n            </Container>\n          </main>\n        </div>\n      </Styles>\n    );\n  }\n}\n\nexport default MapView;\n"]},"metadata":{},"sourceType":"module"}