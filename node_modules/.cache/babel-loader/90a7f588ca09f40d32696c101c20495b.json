{"ast":null,"code":"var _jsxFileName = \"/Users/jay/Documents/election-data-quality/front-end/src/components/MapView.js\";\nimport React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport { Map, TileLayer, FeatureGroup, Tooltip, Polygon } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Control from \"react-leaflet-control\";\nimport { slide as Menu } from \"react-burger-menu\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport styled from \"styled-components\";\nconst Styles = styled.div`\n  .btn-light {\n    background-color: white;\n    border-color: #343a40;\n    font-size: 12px;\n  }\n\n  .dropdown-item {\n    color: black;\n    font-size: 12px;\n  }\n\n  .form-check {\n    font-size: 12px;\n  }\n\n  .leaflet-container {\n    width: 100%;\n    height: 90vh;\n  }\n\n  // NOTE: helper classes below are from react-burger-menu library\n  /* Position and sizing of clickable cross button */\n  .bm-cross-button {\n    height: 24px;\n    width: 24px;\n  }\n\n  /* Color/shape of close button cross */\n  .bm-cross {\n    background: black;\n  }\n\n  /* Sidebar wrapper styles  */\n  .bm-menu-wrap {\n    position: fixed;\n    height: 100%;\n  }\n\n  /* General sidebar styles */\n  .bm-menu {\n    background: #cfd8dc;\n    padding: 2.5em 1.5em 0;\n    font-size: 1.15em;\n  }\n\n  /* Wrapper for item list */\n  .bm-item-list {\n    color: black;\n    padding: 0;\n  }\n\n  /* Individual item */\n  .bm-item {\n    display: inline-block;\n  }\n\n  /* Styling of overlay */\n  .bm-overlay {\n    background: rgba(0, 0, 0, 0.3);\n  }\n`;\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: 34,\n      longitude: -85,\n      zoom: 6,\n      sidebarOpen: false,\n      currPrecinct: {\n        id: null,\n        canonicalName: null,\n        ghost: null,\n        multipleBorder: null,\n        adjacentPrecinctIds: [],\n        enclosingPrecinctIds: [],\n        demographicData: [{\n          population: null\n        }],\n        electionData: [{\n          election: \"2016 Presidential\",\n          demVotes: null,\n          repVotes: null\n        }, {\n          election: \"2016 Congressional\",\n          demVotes: null,\n          repVotes: null\n        }, {\n          election: \"2018 Congressional\",\n          demVotes: null,\n          repVotes: null\n        }],\n        logBag: [],\n        county: {\n          id: null,\n          canonicalName: null,\n          ethnicityData: [{\n            ethnicity: \"White\",\n            population: null\n          }, {\n            ethnicity: \"Black or African American\",\n            population: null\n          }, {\n            ethnicity: \"Asian or Asian American\",\n            population: null\n          }, {\n            ethnicity: \"American Indian\",\n            population: null\n          }, {\n            ethnicity: \"Pacific Islander\",\n            population: null\n          }, {\n            ethnicity: \"Others\",\n            population: null\n          }],\n          state: {\n            id: null,\n            canonicalName: null\n          }\n        },\n        coordinates: [] // TODO: Add more properties\n\n      },\n      states: [],\n      counties: [],\n      precincts: [// DEBUG\n        // {\n        //   id: 1,\n        //   fillColor: \"#fff9c4\",\n        //   coordinates: [\n        //     [\n        //       [38.8, -84.5],\n        //       [38.9, -84.5],\n        //       [38.9, -84.4],\n        //       [38.8, -84.4]\n        //     ],\n        //     [\n        //       [38.825, -84.475],\n        //       [38.875, -84.475],\n        //       [38.875, -84.425],\n        //       [38.825, -84.425]\n        //     ]\n        //   ]\n        // },\n        // {\n        //   id: 2,\n        //   fillColor: \"#fff9c4\",\n        //   coordinates: [\n        //     [\n        //       [38.8, -84.4],\n        //       [38.9, -84.4],\n        //       [39.0, -84.3],\n        //       [38.9, -84.2],\n        //       [38.8, -84.2]\n        //     ]\n        //   ]\n        // }\n      ]\n    };\n  }\n\n  handleStateChange(state) {\n    this.setState({\n      sidebarOpen: state.isOpen\n    });\n  }\n\n  handleMouseOver(e) {\n    e.target.openTooltip();\n  }\n\n  handleMouseOut(e) {\n    e.target.closeTooltip();\n  }\n\n  handlePrecinctClick(e, id) {\n    // TODO: Change fill color of the selected state\n    const precinctsCopy = [...this.state.precincts];\n    const precinctsIndex = precinctsCopy.findIndex(el => el.id === id);\n    precinctsCopy[precinctsIndex] = { ...precinctsCopy[precinctsIndex],\n      fillColor: \"#102027\"\n    };\n    this.setState({\n      precincts: precinctsCopy\n    }); // this.setState(prevState => ({\n    //   precincts: {\n    //     ...prevState.precincts,\n    //     fillColor: \"#102027\"\n    //   }\n    // }));\n    // e.target.setStyle({ fillColor: \"#102027\" });\n    // Modify map state\n\n    this.setState({\n      latitude: e.latlng.lat,\n      longitude: e.latlng.lng\n    }); // TODO: Update zoom\n\n    const demographicDataCopy = [...this.state.currPrecinct.demographicData];\n    const electionDataCopy = [...this.state.currPrecinct.electionData];\n    const ethnicityDataCopy = [...this.state.currPrecinct.county.ethnicityData];\n    fetch(\"api/precinct/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n      // demographicDataCopy[0] = { population: data.population };\n      // electionDataCopy[0] = {\n      //   ...electionDataCopy[0],\n      //   demVotes: data.electionData.PRESIDENTIAL_16_DEM,\n      //   repVotes: data.electionData.PRESIDENTIAL_16_REP\n      // };\n      // electionDataCopy[1] = {\n      //   ...electionDataCopy[1],\n      //   demVotes: data.electionData.CONGRESSIONAL_16_DEM,\n      //   repVotes: data.electionData.CONGRESSIONAL_16_REP\n      // };\n      // electionDataCopy[2] = {\n      //   ...electionDataCopy[2],\n      //   demVotes: data.electionData.CONGRESSIONAL_18_DEM,\n      //   repVotes: data.electionData.CONGRESSIONAL_18_REP\n      // };\n\n      ethnicityDataCopy[0] = { ...ethnicityDataCopy[0],\n        population: data.white\n      };\n      ethnicityDataCopy[1] = { ...ethnicityDataCopy[1],\n        population: data.africanAmer\n      };\n      ethnicityDataCopy[2] = { ...ethnicityDataCopy[2],\n        population: data.asian\n      };\n      ethnicityDataCopy[3] = { ...ethnicityDataCopy[3],\n        population: data.nativeAmer\n      };\n      ethnicityDataCopy[4] = { ...ethnicityDataCopy[4],\n        population: data.pasifika\n      };\n      ethnicityDataCopy[5] = { ...ethnicityDataCopy[5],\n        population: data.others\n      };\n      this.setState({\n        currPrecinct: { ...this.state.currPrecinct,\n          // TODO: Remove this line later\n          id: data.id,\n          canonicalName: data.canonicalName,\n          ghost: data.ghost,\n          multipleBorder: data.multipleBorder,\n          // demographicData: demographicDataCopy,\n          // electionData: electionDataCopy,\n          // TODO: add logBag\n          // logBag: [\n          //   ...this.state.currPrecinct.logBag,\n          //   {\n          //     id: null,\n          //     category: null,\n          //     comment: null\n          //   }\n          // ],\n          county: {\n            ethnicityData: ethnicityDataCopy\n          } // TODO: Add more properties\n\n        }\n      });\n    });\n    this.setState(() => ({\n      sidebarOpen: true\n    }));\n  }\n\n  handleCountyClick(e, id) {\n    fetch(\"api/county/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.precincts.map(currData => this.setState({\n        precincts: [...this.state.precincts, {\n          id: currData.id,\n          fillColor: \"#fff9c4\",\n          coordinates: JSON.parse(currData.coordinates)\n        }]\n      }));\n    });\n  }\n\n  handleStateClick(e, id) {\n    // Get counties of a selected state\n    fetch(\"api/state/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.counties.map(currData => this.setState({\n        counties: [...this.state.counties, {\n          id: currData.id,\n          fillColor: \"#fff9c4\",\n          coordinates: JSON.parse(currData.coordinates)\n        }]\n      }));\n    }); // Selected Kentucky\n\n    if (id === \"21\") {\n      this.setState({\n        latitude: 37.84,\n        longitude: -84.27,\n        zoom: 8\n      });\n    } // Selected Louisiana\n    else if (id === \"22\") {\n        console.log(id);\n        this.setState({\n          latitude: 30.98,\n          longitude: -91.96,\n          zoom: 8\n        });\n      } // Selected South Carolina\n      else if (id === \"45\") {\n          console.log(id);\n          this.setState({\n            latitude: 33.84,\n            longitude: -81.16,\n            zoom: 8\n          });\n        }\n  }\n\n  handleStateSelect(id) {\n    // Get counties of a selected state\n    fetch(\"api/state/\" + id).then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.counties.map(currData => this.setState({\n        counties: [...this.state.counties, {\n          id: currData.id,\n          fillColor: \"#fff9c4\",\n          coordinates: JSON.parse(currData.coordinates)\n        }]\n      }));\n    }); // Selected Kentucky\n\n    if (id === 21) {\n      this.setState({\n        latitude: 37.84,\n        longitude: -84.27,\n        zoom: 8\n      });\n    } // Selected Louisiana\n    else if (id === 22) {\n        this.setState({\n          latitude: 30.98,\n          longitude: -91.96,\n          zoom: 8\n        });\n      } // Selected South Carolina\n      else if (id === 45) {\n          this.setState({\n            latitude: 33.84,\n            longitude: -81.16,\n            zoom: 8\n          });\n        }\n  }\n\n  handleTableChange(oldValue, newValue, row) {\n    // DEBUG: Remove these lines below later\n    console.log(oldValue);\n    console.log(newValue);\n    console.log(row); // TODO: Make a POST request to the server with \"api/precinct\"\n    // fetch(\"api/precinct\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\"\n    //   },\n    //   body: JSON.stringify()\n    // })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     console.log(\"Success:\", data);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error:\", error);\n    //   });\n  }\n\n  handlePolygonCreated(e) {\n    // TODO: Push new precinct object to the precincts array\n    // TODO: Make a POST request to the server to add new precinct\n    console.log(e);\n  }\n\n  handlePolygonEdited(e) {\n    // TODO: Update new coordinates in the state object\n    // TODO: Make a POST request to the server to update precinct coordinates\n    e.layers.eachLayer(layer => {\n      console.log(layer.options.id);\n      console.log(layer.getLatLngs());\n      console.log(layer.toGeoJSON().geometry.coordinates);\n    });\n  }\n\n  handlePolygonDeleted(e) {// TODO: Delete precinct object from the precincts array\n    // TODO: Do not open side bar when clicking a precinct to delete\n  }\n\n  componentDidMount() {\n    fetch(\"api/state/all\").then(res => res.json()).then(data => {\n      console.log(data); // DEBUG: Remove this line later\n\n      data.map(currData => this.setState({\n        states: [...this.state.states, {\n          id: currData.id,\n          fillColor: \"#fff9c4\",\n          coordinates: JSON.parse(currData.coordinates)\n        }]\n      }));\n    });\n  }\n\n  render() {\n    const position = [this.state.latitude, this.state.longitude];\n    const electionTableColumns = [{\n      dataField: \"election\",\n      text: \"Election\"\n    }, {\n      dataField: \"demVotes\",\n      text: \"Democratic Votes\"\n    }, {\n      dataField: \"repVotes\",\n      text: \"Republican Votes\"\n    }];\n    const demographicTableColumns = [{\n      dataField: \"population\",\n      text: \"Population (Precinct Level)\"\n    }];\n    const ethnicityTableColumns = [{\n      dataField: \"ethnicity\",\n      text: \"Ethnicity\"\n    }, {\n      dataField: \"population\",\n      text: \"Population (County Level)\"\n    }];\n    const logTableColumns = [{\n      dataField: \"id\",\n      text: \"Log ID\"\n    }, {\n      dataField: \"category\",\n      text: \"Error Category\"\n    }, {\n      dataField: \"comment\",\n      text: \"User Comment\"\n    }];\n    const dataSourceTableColumns = [{\n      dataField: \"name\",\n      text: \"Source Name\"\n    }, {\n      dataField: \"category\",\n      text: \"Data Category\"\n    }, {\n      dataField: \"url\",\n      text: \"Source URL\"\n    }];\n    return React.createElement(Styles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      right: true,\n      width: \"60%\",\n      menuClassName: \"menu-right\",\n      customBurgerIcon: false,\n      isOpen: this.state.sidebarOpen,\n      onStateChange: state => this.handleStateChange(state),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      className: \"px-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526\n      },\n      __self: this\n    }, \"Canonical Name\"))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, \"Election Data\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"election\",\n      data: this.state.currPrecinct.electionData,\n      columns: electionTableColumns,\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true,\n        afterSaveCell: this.handleTableChange\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, \"Demographic Data\"))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"population\",\n      data: [],\n      columns: demographicTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"ethnicity\",\n      data: this.state.currPrecinct.county.ethnicityData,\n      columns: ethnicityTableColumns,\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, \"Corrections Log\"))), React.createElement(Row, {\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"id\",\n      data: [],\n      columns: logTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      className: \"pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, \"Data Sources\"))), React.createElement(Row, {\n      className: \"pb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, React.createElement(BootstrapTable, {\n      striped: true,\n      hover: true,\n      condensed: true,\n      keyField: \"name\",\n      data: [],\n      columns: dataSourceTableColumns,\n      noDataIndication: \"Data Not Available for Now\",\n      cellEdit: cellEditFactory({\n        mode: \"click\",\n        blurToSave: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      fluid: true,\n      className: \"px-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, React.createElement(Map, {\n      center: position,\n      zoom: this.state.zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 638\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      url: \"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://stadiamaps.com/\\\">Stadia Maps</a>,  \\xA9 <a href=\\\"https://openmaptiles.org/\\\">OpenMapTiles</a>  \\xA9 <a href=\\\"http://openstreetmap.org\\\">OpenStreetMap</a> contributors\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }), React.createElement(Control, {\n      position: \"bottomleft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, React.createElement(ButtonGroup, {\n      vertical: true,\n      className: \"pb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, React.createElement(DropdownButton, {\n      as: ButtonGroup,\n      id: \"select-state-dropdown\",\n      drop: \"right\",\n      variant: \"light\",\n      title: \"Select State\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      onSelect: () => this.handleStateSelect(21),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, \"Kentucky\"), React.createElement(Dropdown.Item, {\n      onSelect: () => this.handleStateSelect(22),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, \"Louisiana\"), React.createElement(Dropdown.Item, {\n      onSelect: () => this.handleStateSelect(45),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664\n      },\n      __self: this\n    }, \"South Carolina\")), React.createElement(DropdownButton, {\n      as: ButtonGroup,\n      id: \"select-election-dropdown\",\n      drop: \"right\",\n      variant: \"light\",\n      title: \"Select Election\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, \"2016 Presidential\"), React.createElement(Dropdown.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, \"2016 Congressional\"), React.createElement(Dropdown.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683\n      },\n      __self: this\n    }, \"2018 Congressional\")), React.createElement(Button, {\n      variant: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, \"Add Neighbor\"), React.createElement(Button, {\n      variant: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"Delete Neighbor\"), React.createElement(Button, {\n      variant: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, \"Merge Precincts\")), React.createElement(Card, {\n      border: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      className: \"pb-1\",\n      type: \"switch\",\n      id: \"precinct\",\n      label: \"Hide Precinct Boundaries\",\n      bsCustomPrefix: \"form-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    })), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      className: \"pb-1\",\n      type: \"switch\",\n      id: \"park\",\n      label: \"View National Park Boundaries\",\n      bsCustomPrefix: \"form-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    })), React.createElement(Form.Check, {\n      type: \"switch\",\n      id: \"district\",\n      label: \"View Congressional District Boundaries\",\n      bsCustomPrefix: \"form-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    })))), React.createElement(FeatureGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720\n      },\n      __self: this\n    }, React.createElement(EditControl, {\n      position: \"topleft\",\n      onCreated: this.handlePolygonCreated,\n      onEdited: this.handlePolygonEdited,\n      onDeleted: this.handlePolygonDeleted,\n      draw: {\n        polyline: false,\n        circle: false,\n        marker: false,\n        circlemarker: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721\n      },\n      __self: this\n    }), this.state.states.map(state => {\n      return React.createElement(Polygon, {\n        id: state.id,\n        key: state.id,\n        positions: state.coordinates,\n        smoothFactor: 1,\n        color: \"#102027\",\n        weight: 1,\n        fillOpacity: 0.5,\n        fillColor: state.fillColor,\n        onClick: e => this.handleStateClick(e, state.id),\n        onMouseOver: this.handleMouseOver,\n        onMouseOut: this.handleMouseOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749\n        },\n        __self: this\n      }, state.id)));\n    }), this.state.counties.map(county => {\n      return React.createElement(Polygon, {\n        id: county.id,\n        key: county.id,\n        positions: county.coordinates,\n        smoothFactor: 1,\n        color: \"#102027\",\n        weight: 1,\n        fillOpacity: 0.5,\n        fillColor: county.fillColor,\n        onClick: e => this.handleCountyClick(e, county.id),\n        onMouseOver: this.handleMouseOver,\n        onMouseOut: this.handleMouseOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 756\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 769\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 770\n        },\n        __self: this\n      }, county.id)));\n    }), this.state.precincts.map(precinct => {\n      return React.createElement(Polygon, {\n        id: precinct.id,\n        key: precinct.id,\n        positions: precinct.coordinates,\n        smoothFactor: 1,\n        color: \"#102027\",\n        weight: 1,\n        fillOpacity: 0.5,\n        fillColor: precinct.fillColor,\n        onClick: e => this.handlePrecinctClick(e, precinct.id),\n        onMouseOver: this.handleMouseOver,\n        onMouseOut: this.handleMouseOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 777\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 792\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793\n        },\n        __self: this\n      }, precinct.id)));\n    })))))));\n  }\n\n}\n\nexport default MapView;","map":{"version":3,"sources":["/Users/jay/Documents/election-data-quality/front-end/src/components/MapView.js"],"names":["React","Container","Row","Col","ButtonGroup","Button","Dropdown","DropdownButton","Form","Card","Map","TileLayer","FeatureGroup","Tooltip","Polygon","EditControl","Control","slide","Menu","BootstrapTable","cellEditFactory","styled","Styles","div","MapView","Component","constructor","props","state","latitude","longitude","zoom","sidebarOpen","currPrecinct","id","canonicalName","ghost","multipleBorder","adjacentPrecinctIds","enclosingPrecinctIds","demographicData","population","electionData","election","demVotes","repVotes","logBag","county","ethnicityData","ethnicity","coordinates","states","counties","precincts","handleStateChange","setState","isOpen","handleMouseOver","e","target","openTooltip","handleMouseOut","closeTooltip","handlePrecinctClick","precinctsCopy","precinctsIndex","findIndex","el","fillColor","latlng","lat","lng","demographicDataCopy","electionDataCopy","ethnicityDataCopy","fetch","then","res","json","data","console","log","white","africanAmer","asian","nativeAmer","pasifika","others","handleCountyClick","map","currData","JSON","parse","handleStateClick","handleStateSelect","handleTableChange","oldValue","newValue","row","handlePolygonCreated","handlePolygonEdited","layers","eachLayer","layer","options","getLatLngs","toGeoJSON","geometry","handlePolygonDeleted","componentDidMount","render","position","electionTableColumns","dataField","text","demographicTableColumns","ethnicityTableColumns","logTableColumns","dataSourceTableColumns","mode","blurToSave","afterSaveCell","polyline","circle","marker","circlemarker","precinct"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,YAAzB,EAAuCC,OAAvC,EAAgDC,OAAhD,QAA+D,eAA/D;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,KAAK,IAAIC,IAAlB,QAA8B,mBAA9B;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAO,gEAAP;AACA,OAAO,oCAAP;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAACE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA1B;;AA+DA,MAAMC,OAAN,SAAsBxB,KAAK,CAACyB,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,SAAS,EAAE,CAAC,EAFD;AAGXC,MAAAA,IAAI,EAAE,CAHK;AAIXC,MAAAA,WAAW,EAAE,KAJF;AAKXC,MAAAA,YAAY,EAAE;AACZC,QAAAA,EAAE,EAAE,IADQ;AAEZC,QAAAA,aAAa,EAAE,IAFH;AAGZC,QAAAA,KAAK,EAAE,IAHK;AAIZC,QAAAA,cAAc,EAAE,IAJJ;AAKZC,QAAAA,mBAAmB,EAAE,EALT;AAMZC,QAAAA,oBAAoB,EAAE,EANV;AAOZC,QAAAA,eAAe,EAAE,CAAC;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAAD,CAPL;AAQZC,QAAAA,YAAY,EAAE,CACZ;AACEC,UAAAA,QAAQ,EAAE,mBADZ;AAEEC,UAAAA,QAAQ,EAAE,IAFZ;AAGEC,UAAAA,QAAQ,EAAE;AAHZ,SADY,EAMZ;AACEF,UAAAA,QAAQ,EAAE,oBADZ;AAEEC,UAAAA,QAAQ,EAAE,IAFZ;AAGEC,UAAAA,QAAQ,EAAE;AAHZ,SANY,EAWZ;AACEF,UAAAA,QAAQ,EAAE,oBADZ;AAEEC,UAAAA,QAAQ,EAAE,IAFZ;AAGEC,UAAAA,QAAQ,EAAE;AAHZ,SAXY,CARF;AAyBZC,QAAAA,MAAM,EAAE,EAzBI;AA0BZC,QAAAA,MAAM,EAAE;AACNb,UAAAA,EAAE,EAAE,IADE;AAENC,UAAAA,aAAa,EAAE,IAFT;AAGNa,UAAAA,aAAa,EAAE,CACb;AACEC,YAAAA,SAAS,EAAE,OADb;AAEER,YAAAA,UAAU,EAAE;AAFd,WADa,EAKb;AACEQ,YAAAA,SAAS,EAAE,2BADb;AAEER,YAAAA,UAAU,EAAE;AAFd,WALa,EASb;AACEQ,YAAAA,SAAS,EAAE,yBADb;AAEER,YAAAA,UAAU,EAAE;AAFd,WATa,EAab;AACEQ,YAAAA,SAAS,EAAE,iBADb;AAEER,YAAAA,UAAU,EAAE;AAFd,WAba,EAiBb;AACEQ,YAAAA,SAAS,EAAE,kBADb;AAEER,YAAAA,UAAU,EAAE;AAFd,WAjBa,EAqBb;AACEQ,YAAAA,SAAS,EAAE,QADb;AAEER,YAAAA,UAAU,EAAE;AAFd,WArBa,CAHT;AA6BNb,UAAAA,KAAK,EAAE;AACLM,YAAAA,EAAE,EAAE,IADC;AAELC,YAAAA,aAAa,EAAE;AAFV;AA7BD,SA1BI;AA4DZe,QAAAA,WAAW,EAAE,EA5DD,CA6DZ;;AA7DY,OALH;AAoEXC,MAAAA,MAAM,EAAE,EApEG;AAqEXC,MAAAA,QAAQ,EAAE,EArEC;AAsEXC,MAAAA,SAAS,EAAE,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCS;AAtEA,KAAb;AAyGD;;AAEDC,EAAAA,iBAAiB,CAAC1B,KAAD,EAAQ;AACvB,SAAK2B,QAAL,CAAc;AAAEvB,MAAAA,WAAW,EAAEJ,KAAK,CAAC4B;AAArB,KAAd;AACD;;AAEDC,EAAAA,eAAe,CAACC,CAAD,EAAI;AACjBA,IAAAA,CAAC,CAACC,MAAF,CAASC,WAAT;AACD;;AAEDC,EAAAA,cAAc,CAACH,CAAD,EAAI;AAChBA,IAAAA,CAAC,CAACC,MAAF,CAASG,YAAT;AACD;;AAEDC,EAAAA,mBAAmB,CAACL,CAAD,EAAIxB,EAAJ,EAAQ;AACzB;AACA,UAAM8B,aAAa,GAAG,CAAC,GAAG,KAAKpC,KAAL,CAAWyB,SAAf,CAAtB;AACA,UAAMY,cAAc,GAAGD,aAAa,CAACE,SAAd,CAAyBC,EAAD,IAAQA,EAAE,CAACjC,EAAH,KAAUA,EAA1C,CAAvB;AACA8B,IAAAA,aAAa,CAACC,cAAD,CAAb,GAAgC,EAC9B,GAAGD,aAAa,CAACC,cAAD,CADc;AAE9BG,MAAAA,SAAS,EAAE;AAFmB,KAAhC;AAIA,SAAKb,QAAL,CAAc;AAAEF,MAAAA,SAAS,EAAEW;AAAb,KAAd,EARyB,CASzB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAAKT,QAAL,CAAc;AAAE1B,MAAAA,QAAQ,EAAE6B,CAAC,CAACW,MAAF,CAASC,GAArB;AAA0BxC,MAAAA,SAAS,EAAE4B,CAAC,CAACW,MAAF,CAASE;AAA9C,KAAd,EAlByB,CAkB2C;;AAEpE,UAAMC,mBAAmB,GAAG,CAAC,GAAG,KAAK5C,KAAL,CAAWK,YAAX,CAAwBO,eAA5B,CAA5B;AACA,UAAMiC,gBAAgB,GAAG,CAAC,GAAG,KAAK7C,KAAL,CAAWK,YAAX,CAAwBS,YAA5B,CAAzB;AACA,UAAMgC,iBAAiB,GAAG,CAAC,GAAG,KAAK9C,KAAL,CAAWK,YAAX,CAAwBc,MAAxB,CAA+BC,aAAnC,CAA1B;AACA2B,IAAAA,KAAK,CAAC,kBAAkBzC,EAAnB,CAAL,CACG0C,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADc,CACK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,MAAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,EACrB,GAAGA,iBAAiB,CAAC,CAAD,CADC;AAErBjC,QAAAA,UAAU,EAAEsC,IAAI,CAACG;AAFI,OAAvB;AAIAR,MAAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,EACrB,GAAGA,iBAAiB,CAAC,CAAD,CADC;AAErBjC,QAAAA,UAAU,EAAEsC,IAAI,CAACI;AAFI,OAAvB;AAIAT,MAAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,EACrB,GAAGA,iBAAiB,CAAC,CAAD,CADC;AAErBjC,QAAAA,UAAU,EAAEsC,IAAI,CAACK;AAFI,OAAvB;AAIAV,MAAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,EACrB,GAAGA,iBAAiB,CAAC,CAAD,CADC;AAErBjC,QAAAA,UAAU,EAAEsC,IAAI,CAACM;AAFI,OAAvB;AAIAX,MAAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,EACrB,GAAGA,iBAAiB,CAAC,CAAD,CADC;AAErBjC,QAAAA,UAAU,EAAEsC,IAAI,CAACO;AAFI,OAAvB;AAIAZ,MAAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,EACrB,GAAGA,iBAAiB,CAAC,CAAD,CADC;AAErBjC,QAAAA,UAAU,EAAEsC,IAAI,CAACQ;AAFI,OAAvB;AAIA,WAAKhC,QAAL,CAAc;AACZtB,QAAAA,YAAY,EAAE,EACZ,GAAG,KAAKL,KAAL,CAAWK,YADF;AACgB;AAC5BC,UAAAA,EAAE,EAAE6C,IAAI,CAAC7C,EAFG;AAGZC,UAAAA,aAAa,EAAE4C,IAAI,CAAC5C,aAHR;AAIZC,UAAAA,KAAK,EAAE2C,IAAI,CAAC3C,KAJA;AAKZC,UAAAA,cAAc,EAAE0C,IAAI,CAAC1C,cALT;AAMZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAU,UAAAA,MAAM,EAAE;AACNC,YAAAA,aAAa,EAAE0B;AADT,WAjBI,CAoBZ;;AApBY;AADF,OAAd;AAwBD,KApEH;AAqEA,SAAKnB,QAAL,CAAc,OAAO;AAAEvB,MAAAA,WAAW,EAAE;AAAf,KAAP,CAAd;AACD;;AAEDwD,EAAAA,iBAAiB,CAAC9B,CAAD,EAAIxB,EAAJ,EAAQ;AACvByC,IAAAA,KAAK,CAAC,gBAAgBzC,EAAjB,CAAL,CACG0C,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADc,CACK;;AACnBA,MAAAA,IAAI,CAAC1B,SAAL,CAAeoC,GAAf,CAAoBC,QAAD,IACjB,KAAKnC,QAAL,CAAc;AACZF,QAAAA,SAAS,EAAE,CACT,GAAG,KAAKzB,KAAL,CAAWyB,SADL,EAET;AACEnB,UAAAA,EAAE,EAAEwD,QAAQ,CAACxD,EADf;AAEEkC,UAAAA,SAAS,EAAE,SAFb;AAGElB,UAAAA,WAAW,EAAEyC,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACxC,WAApB;AAHf,SAFS;AADC,OAAd,CADF;AAYD,KAhBH;AAiBD;;AAED2C,EAAAA,gBAAgB,CAACnC,CAAD,EAAIxB,EAAJ,EAAQ;AACtB;AACAyC,IAAAA,KAAK,CAAC,eAAezC,EAAhB,CAAL,CACG0C,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADc,CACK;;AACnBA,MAAAA,IAAI,CAAC3B,QAAL,CAAcqC,GAAd,CAAmBC,QAAD,IAChB,KAAKnC,QAAL,CAAc;AACZH,QAAAA,QAAQ,EAAE,CACR,GAAG,KAAKxB,KAAL,CAAWwB,QADN,EAER;AACElB,UAAAA,EAAE,EAAEwD,QAAQ,CAACxD,EADf;AAEEkC,UAAAA,SAAS,EAAE,SAFb;AAGElB,UAAAA,WAAW,EAAEyC,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACxC,WAApB;AAHf,SAFQ;AADE,OAAd,CADF;AAYD,KAhBH,EAFsB,CAmBtB;;AACA,QAAIhB,EAAE,KAAK,IAAX,EAAiB;AACf,WAAKqB,QAAL,CAAc;AAAE1B,QAAAA,QAAQ,EAAE,KAAZ;AAAmBC,QAAAA,SAAS,EAAE,CAAC,KAA/B;AAAsCC,QAAAA,IAAI,EAAE;AAA5C,OAAd;AACD,KAFD,CAGA;AAHA,SAIK,IAAIG,EAAE,KAAK,IAAX,EAAiB;AACpB8C,QAAAA,OAAO,CAACC,GAAR,CAAY/C,EAAZ;AACA,aAAKqB,QAAL,CAAc;AAAE1B,UAAAA,QAAQ,EAAE,KAAZ;AAAmBC,UAAAA,SAAS,EAAE,CAAC,KAA/B;AAAsCC,UAAAA,IAAI,EAAE;AAA5C,SAAd;AACD,OAHI,CAIL;AAJK,WAKA,IAAIG,EAAE,KAAK,IAAX,EAAiB;AACpB8C,UAAAA,OAAO,CAACC,GAAR,CAAY/C,EAAZ;AACA,eAAKqB,QAAL,CAAc;AAAE1B,YAAAA,QAAQ,EAAE,KAAZ;AAAmBC,YAAAA,SAAS,EAAE,CAAC,KAA/B;AAAsCC,YAAAA,IAAI,EAAE;AAA5C,WAAd;AACD;AACF;;AAED+D,EAAAA,iBAAiB,CAAC5D,EAAD,EAAK;AACpB;AACAyC,IAAAA,KAAK,CAAC,eAAezC,EAAhB,CAAL,CACG0C,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADc,CACK;;AACnBA,MAAAA,IAAI,CAAC3B,QAAL,CAAcqC,GAAd,CAAmBC,QAAD,IAChB,KAAKnC,QAAL,CAAc;AACZH,QAAAA,QAAQ,EAAE,CACR,GAAG,KAAKxB,KAAL,CAAWwB,QADN,EAER;AACElB,UAAAA,EAAE,EAAEwD,QAAQ,CAACxD,EADf;AAEEkC,UAAAA,SAAS,EAAE,SAFb;AAGElB,UAAAA,WAAW,EAAEyC,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACxC,WAApB;AAHf,SAFQ;AADE,OAAd,CADF;AAYD,KAhBH,EAFoB,CAmBpB;;AACA,QAAIhB,EAAE,KAAK,EAAX,EAAe;AACb,WAAKqB,QAAL,CAAc;AAAE1B,QAAAA,QAAQ,EAAE,KAAZ;AAAmBC,QAAAA,SAAS,EAAE,CAAC,KAA/B;AAAsCC,QAAAA,IAAI,EAAE;AAA5C,OAAd;AACD,KAFD,CAGA;AAHA,SAIK,IAAIG,EAAE,KAAK,EAAX,EAAe;AAClB,aAAKqB,QAAL,CAAc;AAAE1B,UAAAA,QAAQ,EAAE,KAAZ;AAAmBC,UAAAA,SAAS,EAAE,CAAC,KAA/B;AAAsCC,UAAAA,IAAI,EAAE;AAA5C,SAAd;AACD,OAFI,CAGL;AAHK,WAIA,IAAIG,EAAE,KAAK,EAAX,EAAe;AAClB,eAAKqB,QAAL,CAAc;AAAE1B,YAAAA,QAAQ,EAAE,KAAZ;AAAmBC,YAAAA,SAAS,EAAE,CAAC,KAA/B;AAAsCC,YAAAA,IAAI,EAAE;AAA5C,WAAd;AACD;AACF;;AAEDgE,EAAAA,iBAAiB,CAACC,QAAD,EAAWC,QAAX,EAAqBC,GAArB,EAA0B;AACzC;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYe,QAAZ;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ,EAJyC,CAMzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,oBAAoB,CAACzC,CAAD,EAAI;AACtB;AACA;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,CAAZ;AACD;;AAED0C,EAAAA,mBAAmB,CAAC1C,CAAD,EAAI;AACrB;AACA;AACAA,IAAAA,CAAC,CAAC2C,MAAF,CAASC,SAAT,CAAoBC,KAAD,IAAW;AAC5BvB,MAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAK,CAACC,OAAN,CAActE,EAA1B;AACA8C,MAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAK,CAACE,UAAN,EAAZ;AACAzB,MAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAK,CAACG,SAAN,GAAkBC,QAAlB,CAA2BzD,WAAvC;AACD,KAJD;AAKD;;AAED0D,EAAAA,oBAAoB,CAAClD,CAAD,EAAI,CACtB;AACA;AACD;;AAEDmD,EAAAA,iBAAiB,GAAG;AAClBlC,IAAAA,KAAK,CAAC,eAAD,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADc,CACK;;AACnBA,MAAAA,IAAI,CAACU,GAAL,CAAUC,QAAD,IACP,KAAKnC,QAAL,CAAc;AACZJ,QAAAA,MAAM,EAAE,CACN,GAAG,KAAKvB,KAAL,CAAWuB,MADR,EAEN;AACEjB,UAAAA,EAAE,EAAEwD,QAAQ,CAACxD,EADf;AAEEkC,UAAAA,SAAS,EAAE,SAFb;AAGElB,UAAAA,WAAW,EAAEyC,IAAI,CAACC,KAAL,CAAWF,QAAQ,CAACxC,WAApB;AAHf,SAFM;AADI,OAAd,CADF;AAYD,KAhBH;AAiBD;;AAED4D,EAAAA,MAAM,GAAG;AACP,UAAMC,QAAQ,GAAG,CAAC,KAAKnF,KAAL,CAAWC,QAAZ,EAAsB,KAAKD,KAAL,CAAWE,SAAjC,CAAjB;AACA,UAAMkF,oBAAoB,GAAG,CAC3B;AACEC,MAAAA,SAAS,EAAE,UADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KAD2B,EAK3B;AACED,MAAAA,SAAS,EAAE,UADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KAL2B,EAS3B;AACED,MAAAA,SAAS,EAAE,UADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KAT2B,CAA7B;AAcA,UAAMC,uBAAuB,GAAG,CAC9B;AACEF,MAAAA,SAAS,EAAE,YADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KAD8B,CAAhC;AAMA,UAAME,qBAAqB,GAAG,CAC5B;AACEH,MAAAA,SAAS,EAAE,WADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KAD4B,EAK5B;AACED,MAAAA,SAAS,EAAE,YADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KAL4B,CAA9B;AAUA,UAAMG,eAAe,GAAG,CACtB;AACEJ,MAAAA,SAAS,EAAE,IADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KADsB,EAKtB;AACED,MAAAA,SAAS,EAAE,UADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KALsB,EAStB;AACED,MAAAA,SAAS,EAAE,SADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KATsB,CAAxB;AAcA,UAAMI,sBAAsB,GAAG,CAC7B;AACEL,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KAD6B,EAK7B;AACED,MAAAA,SAAS,EAAE,UADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KAL6B,EAS7B;AACED,MAAAA,SAAS,EAAE,KADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KAT6B,CAA/B;AAcA,WACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,KAAK,EAAE,KAFT;AAGE,MAAA,aAAa,EAAE,YAHjB;AAIE,MAAA,gBAAgB,EAAE,KAJpB;AAKE,MAAA,MAAM,EAAE,KAAKtF,KAAL,CAAWI,WALrB;AAME,MAAA,aAAa,EAAGJ,KAAD,IAAW,KAAK0B,iBAAL,CAAuB1B,KAAvB,CAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAiB,MAAA,SAAS,EAAC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,CADF,EAME,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF,CANF,EAWE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AACE,MAAA,OAAO,MADT;AAEE,MAAA,KAAK,MAFP;AAGE,MAAA,SAAS,MAHX;AAIE,MAAA,QAAQ,EAAC,UAJX;AAKE,MAAA,IAAI,EAAE,KAAKA,KAAL,CAAWK,YAAX,CAAwBS,YALhC;AAME,MAAA,OAAO,EAAEsE,oBANX;AAOE,MAAA,QAAQ,EAAE5F,eAAe,CAAC;AACxBmG,QAAAA,IAAI,EAAE,OADkB;AAExBC,QAAAA,UAAU,EAAE,IAFY;AAGxBC,QAAAA,aAAa,EAAE,KAAK1B;AAHI,OAAD,CAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CAXF,EA4BE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CADF,CA5BF,EAiCE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AACE,MAAA,OAAO,MADT;AAEE,MAAA,KAAK,MAFP;AAGE,MAAA,SAAS,MAHX;AAIE,MAAA,QAAQ,EAAC,YAJX;AAKE,MAAA,IAAI,EAAE,EALR;AAME,MAAA,OAAO,EAAEoB,uBANX;AAOE,MAAA,gBAAgB,EAAC,4BAPnB;AAQE,MAAA,QAAQ,EAAE/F,eAAe,CAAC;AACxBmG,QAAAA,IAAI,EAAE,OADkB;AAExBC,QAAAA,UAAU,EAAE;AAFY,OAAD,CAR3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CAjCF,EAkDE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AACE,MAAA,OAAO,MADT;AAEE,MAAA,KAAK,MAFP;AAGE,MAAA,SAAS,MAHX;AAIE,MAAA,QAAQ,EAAC,WAJX;AAKE,MAAA,IAAI,EAAE,KAAK5F,KAAL,CAAWK,YAAX,CAAwBc,MAAxB,CAA+BC,aALvC;AAME,MAAA,OAAO,EAAEoE,qBANX;AAOE,MAAA,QAAQ,EAAEhG,eAAe,CAAC;AACxBmG,QAAAA,IAAI,EAAE,OADkB;AAExBC,QAAAA,UAAU,EAAE;AAFY,OAAD,CAP3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CAlDF,EAkEE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CADF,CAlEF,EAuEE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AACE,MAAA,OAAO,MADT;AAEE,MAAA,KAAK,MAFP;AAGE,MAAA,SAAS,MAHX;AAIE,MAAA,QAAQ,EAAC,IAJX;AAKE,MAAA,IAAI,EAAE,EALR;AAME,MAAA,OAAO,EAAEH,eANX;AAOE,MAAA,gBAAgB,EAAC,4BAPnB;AAQE,MAAA,QAAQ,EAAEjG,eAAe,CAAC;AACxBmG,QAAAA,IAAI,EAAE,OADkB;AAExBC,QAAAA,UAAU,EAAE;AAFY,OAAD,CAR3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CAvEF,EAwFE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,CAxFF,EA6FE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AACE,MAAA,OAAO,MADT;AAEE,MAAA,KAAK,MAFP;AAGE,MAAA,SAAS,MAHX;AAIE,MAAA,QAAQ,EAAC,MAJX;AAKE,MAAA,IAAI,EAAE,EALR;AAME,MAAA,OAAO,EAAEF,sBANX;AAOE,MAAA,gBAAgB,EAAC,4BAPnB;AAQE,MAAA,QAAQ,EAAElG,eAAe,CAAC;AACxBmG,QAAAA,IAAI,EAAE,OADkB;AAExBC,QAAAA,UAAU,EAAE;AAFY,OAAD,CAR3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CA7FF,CARF,CADF,EAyHE,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAiB,MAAA,SAAS,EAAC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAET,QAAb;AAAuB,MAAA,IAAI,EAAE,KAAKnF,KAAL,CAAWG,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,GAAG,EAAC,sEADN;AAEE,MAAA,WAAW,EAAC,kMAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,oBAAC,OAAD;AAAS,MAAA,QAAQ,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAa,MAAA,QAAQ,MAArB;AAAsB,MAAA,SAAS,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AACE,MAAA,EAAE,EAAE3B,WADN;AAEE,MAAA,EAAE,EAAC,uBAFL;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,OAAO,EAAC,OAJV;AAKE,MAAA,KAAK,EAAC,cALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,QAAQ,EAAE,MAAM,KAAK0F,iBAAL,CAAuB,EAAvB,CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,EAYE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,QAAQ,EAAE,MAAM,KAAKA,iBAAL,CAAuB,EAAvB,CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAZF,EAiBE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,QAAQ,EAAE,MAAM,KAAKA,iBAAL,CAAuB,EAAvB,CADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAjBF,CADF,EAwBE,oBAAC,cAAD;AACE,MAAA,EAAE,EAAE1F,WADN;AAEE,MAAA,EAAE,EAAC,0BAFL;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,OAAO,EAAC,OAJV;AAKE,MAAA,KAAK,EAAC,iBALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAPF,EAUE,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAVF,EAaE,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAbF,CAxBF,EAyCE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAzCF,EA0CE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA1CF,EA2CE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA3CF,CADF,EA8CE,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,KAAN;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,EAAE,EAAC,UAHL;AAIE,MAAA,KAAK,EAAC,0BAJR;AAKE,MAAA,cAAc,EAAC,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAUE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,KAAN;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,EAAE,EAAC,MAHL;AAIE,MAAA,KAAK,EAAC,+BAJR;AAKE,MAAA,cAAc,EAAC,YALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,EAmBE,oBAAC,IAAD,CAAM,KAAN;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,EAAE,EAAC,UAFL;AAGE,MAAA,KAAK,EAAC,wCAHR;AAIE,MAAA,cAAc,EAAC,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,CADF,CA9CF,CAPF,EAkFE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AACE,MAAA,QAAQ,EAAC,SADX;AAEE,MAAA,SAAS,EAAE,KAAK+F,oBAFlB;AAGE,MAAA,QAAQ,EAAE,KAAKC,mBAHjB;AAIE,MAAA,SAAS,EAAE,KAAKQ,oBAJlB;AAKE,MAAA,IAAI,EAAE;AACJc,QAAAA,QAAQ,EAAE,KADN;AAEJC,QAAAA,MAAM,EAAE,KAFJ;AAGJC,QAAAA,MAAM,EAAE,KAHJ;AAIJC,QAAAA,YAAY,EAAE;AAJV,OALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAaG,KAAKjG,KAAL,CAAWuB,MAAX,CAAkBsC,GAAlB,CAAuB7D,KAAD,IAAW;AAChC,aACE,oBAAC,OAAD;AACE,QAAA,EAAE,EAAEA,KAAK,CAACM,EADZ;AAEE,QAAA,GAAG,EAAEN,KAAK,CAACM,EAFb;AAGE,QAAA,SAAS,EAAEN,KAAK,CAACsB,WAHnB;AAIE,QAAA,YAAY,EAAE,CAJhB;AAKE,QAAA,KAAK,EAAE,SALT;AAME,QAAA,MAAM,EAAE,CANV;AAOE,QAAA,WAAW,EAAE,GAPf;AAQE,QAAA,SAAS,EAAEtB,KAAK,CAACwC,SARnB;AASE,QAAA,OAAO,EAAGV,CAAD,IAAO,KAAKmC,gBAAL,CAAsBnC,CAAtB,EAAyB9B,KAAK,CAACM,EAA/B,CATlB;AAUE,QAAA,WAAW,EAAE,KAAKuB,eAVpB;AAWE,QAAA,UAAU,EAAE,KAAKI,cAXnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAaE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIjC,KAAK,CAACM,EAAV,CADF,CAbF,CADF;AAmBD,KApBA,CAbH,EAkCG,KAAKN,KAAL,CAAWwB,QAAX,CAAoBqC,GAApB,CAAyB1C,MAAD,IAAY;AACnC,aACE,oBAAC,OAAD;AACE,QAAA,EAAE,EAAEA,MAAM,CAACb,EADb;AAEE,QAAA,GAAG,EAAEa,MAAM,CAACb,EAFd;AAGE,QAAA,SAAS,EAAEa,MAAM,CAACG,WAHpB;AAIE,QAAA,YAAY,EAAE,CAJhB;AAKE,QAAA,KAAK,EAAE,SALT;AAME,QAAA,MAAM,EAAE,CANV;AAOE,QAAA,WAAW,EAAE,GAPf;AAQE,QAAA,SAAS,EAAEH,MAAM,CAACqB,SARpB;AASE,QAAA,OAAO,EAAGV,CAAD,IAAO,KAAK8B,iBAAL,CAAuB9B,CAAvB,EAA0BX,MAAM,CAACb,EAAjC,CATlB;AAUE,QAAA,WAAW,EAAE,KAAKuB,eAVpB;AAWE,QAAA,UAAU,EAAE,KAAKI,cAXnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAaE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAId,MAAM,CAACb,EAAX,CADF,CAbF,CADF;AAmBD,KApBA,CAlCH,EAuDG,KAAKN,KAAL,CAAWyB,SAAX,CAAqBoC,GAArB,CAA0BqC,QAAD,IAAc;AACtC,aACE,oBAAC,OAAD;AACE,QAAA,EAAE,EAAEA,QAAQ,CAAC5F,EADf;AAEE,QAAA,GAAG,EAAE4F,QAAQ,CAAC5F,EAFhB;AAGE,QAAA,SAAS,EAAE4F,QAAQ,CAAC5E,WAHtB;AAIE,QAAA,YAAY,EAAE,CAJhB;AAKE,QAAA,KAAK,EAAE,SALT;AAME,QAAA,MAAM,EAAE,CANV;AAOE,QAAA,WAAW,EAAE,GAPf;AAQE,QAAA,SAAS,EAAE4E,QAAQ,CAAC1D,SARtB;AASE,QAAA,OAAO,EAAGV,CAAD,IACP,KAAKK,mBAAL,CAAyBL,CAAzB,EAA4BoE,QAAQ,CAAC5F,EAArC,CAVJ;AAYE,QAAA,WAAW,EAAE,KAAKuB,eAZpB;AAaE,QAAA,UAAU,EAAE,KAAKI,cAbnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAeE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIiE,QAAQ,CAAC5F,EAAb,CADF,CAfF,CADF;AAqBD,KAtBA,CAvDH,CAlFF,CADF,CADF,CADF,CAzHF,CADF;AAoSD;;AAjtBmC;;AAotBtC,eAAeV,OAAf","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\nimport { Map, TileLayer, FeatureGroup, Tooltip, Polygon } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport Control from \"react-leaflet-control\";\nimport { slide as Menu } from \"react-burger-menu\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport styled from \"styled-components\";\n\nconst Styles = styled.div`\n  .btn-light {\n    background-color: white;\n    border-color: #343a40;\n    font-size: 12px;\n  }\n\n  .dropdown-item {\n    color: black;\n    font-size: 12px;\n  }\n\n  .form-check {\n    font-size: 12px;\n  }\n\n  .leaflet-container {\n    width: 100%;\n    height: 90vh;\n  }\n\n  // NOTE: helper classes below are from react-burger-menu library\n  /* Position and sizing of clickable cross button */\n  .bm-cross-button {\n    height: 24px;\n    width: 24px;\n  }\n\n  /* Color/shape of close button cross */\n  .bm-cross {\n    background: black;\n  }\n\n  /* Sidebar wrapper styles  */\n  .bm-menu-wrap {\n    position: fixed;\n    height: 100%;\n  }\n\n  /* General sidebar styles */\n  .bm-menu {\n    background: #cfd8dc;\n    padding: 2.5em 1.5em 0;\n    font-size: 1.15em;\n  }\n\n  /* Wrapper for item list */\n  .bm-item-list {\n    color: black;\n    padding: 0;\n  }\n\n  /* Individual item */\n  .bm-item {\n    display: inline-block;\n  }\n\n  /* Styling of overlay */\n  .bm-overlay {\n    background: rgba(0, 0, 0, 0.3);\n  }\n`;\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: 34,\n      longitude: -85,\n      zoom: 6,\n      sidebarOpen: false,\n      currPrecinct: {\n        id: null,\n        canonicalName: null,\n        ghost: null,\n        multipleBorder: null,\n        adjacentPrecinctIds: [],\n        enclosingPrecinctIds: [],\n        demographicData: [{ population: null }],\n        electionData: [\n          {\n            election: \"2016 Presidential\",\n            demVotes: null,\n            repVotes: null\n          },\n          {\n            election: \"2016 Congressional\",\n            demVotes: null,\n            repVotes: null\n          },\n          {\n            election: \"2018 Congressional\",\n            demVotes: null,\n            repVotes: null\n          }\n        ],\n        logBag: [],\n        county: {\n          id: null,\n          canonicalName: null,\n          ethnicityData: [\n            {\n              ethnicity: \"White\",\n              population: null\n            },\n            {\n              ethnicity: \"Black or African American\",\n              population: null\n            },\n            {\n              ethnicity: \"Asian or Asian American\",\n              population: null\n            },\n            {\n              ethnicity: \"American Indian\",\n              population: null\n            },\n            {\n              ethnicity: \"Pacific Islander\",\n              population: null\n            },\n            {\n              ethnicity: \"Others\",\n              population: null\n            }\n          ],\n          state: {\n            id: null,\n            canonicalName: null\n          }\n        },\n        coordinates: []\n        // TODO: Add more properties\n      },\n      states: [],\n      counties: [],\n      precincts: [\n        // DEBUG\n        // {\n        //   id: 1,\n        //   fillColor: \"#fff9c4\",\n        //   coordinates: [\n        //     [\n        //       [38.8, -84.5],\n        //       [38.9, -84.5],\n        //       [38.9, -84.4],\n        //       [38.8, -84.4]\n        //     ],\n        //     [\n        //       [38.825, -84.475],\n        //       [38.875, -84.475],\n        //       [38.875, -84.425],\n        //       [38.825, -84.425]\n        //     ]\n        //   ]\n        // },\n        // {\n        //   id: 2,\n        //   fillColor: \"#fff9c4\",\n        //   coordinates: [\n        //     [\n        //       [38.8, -84.4],\n        //       [38.9, -84.4],\n        //       [39.0, -84.3],\n        //       [38.9, -84.2],\n        //       [38.8, -84.2]\n        //     ]\n        //   ]\n        // }\n      ]\n    };\n  }\n\n  handleStateChange(state) {\n    this.setState({ sidebarOpen: state.isOpen });\n  }\n\n  handleMouseOver(e) {\n    e.target.openTooltip();\n  }\n\n  handleMouseOut(e) {\n    e.target.closeTooltip();\n  }\n\n  handlePrecinctClick(e, id) {\n    // TODO: Change fill color of the selected state\n    const precinctsCopy = [...this.state.precincts];\n    const precinctsIndex = precinctsCopy.findIndex((el) => el.id === id);\n    precinctsCopy[precinctsIndex] = {\n      ...precinctsCopy[precinctsIndex],\n      fillColor: \"#102027\"\n    };\n    this.setState({ precincts: precinctsCopy });\n    // this.setState(prevState => ({\n    //   precincts: {\n    //     ...prevState.precincts,\n    //     fillColor: \"#102027\"\n    //   }\n    // }));\n    // e.target.setStyle({ fillColor: \"#102027\" });\n\n    // Modify map state\n    this.setState({ latitude: e.latlng.lat, longitude: e.latlng.lng }); // TODO: Update zoom\n\n    const demographicDataCopy = [...this.state.currPrecinct.demographicData];\n    const electionDataCopy = [...this.state.currPrecinct.electionData];\n    const ethnicityDataCopy = [...this.state.currPrecinct.county.ethnicityData];\n    fetch(\"api/precinct/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        // demographicDataCopy[0] = { population: data.population };\n        // electionDataCopy[0] = {\n        //   ...electionDataCopy[0],\n        //   demVotes: data.electionData.PRESIDENTIAL_16_DEM,\n        //   repVotes: data.electionData.PRESIDENTIAL_16_REP\n        // };\n        // electionDataCopy[1] = {\n        //   ...electionDataCopy[1],\n        //   demVotes: data.electionData.CONGRESSIONAL_16_DEM,\n        //   repVotes: data.electionData.CONGRESSIONAL_16_REP\n        // };\n        // electionDataCopy[2] = {\n        //   ...electionDataCopy[2],\n        //   demVotes: data.electionData.CONGRESSIONAL_18_DEM,\n        //   repVotes: data.electionData.CONGRESSIONAL_18_REP\n        // };\n        ethnicityDataCopy[0] = {\n          ...ethnicityDataCopy[0],\n          population: data.white\n        };\n        ethnicityDataCopy[1] = {\n          ...ethnicityDataCopy[1],\n          population: data.africanAmer\n        };\n        ethnicityDataCopy[2] = {\n          ...ethnicityDataCopy[2],\n          population: data.asian\n        };\n        ethnicityDataCopy[3] = {\n          ...ethnicityDataCopy[3],\n          population: data.nativeAmer\n        };\n        ethnicityDataCopy[4] = {\n          ...ethnicityDataCopy[4],\n          population: data.pasifika\n        };\n        ethnicityDataCopy[5] = {\n          ...ethnicityDataCopy[5],\n          population: data.others\n        };\n        this.setState({\n          currPrecinct: {\n            ...this.state.currPrecinct, // TODO: Remove this line later\n            id: data.id,\n            canonicalName: data.canonicalName,\n            ghost: data.ghost,\n            multipleBorder: data.multipleBorder,\n            // demographicData: demographicDataCopy,\n            // electionData: electionDataCopy,\n            // TODO: add logBag\n            // logBag: [\n            //   ...this.state.currPrecinct.logBag,\n            //   {\n            //     id: null,\n            //     category: null,\n            //     comment: null\n            //   }\n            // ],\n            county: {\n              ethnicityData: ethnicityDataCopy\n            }\n            // TODO: Add more properties\n          }\n        });\n      });\n    this.setState(() => ({ sidebarOpen: true }));\n  }\n\n  handleCountyClick(e, id) {\n    fetch(\"api/county/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.precincts.map((currData) =>\n          this.setState({\n            precincts: [\n              ...this.state.precincts,\n              {\n                id: currData.id,\n                fillColor: \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          })\n        );\n      });\n  }\n\n  handleStateClick(e, id) {\n    // Get counties of a selected state\n    fetch(\"api/state/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.counties.map((currData) =>\n          this.setState({\n            counties: [\n              ...this.state.counties,\n              {\n                id: currData.id,\n                fillColor: \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          })\n        );\n      });\n    // Selected Kentucky\n    if (id === \"21\") {\n      this.setState({ latitude: 37.84, longitude: -84.27, zoom: 8 });\n    }\n    // Selected Louisiana\n    else if (id === \"22\") {\n      console.log(id);\n      this.setState({ latitude: 30.98, longitude: -91.96, zoom: 8 });\n    }\n    // Selected South Carolina\n    else if (id === \"45\") {\n      console.log(id);\n      this.setState({ latitude: 33.84, longitude: -81.16, zoom: 8 });\n    }\n  }\n\n  handleStateSelect(id) {\n    // Get counties of a selected state\n    fetch(\"api/state/\" + id)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.counties.map((currData) =>\n          this.setState({\n            counties: [\n              ...this.state.counties,\n              {\n                id: currData.id,\n                fillColor: \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          })\n        );\n      });\n    // Selected Kentucky\n    if (id === 21) {\n      this.setState({ latitude: 37.84, longitude: -84.27, zoom: 8 });\n    }\n    // Selected Louisiana\n    else if (id === 22) {\n      this.setState({ latitude: 30.98, longitude: -91.96, zoom: 8 });\n    }\n    // Selected South Carolina\n    else if (id === 45) {\n      this.setState({ latitude: 33.84, longitude: -81.16, zoom: 8 });\n    }\n  }\n\n  handleTableChange(oldValue, newValue, row) {\n    // DEBUG: Remove these lines below later\n    console.log(oldValue);\n    console.log(newValue);\n    console.log(row);\n\n    // TODO: Make a POST request to the server with \"api/precinct\"\n    // fetch(\"api/precinct\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Content-Type\": \"application/json\"\n    //   },\n    //   body: JSON.stringify()\n    // })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     console.log(\"Success:\", data);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error:\", error);\n    //   });\n  }\n\n  handlePolygonCreated(e) {\n    // TODO: Push new precinct object to the precincts array\n    // TODO: Make a POST request to the server to add new precinct\n    console.log(e);\n  }\n\n  handlePolygonEdited(e) {\n    // TODO: Update new coordinates in the state object\n    // TODO: Make a POST request to the server to update precinct coordinates\n    e.layers.eachLayer((layer) => {\n      console.log(layer.options.id);\n      console.log(layer.getLatLngs());\n      console.log(layer.toGeoJSON().geometry.coordinates);\n    });\n  }\n\n  handlePolygonDeleted(e) {\n    // TODO: Delete precinct object from the precincts array\n    // TODO: Do not open side bar when clicking a precinct to delete\n  }\n\n  componentDidMount() {\n    fetch(\"api/state/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data); // DEBUG: Remove this line later\n        data.map((currData) =>\n          this.setState({\n            states: [\n              ...this.state.states,\n              {\n                id: currData.id,\n                fillColor: \"#fff9c4\",\n                coordinates: JSON.parse(currData.coordinates)\n              }\n            ]\n          })\n        );\n      });\n  }\n\n  render() {\n    const position = [this.state.latitude, this.state.longitude];\n    const electionTableColumns = [\n      {\n        dataField: \"election\",\n        text: \"Election\"\n      },\n      {\n        dataField: \"demVotes\",\n        text: \"Democratic Votes\"\n      },\n      {\n        dataField: \"repVotes\",\n        text: \"Republican Votes\"\n      }\n    ];\n    const demographicTableColumns = [\n      {\n        dataField: \"population\",\n        text: \"Population (Precinct Level)\"\n      }\n    ];\n    const ethnicityTableColumns = [\n      {\n        dataField: \"ethnicity\",\n        text: \"Ethnicity\"\n      },\n      {\n        dataField: \"population\",\n        text: \"Population (County Level)\"\n      }\n    ];\n    const logTableColumns = [\n      {\n        dataField: \"id\",\n        text: \"Log ID\"\n      },\n      {\n        dataField: \"category\",\n        text: \"Error Category\"\n      },\n      {\n        dataField: \"comment\",\n        text: \"User Comment\"\n      }\n    ];\n    const dataSourceTableColumns = [\n      {\n        dataField: \"name\",\n        text: \"Source Name\"\n      },\n      {\n        dataField: \"category\",\n        text: \"Data Category\"\n      },\n      {\n        dataField: \"url\",\n        text: \"Source URL\"\n      }\n    ];\n    return (\n      <Styles>\n        <Menu\n          right\n          width={\"60%\"}\n          menuClassName={\"menu-right\"}\n          customBurgerIcon={false}\n          isOpen={this.state.sidebarOpen}\n          onStateChange={(state) => this.handleStateChange(state)}\n        >\n          <Container fluid className=\"px-0\">\n            <Row className=\"pb-2\">\n              <Col>\n                <h2>Canonical Name</h2>\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <h4>Election Data</h4>\n              </Col>\n            </Row>\n            <Row className=\"pb-2\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"election\"\n                  data={this.state.currPrecinct.electionData}\n                  columns={electionTableColumns}\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true,\n                    afterSaveCell: this.handleTableChange\n                  })}\n                />\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <h4>Demographic Data</h4>\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"population\"\n                  data={[]}\n                  columns={demographicTableColumns}\n                  noDataIndication=\"Data Not Available for Now\"\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true\n                  })}\n                />\n              </Col>\n            </Row>\n            <Row className=\"pb-2\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"ethnicity\"\n                  data={this.state.currPrecinct.county.ethnicityData}\n                  columns={ethnicityTableColumns}\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true\n                  })}\n                />\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <h4>Corrections Log</h4>\n              </Col>\n            </Row>\n            <Row className=\"pb-2\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"id\"\n                  data={[]}\n                  columns={logTableColumns}\n                  noDataIndication=\"Data Not Available for Now\"\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true\n                  })}\n                />\n              </Col>\n            </Row>\n            <Row className=\"pb-1\">\n              <Col>\n                <h4>Data Sources</h4>\n              </Col>\n            </Row>\n            <Row className=\"pb-5\">\n              <Col>\n                <BootstrapTable\n                  striped\n                  hover\n                  condensed\n                  keyField=\"name\"\n                  data={[]}\n                  columns={dataSourceTableColumns}\n                  noDataIndication=\"Data Not Available for Now\"\n                  cellEdit={cellEditFactory({\n                    mode: \"click\",\n                    blurToSave: true\n                  })}\n                />\n              </Col>\n            </Row>\n          </Container>\n        </Menu>\n        <Container fluid className=\"px-0\">\n          <Row>\n            <Col>\n              <Map center={position} zoom={this.state.zoom}>\n                <TileLayer\n                  url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\"\n                  attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, \n                    &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> \n                    &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n                />\n                <Control position=\"bottomleft\">\n                  <ButtonGroup vertical className=\"pb-2\">\n                    <DropdownButton\n                      as={ButtonGroup}\n                      id=\"select-state-dropdown\"\n                      drop=\"right\"\n                      variant=\"light\"\n                      title=\"Select State\"\n                    >\n                      <Dropdown.Item\n                        onSelect={() => this.handleStateSelect(21)}\n                      >\n                        Kentucky\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onSelect={() => this.handleStateSelect(22)}\n                      >\n                        Louisiana\n                      </Dropdown.Item>\n                      <Dropdown.Item\n                        onSelect={() => this.handleStateSelect(45)}\n                      >\n                        South Carolina\n                      </Dropdown.Item>\n                    </DropdownButton>\n                    <DropdownButton\n                      as={ButtonGroup}\n                      id=\"select-election-dropdown\"\n                      drop=\"right\"\n                      variant=\"light\"\n                      title=\"Select Election\"\n                    >\n                      <Dropdown.Item /* onSelect={} */>\n                        2016 Presidential\n                      </Dropdown.Item>\n                      <Dropdown.Item /* onSelect={} */>\n                        2016 Congressional\n                      </Dropdown.Item>\n                      <Dropdown.Item /* onSelect={} */>\n                        2018 Congressional\n                      </Dropdown.Item>\n                    </DropdownButton>\n                    <Button variant=\"light\">Add Neighbor</Button>\n                    <Button variant=\"light\">Delete Neighbor</Button>\n                    <Button variant=\"light\">Merge Precincts</Button>\n                  </ButtonGroup>\n                  <Card border=\"dark\">\n                    <Card.Body>\n                      <Form>\n                        <Form.Check\n                          className=\"pb-1\"\n                          type=\"switch\"\n                          id=\"precinct\"\n                          label=\"Hide Precinct Boundaries\"\n                          bsCustomPrefix=\"form-check\"\n                        />\n                      </Form>\n                      <Form>\n                        <Form.Check\n                          className=\"pb-1\"\n                          type=\"switch\"\n                          id=\"park\"\n                          label=\"View National Park Boundaries\"\n                          bsCustomPrefix=\"form-check\"\n                        />\n                      </Form>\n                      <Form.Check\n                        type=\"switch\"\n                        id=\"district\"\n                        label=\"View Congressional District Boundaries\"\n                        bsCustomPrefix=\"form-check\"\n                      />\n                    </Card.Body>\n                  </Card>\n                </Control>\n                <FeatureGroup>\n                  <EditControl\n                    position=\"topleft\"\n                    onCreated={this.handlePolygonCreated}\n                    onEdited={this.handlePolygonEdited}\n                    onDeleted={this.handlePolygonDeleted}\n                    draw={{\n                      polyline: false,\n                      circle: false,\n                      marker: false,\n                      circlemarker: false\n                    }}\n                  />\n                  {this.state.states.map((state) => {\n                    return (\n                      <Polygon\n                        id={state.id}\n                        key={state.id}\n                        positions={state.coordinates}\n                        smoothFactor={1}\n                        color={\"#102027\"}\n                        weight={1}\n                        fillOpacity={0.5}\n                        fillColor={state.fillColor}\n                        onClick={(e) => this.handleStateClick(e, state.id)}\n                        onMouseOver={this.handleMouseOver}\n                        onMouseOut={this.handleMouseOut}\n                      >\n                        <Tooltip>\n                          <b>{state.id}</b>\n                        </Tooltip>\n                      </Polygon>\n                    );\n                  })}\n                  {this.state.counties.map((county) => {\n                    return (\n                      <Polygon\n                        id={county.id}\n                        key={county.id}\n                        positions={county.coordinates}\n                        smoothFactor={1}\n                        color={\"#102027\"}\n                        weight={1}\n                        fillOpacity={0.5}\n                        fillColor={county.fillColor}\n                        onClick={(e) => this.handleCountyClick(e, county.id)}\n                        onMouseOver={this.handleMouseOver}\n                        onMouseOut={this.handleMouseOut}\n                      >\n                        <Tooltip>\n                          <b>{county.id}</b>\n                        </Tooltip>\n                      </Polygon>\n                    );\n                  })}\n                  {this.state.precincts.map((precinct) => {\n                    return (\n                      <Polygon\n                        id={precinct.id}\n                        key={precinct.id}\n                        positions={precinct.coordinates}\n                        smoothFactor={1}\n                        color={\"#102027\"}\n                        weight={1}\n                        fillOpacity={0.5}\n                        fillColor={precinct.fillColor}\n                        onClick={(e) =>\n                          this.handlePrecinctClick(e, precinct.id)\n                        }\n                        onMouseOver={this.handleMouseOver}\n                        onMouseOut={this.handleMouseOut}\n                      >\n                        <Tooltip>\n                          <b>{precinct.id}</b>\n                        </Tooltip>\n                      </Polygon>\n                    );\n                  })}\n                </FeatureGroup>\n              </Map>\n            </Col>\n          </Row>\n        </Container>\n      </Styles>\n    );\n  }\n}\n\nexport default MapView;\n"]},"metadata":{},"sourceType":"module"}