import { createElement } from 'react';
import styled, { css, keyframes } from 'styled-components';

const DEFAULT_SIZE = 40;
const DEFAULT_COLOR = '#333';

// This is an improvement of Math.round.
// It gives you the ability to round after a decimal.
const roundTo = (n, precision) => Math.round(n * 10 ** precision) / 10 ** precision;
const size = (width, height = width) => css `
  width: ${width};
  height: ${height};
`;
const sizePx = (n) => size(`${n}px`);
// eslint-disable-next-line no-shadow
const propSize = ({ size }) => sizePx(size);
const propBgColor = ({ color }) => css `
  background-color: ${color};
`;
// eslint-disable-next-line no-shadow
const propMargin = ({ size = 0 }) => css `
  margin: ${size}px auto;
`;
const animationDelay = (n) => css `
    animation-delay: ${n}s;
  `;
const propDelay = ({ delay }) => animationDelay(delay);
const getRange = (n) => Array.from(new Array(n).keys());

const rotate = keyframes `
  100% {
    transform: rotate(360deg);
  }
`;
const bounce = keyframes `
  0%,
  100% {
    transform: scale(0);
  }
  50% {
    transform: scale(1);
  }
`;
const duration = 2;
const Child = styled.div `
  ${size('60%')};
  display: inline-block;
  position: absolute;
  top: 0;
  border-radius: 100%;
  animation: ${bounce} ${duration}s infinite ease-in-out;
  ${p => p.second &&
    css `
      top: auto;
      bottom: 0;
      ${animationDelay(-duration / 2)};
    `};
`;
const StyledChangeDots = styled.div `
  ${propSize};
  ${propMargin};
  position: relative;
  text-align: center;
  animation: ${rotate} ${duration}s infinite linear;

  > ${Child} {
    ${propBgColor};
  }
`;

const ChangeDots = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    return (createElement(StyledChangeDots, { className: className, size: size, color: color },
        createElement(Child, null),
        createElement(Child, { second: true })));
};

const opacity = keyframes `
  0%,
  39%,
  100% {
    opacity: 0;
  }

  40% {
    opacity: 1;
  }
`;
const Child$1 = styled.div `
  ${size('100%')};
  position: absolute;
  left: 0;
  top: 0;
  transform: rotate(${p => p.rotate}deg);
  &::before {
    content: '';
    display: block;
    margin: 0 auto;
    ${size('15%')};
    border-radius: 100%;
    animation: ${opacity} 1.2s infinite ease-in-out both -${p => p.delay}s;
  }
`;
const StyledForldingCircle = styled.div `
  ${propSize};
  ${propMargin};
  position: relative;

  > ${Child$1} {
    &::before {
      ${propBgColor};
    }
  }
`;

const ForldingCircle = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    const count = 12;
    const range = 1.2;
    const circles = getRange(count).map(v => (createElement(Child$1, { key: v, rotate: roundTo((360 / count) * v, 1), delay: roundTo(range - (range / count) * v, 2) })));
    return (createElement(StyledForldingCircle, { className: className, size: size, color: color }, circles));
};

const bounce$1 = keyframes `
  0%,
  80%,
  100% {
    transform: scale(0);
  }
  40% {
    transform: scale(1);
  }
`;
const Child$2 = styled.div `
  border-radius: 100%;
  display: inline-block;
  animation: ${bounce$1} 1.4s ease-in-out ${p => p.delay}s infinite both;
`;
const StyledThreeBounce = styled.div `
  width: ${p => p.size}px;
  ${propMargin};
  text-align: center;
  border-radius: 100%;
  > ${Child$2} {
    ${p => sizePx(p.size / 4)};
    ${propBgColor};
  }
`;

const ThreeBounce = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    return (createElement(StyledThreeBounce, { className: className, size: size, color: color },
        createElement(Child$2, { delay: -0.32 }),
        createElement(Child$2, { delay: -0.16 }),
        createElement(Child$2, { delay: 0 })));
};

const scale = keyframes `
  0%,
  80%,
  100% {
    transform: scale(0);
  }
  40% {
    transform: scale(1);
  }
`;
const Child$3 = styled.div `
  ${size('100%')};
  position: absolute;
  top: 0;
  left: 0;
  transform: rotate(${p => p.transform}deg);

  &::before {
    content: '';
    display: block;
    margin: 0 auto;
    ${size('15%')};
    border-radius: 100%;
    animation: ${scale} 1.2s ease-in-out ${p => p.delay}s infinite both;
  }
`;
const StyledCircle = styled.div `
  ${propMargin};
  ${propSize};
  position: relative;

  > ${Child$3} {
    &::before {
      ${propBgColor};
    }
  }
`;

const Circle = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    const count = 12;
    const speed = 1.2;
    const circles = getRange(count).map(k => {
        const transform = roundTo((360 / count) * (k + 1), 1);
        const delay = roundTo(-speed + (speed / count) * k, 1);
        return createElement(Child$3, { key: delay, delay: delay, transform: transform });
    });
    return (createElement(StyledCircle, { className: className, size: size, color: color }, circles));
};

const locate = keyframes `
  0%,
  10% {
    transform: perspective(140px) rotateX(-180deg);
    opacity: 0;
  }
  25%,
  75% {
    transform: perspective(140px) rotateX(0deg);
    opacity: 1;
  }
  90%,
  100% {
    transform: perspective(140px) rotateY(180deg);
    opacity: 0;
  }
`;
const Child$4 = styled.div `
  float: left;
  ${size('50%')};
  position: relative;
  transform: scale(1.1) rotateZ(${p => p.scale}deg);
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    ${size('100%')};
    animation: ${locate} ${p => p.duration}s infinite linear both
      ${p => p.delay}s;
    transform-origin: 100% 100%;
  }
`;
const StyledFoldingCube = styled.div `
  ${propSize};
  ${propMargin};
  position: relative;
  transform: rotateZ(45deg);

  > ${Child$4} {
    &::before {
      ${propBgColor};
    }
  }
`;

const FoldingCube = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    const duration = 2.4;
    const range = duration / 2;
    const cubeCount = 4;
    const cubes = [0, 1, 3, 2].map(v => (createElement(Child$4, { scale: 90 * v, key: v, delay: roundTo((range / cubeCount) * v, 2), duration: duration })));
    return (createElement(StyledFoldingCube, { className: className, size: size, color: color }, cubes));
};

const createAnim = (cubeDistance = 42) => keyframes `
  0% {
    transform: rotate(0deg);
  }
  25% {
    transform: translateX(${cubeDistance}px) rotate(-90deg) scale(0.5);
  }
  50% {
    /* Hack to make FF rotate in the right direction */
    transform: translateX(${cubeDistance}px) translateY(${cubeDistance}px) rotate(-179deg);
  }
  50.1% {
    transform: translateX(${cubeDistance}px) translateY(${cubeDistance}px) rotate(-180deg);
  }
  75% {
    transform: translateX(0) translateY(${cubeDistance}px) rotate(-270deg) scale(0.5);
  }
  100% {
    transform: rotate(-360deg);
  }
`;
const Child$5 = styled.div `
  ${propSize};
  ${propDelay};
  position: absolute;
  top: 0;
  left: 0;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  animation-fill-mode: both;
`;
const StyledWanderingCubes = styled.div `
  margin: ${p => roundTo(p.size * 0.8, 1)}px auto;
  ${propSize};
  text-align: center;
  font-size: 10px;
  position: relative;

  > ${Child$5} {
    ${propBgColor};
    animation-name: ${p => createAnim(roundTo(p.size * 0.8, 1))};
    animation-duration: ${p => p.speed}s;
  }
`;

const WanderingCubes = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    const speed = 1.8;
    const cubeSize = roundTo(size / 4, 2);
    return (createElement(StyledWanderingCubes, { speed: speed, className: className, size: size, color: color },
        createElement(Child$5, { delay: speed, size: cubeSize }),
        createElement(Child$5, { delay: speed / 2, size: cubeSize })));
};

const scale$1 = keyframes `
  0%,
  70%,
  100% {
    transform: scale3d(1, 1, 1);
  }

  35% {
    transform: scale3d(0, 0, 1);
  }
`;
const Child$6 = styled.div `
  ${size('33.33%')};
  float: left;
  animation: ${scale$1} 1.3s infinite ease-in-out ${p => p.delay}s;
`;
const StyledCubeGrid = styled.div `
  ${propSize};
  ${propMargin};
  > ${Child$6} {
    ${propBgColor};
  }
`;

const CubeGrid = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    const range = 0.4;
    const cubes = [0.5, 0.75, 1, 0.25, 0.5, 0.75, 0, 0.25, 0.5]
        .map(v => roundTo(range * v, 2))
        .map((v, k) => createElement(Child$6, { key: k, delay: v }));
    return (createElement(StyledCubeGrid, { className: className, size: size, color: color }, cubes));
};

const scaleOut = keyframes `
  0% {
    transform: scale(0);
  }
  100% {
    opacity: 0;
    transform: scale(1);
  }
`;
const StyledPulse = styled.div `
  ${propSize};
  ${propBgColor};
  ${propMargin};
  border-radius: 100%;
  animation: ${scaleOut} 1s ease-in-out infinite;
`;

const Pulse = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    return createElement(StyledPulse, { className: className, size: size, color: color });
};

const anim = keyframes `
  0%,
  40%,
  100% {
    transform: scaleY(0.4);
  }
  20% {
    transform: scaleY(1);
  }
`;
const Rect = styled.div `
  ${size('7px', '100%')};
  margin: 0 3px 0 0;
  display: inline-block;
  ${propDelay};
`;
const StyledWave = styled.div `
  ${propMargin};
  ${p => size(`${p.size * 1.25}px`, `${p.size}px`)};
  text-align: center;
  font-size: 10px;

  > ${Rect} {
    ${propBgColor};
    animation-name: ${anim};
    animation-duration: ${p => p.speed}s;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
  }
`;

const speed = 1.2;
const rectCount = 5;
const delayRange = 0.4;
const Wave = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    const rects = getRange(rectCount).map(v => (createElement(Rect, { delay: roundTo(-speed + (delayRange / (rectCount - 1)) * v, 1), key: v })));
    return (createElement(StyledWave, { speed: speed, className: className, size: size, color: color }, rects));
};

const debounce = keyframes `
  0%,
  100% {
    transform: scale(0);
  }
  50% {
    transform: scale(1);
  }
`;
const Child$7 = styled.div `
  ${size('100%')};
  border-radius: 50%;
  position: absolute;
  opacity: 0.6;
  top: 0;
  left: 0;
  animation: ${debounce} 2s infinite ease-in-out;
  ${p => p.isDelay && animationDelay(-1)};
`;
const StyledDoubleBounce = styled.div `
  ${propSize};
  position: relative;
  ${propMargin};
  > ${Child$7} {
    ${propBgColor};
  }
`;

const DoubleBounce = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    return (createElement(StyledDoubleBounce, { className: className, size: size, color: color },
        createElement(Child$7, null),
        createElement(Child$7, { isDelay: true })));
};

const spin = keyframes `
  0% {
    transform: perspective(120px) rotateX(0deg) rotateY(0deg);
  }
  50% {
    transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);
  }
  100% {
    transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);
  }
`;
const StyledRotaingPlain = styled.div `
  ${propSize};
  ${propBgColor};
  ${propMargin};
  animation: ${spin} ${p => p.speed}s infinite ease-in-out;
`;

const speed$1 = 1.2;
const RotaingPlain = ({ size = DEFAULT_SIZE, color = DEFAULT_COLOR, className, }) => {
    return (createElement(StyledRotaingPlain, { className: className, size: size, color: color, speed: speed$1 }));
};

export { ChangeDots as ChasingDots, Circle, CubeGrid, DoubleBounce, ForldingCircle as FadingCircle, FoldingCube, Pulse, RotaingPlain as RotaingPlane, ThreeBounce, WanderingCubes, Wave as WaveLoading };
//# sourceMappingURL=styled-spinkit.esm.js.map
